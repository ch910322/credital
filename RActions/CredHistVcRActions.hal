
global
function LongInt CredHistVcRecordInIndex(record CredHistVc CredHistr,string indexname)
begin
  LongInt res;
  
  res = 1;
  if (indexname=="CredManTransDate") then begin 
    res = 0; 
    if (CredHistr.MainRecord==1) then begin 
      res = 1;
    end;
  end;
  CredHistVcRecordInIndex = res;
  return;
end; 

updating procedure UpdateInvoicedCredHist(Longint prevnr)
begin
  record CredHistVc CredHistr,pCredHistr,oldCredHistr,CredHist2r;
  Boolean TrHs;
  val sum,due;
  Integer pdf;
  record ARVc ARr;

  CredHistr.SerNr = prevnr;
  if (ReadFirstMain(CredHistr,1,true)) then begin
    CredHist2r.MainRecord = 1;
    CredHist2r.RecordNr = CredHistr.RecordNr;
    CredHist2r.RecordType = 0;
    if (ReadFirstKey("MainRecord",CredHist2r,3,true)) then begin
      ARr.InvoiceNr = CredHist2r.RecordNr;
      if (ReadFirstMain(ARr,1,true)) begin
        due = ARr.RVal;
      end;
      RecordCopy(oldCredHistr,CredHist2r);
      CredHist2r.PaidSum = CredHist2r.InvSum - ARr.RVal;
      if (ARr.RVal==0) then begin
        CredHist2r.PaidFlag = 1;
      end else begin
        CredHist2r.PaidFlag = 0;
      end;
      RecordUpdate(oldCredHistr,CredHist2r,true);
    end;

  end;
/*
    TrHs = true;
    pCredHistr.PreviousNr = prevnr;
    while (LoopKey("PreviousNr",pCredHistr,1,TrHs)) begin
      if (pCredHistr.PreviousNr!=prevnr) then begin
        TrHs = false;
      end else begin
        sum = sum + pCredHistr.Sum;
      end;
    end;
    if (CredHistr.Sum==sum) then begin
      pdf = 1;
    end;
    RecordCopy(oldCredHistr,CredHistr);
    CredHistr.PaidFlag = pdf;
    CredHistr.PaidSum = sum;
    RecordUpdate(oldCredHistr,CredHistr,true);
*/


  return;
end;

global
updating function LongInt CredHistVcRecordSaveAfter(var record CredHistVc CredHistr,record CredHistVc CredHist2r,LongInt stat,LongInt long4)
begin
  LongInt res;

  res = 0;

  //if this is payment then we have to check invoice records and if it is fully paid
  if (CredHistr.RecordType==1 or CredHistr.RecordType==2 or CredHistr.RecordType==3) then begin
    UpdateInvoicedCredHist(CredHistr.PreviousNr);
  end;

  CredHistVcRecordSaveAfter = res;
  return;
end;

global
updating function LongInt CredHistVcRecordRemoveAfter(var record CredHistVc CredHistr,record CredHistVc CredHist2r,LongInt stat,LongInt long4)
begin
  LongInt res;

  res = 0;

  //if this is payment then we have to update invoice history as well
  if (CredHistr.RecordType==1 or CredHistr.RecordType==2 or CredHistr.RecordType==3) then begin
    UpdateInvoicedCredHist(CredHistr.PreviousNr);
  end;

  CredHistVcRecordRemoveAfter = res;
  return;
end;