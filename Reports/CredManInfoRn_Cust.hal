//This report should not be even compared with master code. It will be completely different

external procedure BuildCredManPayPlanCust(record CredManVc,var record CredManPayPlanVc,record CredManSetBlock,Boolean,Boolean);
external inner procedure SplitEclass(string,var Array string);
external inner function val GetPlanTypeVal(Integer,val);
external function string 255 GetPlanTypeTextCust(Integer);
external inner procedure CalcCredManSums(record CredManVc,record CredManPayPlanVc,record CredManSetBlock,var val,var val,var val,var val,var val,var val,var val,var val,
                                   var val,var val,var val,var val,var val,var val,var val,var val,var val,var val,var val,var val,
                                   var val,var Date,var val,var val,var LongInt);
external procedure GetCredManOverdueInvoices(record CredManVc,record CredManSetBlock,Date,Date,var Integer,var val);
external inner function LongInt DateDiff(Date,Date);
external procedure TestCredManInvoicesFromPlan(record CredManVc,record CredManSetBlock,record CredManPayPlanVc,Date,var array record IVVc);

procedure PrintLeft(string col1str,string col1val,string col2str,string col2val)
begin
  StartFormat(15);
  OutString(0,0,col1str,false);
  OutString(80,0,col1val,false);
  OutString(180,0,col2str,false);
  OutString(280,0,col2val,false);
  EndFormat;
end;

procedure PrintLeft2(string col1str,string col1id,string col1val,string col2str,string col2val)
begin
  StartFormat(15);
  OutString(0,0,col1str,false);
  OutStringID(80,"DblCUVc",col1val,false,col1id);
  OutString(180,0,col2str,false);
  OutString(280,0,col2val,false);
  EndFormat;
end;

procedure PrintRight(string col1str,string col1val,string col2str,string col2val,string col3str,string col3val)
begin
  StartFormat(15);
  OutString(0,0,col1str,false);
  OutString(150,0,col1val,true);
  OutString(160,0,col2str,false);
  OutString(310,0,col2val,true);
  OutString(320,0,col3str,false);
  OutString(470,0,col3val,true);
  EndFormat;
end;

procedure FindCredManDueData(record CredManVc CredManr,var Integer latedays,var val latefees)
begin
  record CredHistVc CredHistr;
  Boolean TrHs;
  record ARVc ARr;
  
  TrHs = true;
  CredHistr.CredManNr = CredManr.SerNr;
  CredHistr.ChargeType = 9;
  while (LoopKey("CredManChargeType",CredHistr,2,TrHs)) begin
    if (CredHistr.CredManNr!=CredManr.SerNr or CredHistr.ChargeType!=9) then begin
      TrHs = false;
    end else begin
      latefees = latefees + CredHistr.Sum;
    end;
  end;

  ResetLoop(CredHistr);
  RecordClear(CredHistr);
  TrHs = true;
  CredHistr.CredManNr = CredManr.SerNr;
  while (LoopKey("CredManTypeDate",CredHistr,1,TrHs)) begin
    if (CredHistr.CredManNr!=CredManr.SerNr) then begin
      TrHs = false;
    end else begin
      if (CredHistr.RecordType==0) then begin
        ARr.InvoiceNr = CredHistr.RecordNr;
        if (ReadFirstMain(ARr,1,true)) then begin
          if (ARr.RVal>0) then begin
            latedays = DateDiff(CurrentDate,ARr.DueDate);
            TrHs = false;
          end;
        end;
      end;
    end;
  end;

  return;
end;

procedure PrintCredManTop(record CredManVc CredManr,record CredManPayPlanVc CredManPayPlanr,record CredManSetBlock CredManSetb)
begin
  record CredManPayPlanVc CredManPayPlan2r;
  row CredManPayPlanVc CredManPayPlanrw;
  val planinst,planint,planfee,plandep;
  val suginst,sugint,sugfee,sugdep;
  val invdinst,invdint,invdfee,invddep;
  val paidinst,paidint,paidfee,paiddep;
  val addinst,addint,addfee,adddep,latefees;
  val lastpaid,curbal,cursuginst;
  val settlesum,due,overdue,totsum;
  Date lastpaiddate,bldat,theday,d;
  LongInt missednow,missedworst,missedtot,contractage;
  LongInt i,rwcnt,i2,rwcnt2,agecnt,l,lasti,lasti2;
  val shouldbeint,shouldbesug,v,v2;
  Boolean stopnextzero;
  Integer latedays;

  rwcnt = MatRowCnt(CredManPayPlanr);
  CalcCredManSums(CredManr,CredManPayPlanr,CredManSetb,planinst,planint,planfee,plandep,suginst,sugint,sugfee,sugdep,
                  invdinst,invdint,invdfee,invddep,paidinst,paidint,paidfee,paiddep,addinst,addint,addfee,adddep,
                  lastpaid,lastpaiddate,curbal,cursuginst,contractage);

  totsum = CredManr.InvSum4 - CredManr.DepositSum;
  if (contractage>CredManr.SettleLimit) then begin
    settlesum = curbal;
  end else begin
    settlesum = CredManr.InvSum4 + addfee - paidinst - addint - paiddep; //  - paidfee
  end;

  BuildCredManPayPlanCust(CredManr,CredManPayPlan2r,CredManSetb,true,false); // This build is for what was originally planned
  FindCredManDueData(CredManr,latedays,latefees);;

  agecnt = 0;
  stopnextzero = false;
  rwcnt2 = MatRowCnt(CredManPayPlan2r);
  for (i2=0;i2<rwcnt2;i2=i2+1) begin
    MatRowGet(CredManPayPlan2r,i2,CredManPayPlanrw);
    if (CredManPayPlanrw.PlanType==1) then begin
      shouldbeint = shouldbeint + CredManPayPlanrw.Sum;
      agecnt = agecnt + 1;
    end;
    if (CredManPayPlanrw.PlanType>=5 and CredManPayPlanrw.PlanType<=8) then begin
      shouldbesug = shouldbesug + CredManPayPlanrw.Sum;
    end;
    if (CredManPayPlanrw.PlanType==0) then begin
      if (stopnextzero) then begin
        i2 = rwcnt2;
      end;
    end;
    if (agecnt>=contractage) then begin
      stopnextzero = true;
    end;
  end;
  v = 0;
  v2 = 0;
  lasti = 0;
  lasti2 = 0;
  missedtot = 0;
  missedworst = 0;
  for (l=0;l<contractage;l=l+1) begin
    theday = bldat;
    for (i=lasti;i<rwcnt;i=i+1) begin
      MatRowGet(CredManPayPlanr,i,CredManPayPlanrw);
      if (CredManPayPlanrw.PlanType==17) then begin
        theday = CredManPayPlanrw.TransDate;
        v = CredManPayPlanrw.Bal;
      end;
      if (nonblankdate(theday)) then begin
        if (CredManPayPlanrw.TransDate!=theday) then begin
          lasti = i;
          i = rwcnt;
        end else begin
          v = CredManPayPlanrw.Bal;
        end;
      end;
    end;
    theday = bldat;
    for (i2=lasti2;i2<rwcnt2;i2=i2+1) begin
      MatRowGet(CredManPayPlan2r,i2,CredManPayPlanrw);
      if (CredManPayPlanrw.PlanType==1) then begin
        theday = CredManPayPlanrw.TransDate;
        v2 = CredManPayPlanrw.Bal;
      end;
      if (nonblankdate(theday)) then begin
        if (CredManPayPlanrw.TransDate!=theday) then begin
          lasti2 = i2;
          i2 = rwcnt2;
        end else begin
          v2 = CredManPayPlanrw.Bal;
        end;
      end;
    end;
    if (v>v2) then begin
      missedtot = missedtot + 1;
    end else begin
      if (missedtot>missedworst) then begin
        missedworst = missedtot;
      end;
      missedtot = 0;
    end;
  end;
  if (missedtot>missedworst) then begin
    missedworst = missedtot;
  end;
  due = shouldbesug - paidinst - paidint - paidfee - paiddep + addint - shouldbeint;
  missednow = (due / CredManr.MonthlySum);
  
  BuildCredManPayPlanCust(CredManr,CredManPayPlan2r,CredManSetb,true,false); // This build is ONLY for Next Suggested Instalment......
  CalcCredManSums(CredManr,CredManPayPlanr,CredManSetb,v,v,v,v,v,v,v,v,v,v,v,v,v,v,v,v,v,v,v,v,v,d,v,cursuginst,l);

  PrintLeft(USetStr(17317),CredManr.SerNr,USetStr(17310),StringFromSet(368,CredManr.InstalmentType));
  PrintLeft2("Customer",CredManr.CustCode,CredManr.Addr0,USetStr(17315),CredManr.startDate);
  PrintLeft(USetStr(17309),CredManr.Type,"Interest From Date",CredManr.FirstIntDate);
  PrintLeft(USetStr(17313),CredManr.InvSum4,"First Invoice Date",CredManr.FirstInvDate);
  PrintLeft(USetStr(17311),CredManr.IntRate,USetStr(17316),CredManr.endDate);
  PrintLeft(USetStr(17312),CredManr.InstalmentMonths,USetStr(17318),CredManr.TransDate);
  PrintLeft("","","","");
  
  PrintRight("Deposit",CredManr.DepositSum,"Deposit Paid",paiddep,"Deposit Due",CredManr.DepositSum - paiddep);
  PrintRight("Current Balance",curbal,"Next Instal.",cursuginst,"Original Instal.",CredManr.MonthlySum);
  PrintRight("Amount Now Due",due,"","","","");
  PrintRight("Arrear Instalments",missednow,"Maximal Days Late",latedays,"Worst Arrear Period",missedworst);
  PrintRight("Contract Age",contractage,"Settlement Sum",settlesum,"","");
  PrintRight("Paid to Date",paidinst + paidint + paidfee + paiddep,"Last Paid Amount",lastpaid,"Last Paid Date",lastpaiddate);
  PrintRight("Fees to Date",addfee,"Interest to Date",addint,"Penalties to Date",latefees);
  
  StartFormat(15);
  EndFormat;
  return;
end;

procedure AddInvoiceToList(record IVVc IVr,var record SMVc SMr,var val calcbal)
begin
  Integer i,rwcnt;
  row IVVc IVrw;
  val inst,intrate,fees,pen;
  row SMVc SMrw;
  
  rwcnt = MatRowCnt(IVr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IVr,i,IVrw);
    switch (IVrw.ChargeType) begin
      case 1: 
        inst = IVrw.Sum; 
        calcbal = calcbal - IVrw.Sum;
      case 2: 
        intrate = IVrw.Sum;
      case 3: 
        calcbal = calcbal - IVrw.Sum;
      case 4: 
        fees = fees + IVrw.Sum;
      case 9: 
        pen = pen + IVrw.Sum;
    end;
  end;

  ClearRow(SMr,SMrw,1);
  SMrw.TransDate = IVr.InvDate;
  SMrw.RowSimStat = 0;//type
  SMrw.DebVal = inst;
  SMrw.CredVal = intrate;
  SMrw.DebVal2 = fees;
  SMrw.CredVal2 = pen;
  SMrw.CurDebVal = IVr.Sum4;
  SMrw.CurCredVal = calcbal;
  MatRowPut(SMr,MatRowCnt(SMr),SMrw);

  return;
end;

procedure BuildCredManInfoMatrix(record CredManVc CredManr,record CredManPayPlanVc CredManPayPlanr,record CredManSetBlock CMb,var record SMVc SMr)
begin
  Integer i,rwcnt;
  array record IVVc aIVr;
  record IVVc IVr;
  record IPVc IPr;
  record CredHistVc CredHistr;
  row CredManPayPlanVc CredManPayPlanrw;
  val calcbal;
  vector Boolean vRec;

  calcbal = CredManr.InvSum4;
  rwcnt = MatRowCnt(CredManPayPlanr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(CredManPayPlanr,i,CredManPayPlanrw);
    if (CredManPayPlanrw.PlanType>=5) then begin
      CredHistr.SerNr = CredManPayPlanrw.IssuedNr;
      if (ReadFirstMain(CredHistr,1,true)) then begin
        if (vRec[CredHistr.RecordType & ":" & CredHistr.RecordNr]==false) then begin
          vRec[CredHistr.RecordType & ":" & CredHistr.RecordNr] = true;
          if (CredHistr.RecordType==0) then begin//invoice
            IVr.SerNr = CredHistr.RecordNr;
            if (ReadFirstMain(IVr,1,true)) then begin
              AddInvoiceToList(IVr,SMr,calcbal);
            end;
          end else begin
            IPr.SerNr = CredHistr.RecordNr;
            if (ReadFirstMain(IPr,1,true)) then begin
              //AddReceiptToList(IPr,SMr);
            end;
          end;
        end;
      end;
    end;
  end;
  TestCredManInvoicesFromPlan(CredManr,CMb,CredManPayPlanr,CredManr.endDate,aIVr);
  for (i=0;i<aIVr.length;i=i+1) begin
    IVr = aIVr[i];
    AddInvoiceToList(IVr,SMr,calcbal);
  end;

  return;
end;

procedure PrintCredManInfo(record CredManVc CredManr,record CredManSetBlock CredManSetb,Integer detaillevel,Boolean withactuals,Boolean suggestedonsameday)
begin
  record CredManPayPlanVc CredManPayPlanr;
  row CredManPayPlanVc CredManPayPlanrw;
  LongInt i,rwcnt;
  string 40 dblstr;
  Integer prevtype;
  record SMVc SMr;
  row SMVc SMrw;

  BuildCredManPayPlanCust(CredManr,CredManPayPlanr,CredManSetb,withactuals,suggestedonsameday);
  PrintCredManTop(CredManr,CredManPayPlanr,CredManSetb);
  StartFormat(15);
  OutString(0,0,USetStr(17326),false);
  EndFormat;
  StartFormat(15);
  OutString(0,0,USetStr(200090),false);
  OutString(2,0,USetStr(200091),false);
  OutString(5,0,USetStr(200092),true);
  OutString(6,0,USetStr(200093),true);
  OutString(7,0,USetStr(200094),true);
  OutString(8,0,USetStr(200095),true);
  OutString(9,0,USetStr(200096),true);
  OutString(1,0,USetStr(200097),true);
  EndFormat;
  Gray_Divider(0,1);
  StartFormat(15);
  OutString(0,0,USetStr(17303),false);
  OutVal(1,0,CredManr.InvSum4,M4Val,true);
  EndFormat;
  Gray_Divider(0,1);

  BuildCredManInfoMatrix(CredManr,CredManPayPlanr,CredManSetb,SMr);

  rwcnt = MatRowCnt(SMr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(SMr,i,SMrw);
    StartFormat(15);
    OutString(0,0,SMrw.TransDate,false);
    OutString(2,0,StringFromSet(2011,SMrw.RowSimStat),false);
    OutString(5,0,SMrw.DebVal,true);
    OutString(6,0,SMrw.CredVal,true);
    OutString(7,0,SMrw.DebVal2,true);
    OutString(8,0,SMrw.CredVal2,true);
    OutString(9,0,SMrw.CurDebVal,true);
    OutString(1,0,SMrw.CurCredVal,true);
    EndFormat;
  end;

  StartFormat(15);
  EndFormat;
  return;
end;

global
procedure CredManInfoRn(record RcVc RepSpec)
begin
  record CredManVc CredManr;
  record CredManSetBlock CredManSetb;
  LongInt frcr,tocr;
  Boolean foundf,testf;
  
  BlockLoad(CredManSetb);
  frcr = FirstInRange(RepSpec.f1,10);
  tocr = LastInRange(RepSpec.f1,10);
  
  StartReportJob(USetStr(17319));
  EndHeader;
  SetRepCol(2,80);
  SetRepCol(3,180);
  SetRepCol(4,280);
  SetRepCol(5,160);
  SetRepCol(6,220);
  SetRepCol(7,280);
  SetRepCol(8,340);
  SetRepCol(9,400);
  CredManr.SerNr = frcr;
  foundf = true;
  while (LoopMain(CredManr,1,foundf)) begin
    if (CredManr.SerNr>tocr) then begin
      foundf = false;
    end;
    testf = foundf;
    if (testf) then begin
      if (RepSpec.flags[1]>0) then begin
        CredManr.InstalmentType = RepSpec.flags[1] - 1;
      end;
      PrintCredManInfo(CredManr,CredManSetb,RepSpec.flags[0],RepSpec.flags[2]==1,RepSpec.flags[3]==1,);
    end;
  end;
  EndJob;
  return;
end;

global
procedure CredManInfoSelRn(record RcVc RepSpec)
begin
  record CredManEventVc CredManEventr;
  array string 20 ac;
  Integer i;
  
  StartReportJob(USetStr(17319));
  EndHeader;
  SetRepCol(2,80);
  SetRepCol(3,400);
  StartFormat(15);
  OutString(0,0,USetStr(17325),false);
  OutString(2,0,USetStr(17324),false);
  OutString(3,0,USetStr(17322),true);
  OutString(1,0,USetStr(17323),true);
  EndFormat;
  Gray_Divider(0,1);
  i = 0;
  SplitEclass(RepSpec.f1,ac);
  while (nonblank(ac[i])) begin
    CredManEventr.SerNr = StringToLongInt(ac[i]);
    if (ReadFirstMain(CredManEventr,1,true)) then begin
      StartFormat(15);
      OutStringID(0,"DblCredManEventVc",CredManEventr.TransDate,false,CredManEventr.SerNr);
      OutString(2,0,CredManEventr.Comment,false);
      OutVal(3,0,CredManEventr.InvSum,M4Val,true);
      OutVal(1,0,CredManEventr.PaidSum,M4Val,true);
      EndFormat;
    end;
    i = i + 1;
  end;
  EndJob;
  return;
end;
