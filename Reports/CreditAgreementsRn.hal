//<halrule>server-only</halrule>
external procedure BuildCredManPayPlanCust(record CredManVc,var record CredManPayPlanVc,record CredManSetBlock,Boolean,Boolean);
external inner function Boolean SetInSet2(string,string);


SetLangMode(LangLithuanian,"LIT",2);

function string 10 Checkbocout(boolean in)
begin
	string 10 res;
	res = "";
	
	if(in)then begin
		res = "Taip";
	end;
	Checkbocout = res;
return;
end;

global
function val GetFutureCredManBalance(record CredManVc CredManr,record CredManSetBlock CredManSetb,Date baldate)
begin
	val res;
	record CredManPayPlanVc CredManPayr;
	row CredManPayPlanVc CredManPayrw;
	Integer rwcnt,i;
  val open;

	res = blankval;
	BuildCredManPayPlanCust(CredManr,CredManPayr,CredManSetb,true,false);
	rwcnt = MatRowCnt(CredManPayr);
	for (i=rwcnt-1;i>=0;i=i-1) begin
		MatRowGet(CredManPayr,i,CredManPayrw);
    open = open + CredManPayrw.OpenAmount;
		if (CredManPayrw.TransDate<=baldate) then begin
  		res = CredManPayrw.Bal;
			i = 0;
		end;
	end;
	if (res==blankval) then begin
    if (rwcnt==1) then begin
      res = CredManr.InvSum4;
    end else begin
      MatRowGet(CredManPayr,0,CredManPayrw);
      res = CredManPayrw.Bal;      
    end;
	end else begin
    res = res + open;
  end;

	GetFutureCredManBalance = res;
	return;
end;

global procedure CreditAgreementsRn(record RcVc RepSpec)
begin
	record CredManVc CredManr;
	boolean TrHs,testf;
	record CredManEventVc CMEventr;
	string 200 thekey;
	val curbal,totamount,totdep,totmonth,totbal;
	record CredManSetBlock CredManSetb;
	record CUVc CUr;


	BlockLoad(CredManSetb);
	startreportjob(USetStr(1000005));
	
	endheader;

  if (blank(RepSpec.d1)) then begin
    RepSpec.d1 = CurrentDate;
  end;
	
	StartFormat(15);
		OutString(0,0,"Nr",false);
		if(RepSpec.Media==mtExcel)then begin
			OutString(35,0,"Sustabdytos",false);
			OutString(70,0,"Nutrauktos",false);
			OutString(70,0,"Nepatvirtintos",false);
			OutString(70,0,"Be OK",false);
			OutString(70,0,"Baigtos",false);
		end;
		OutString(35,0,"Įmonės kd.",false);
//		OutString(35,0,"Klientas",false);
		OutString(70,0,"Pavadinimas",false);
		OutString(140,0,"Pradžios data",false);
		OutString(175,0,"Pabaigos data",false);
		OutString(210,0,"Viso suma",false);//totoals
		OutString(245,0,"Užstato suma",false);//totals
		OutString(280,0,"Užstato %",false);
		OutString(315,0,"Mėnesiai",false);
		OutString(350,0,"Palūkanų %",false);
		OutString(385,0,"Mėnesiniai įnašai",false);//totals
		OutString(1,0,"Balansų vertė",true);//totals
	EndFormat;
	
	TrHs = true;
	CredManr.startDate = RepSpec.sStartDate;
	while(loopkey("startDate",CredManr,1,TrHs))begin
		testf = true;
		if(nonblank(RepSpec.f1) and CredManr.CustCode!=RepSpec.f1)then begin testf = false; end;
		if(nonblank(RepSpec.f2) and CredManr.Type!=RepSpec.f2)then begin testf = false; end;
		if(nonblank(RepSpec.f3) and CredManr.OrderClass!=RepSpec.f3)then begin testf = false; end;
		if(RepSpec.flags[3]==0 and CredManr.Approved==0)then begin testf = false; end;
		if(RepSpec.flags[4]==0 and CredManr.OKFlag==0)then begin testf = false; end;
		if(CredManr.startDate<RepSpec.sStartDate)then begin testf = false; end;
    if (nonblank(RepSpec.f4) and SetInSet2(RepSpec.f4,CredManr.Classifications)==false) then begin 
      testf = false; 
    end;
		if(CredManr.startDate>RepSpec.sEndDate)then begin testf = false; TrHs = false; end;
		
		if (testf) then begin
  		curbal = GetFutureCredManBalance(CredManr,CredManSetb,RepSpec.d1);
			if(RepSpec.flags[5]==0 and curbal<=0)then begin testf = false; end;
		end;
		
		if(testf)then begin
		  CUr.Code = CredManr.CustCode;
		  ReadFirstMain(CUr,1,true);
			StartFormat(15);
      OutString(0,"DblCredManVc",CredManr.SerNr,false);
      if(RepSpec.Media==mtExcel)then begin
        OutString(70,0,Checkbocout(CredManr.Approved==0),false);
        OutString(70,0,Checkbocout(CredManr.OKFlag==0),false);
        OutString(70,0,Checkbocout(curbal==0),false);
      end;
      OutStringID(35,"DblCUVc",CUr.RegNr1,false,CUr.Code);
//      OutString(35,"DblCUVc",CredManr.CustCode,false);
      OutString(70,0,CredManr.Addr0,false);
      OutString(140,0,CredManr.startDate,false);
      OutString(175,0,CredManr.endDate,false);
      OutString(210,0,CredManr.InvSum4,false);
      OutString(245,0,CredManr.DepositSum,false);
      OutString(280,0,CredManr.DepositPrc,false);
      OutString(315,0,CredManr.InstalmentMonths,false);
      OutString(350,0,CredManr.IntRate,false);
      OutString(385,0,CredManr.MonthlySum,false);
      OutString(1,0,curbal,true);
      totamount = totamount + CredManr.InvSum4;
      totdep = totdep + CredManr.DepositSum;
      totmonth = totmonth + CredManr.MonthlySum;
      totbal = totbal + curbal;
			EndFormat;
		end;
	end;
  StartFormat(1);
  Gray_divider(0,1);
  EndFormat;
  StartFormat(15);
  OutString(0,0,"",false);
  OutString(70,0,"",false);
  OutString(140,0,"",false);
  OutString(175,0,"",false);
  OutString(210,0,totamount,false);
  OutString(245,0,totdep,false);
  OutString(280,0,"",false);
  OutString(315,0,"",false);
  OutString(350,0,"",false);
  OutString(385,0,totmonth,false);
  OutString(1,0,totbal,true);
  EndFormat;
	
	endjob;

return;
end;