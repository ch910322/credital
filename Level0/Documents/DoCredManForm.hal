//<halrule>server-only</halrule>
external procedure PrintCurrencyCode(string,string);
external procedure OutAddress(string,string,string,string,string,string,string);
external function Boolean FindFormcode(Integer,Integer);
external function val MulRateToBase2(var string,val,val,val,val,val,val,roundmode);
external function val MulRateToBase1(var string,val,val,val,val,val,val,roundmode);
external function Boolean Getformcode(Integer,Integer,string,string,string,LongInt,LongInt,string,string,Integer,string,var string);
external function Integer NumberofDocumentPages(string,Integer);
external procedure GetLangNr(string,var record LangNrVc);
external procedure GetUserName(string,var string);
external procedure GetFullCurncyRateText(Boolean,var string,val,val,val,val,val);
external procedure ItemBC39(string,var string);
external procedure GetItemGroup(string,var string);
external procedure GetUnitStr(string,string,var string);
external procedure GetPayDealText(string,string,var string);
external procedure GetShipDealText(string,string,var string);
external procedure GetShipModeText(string,string,var string);
external procedure ItemBCEAN(string,var string);
external procedure ItemBCEAN13(string,var string);
external procedure CommonDocumentFields(record RcVc);
external procedure ValToText(val,Integer,string,string,var string);
//external procedure CredManSetFax(record CUVc,record CredManVc);
//CUST-BEGIN
external outer function val GetMonthlyPaymentAmount(record CredManVc,Integer);
external outer procedure PrintDocumentSigner();
external function roundmode SetRoundModeD(Integer);
external outer procedure FindFirstContactPerson(record CUVc,var record CUVc);

global
function string 255 CredManOwnBankAccount(Longint credmannr)
begin
  record CYBlock CYb;
  record CredManVc CredManr;
  record CredManTypeVc CMTr;
  string 255 res;
  
  BlockLoad(CYb);
  res = CYb.Bank2;
  
  CredManr.SerNr = credmannr;
  if (ReadFirstMain(CredManr,1,true)) then begin
    CMTr.Code = CredManr.Type;
    if (ReadFirstMain(CMTr,1,true)) then begin
      if (nonblank(CMTr.OwnBankAccount)) then begin
        res = CMTr.OwnBankAccount;
      end;
    end;
  end;

  CredManOwnBankAccount = res;
  return;
end;

global
function string 255 CredManCustEmail(record CUVc CUr)
begin
  string 255 res;
  record CUVc ContactCUr;

  res = CUr.eMail;
  if (blank(res)) then begin
    FindFirstContactPerson(CUr,ContactCUr);
    res = ContactCUr.eMail;
  end;

  CredManCustEmail = res;
  return;
end;

global
function Boolean FindCustomerRelationCred(string custcode,string contactname,var record CUVc ContactCUr)
begin
  Boolean res,TrHs;
  record ContactRelVc CRr;
  record CUVc CUr;

  TrHs = true;
  CRr.CustCode = custcode;
  while (LoopMain(CRr,1,TrHs)) begin
    if (CRr.CustCode!=custcode) then begin
      TrHs = false;
    end else begin
      CUr.Code = CRr.ContactCode;
      if (ReadFirstMain(CUR,1,true)) then begin
        if (CUr.Name==contactname) then begin
          res = true;
          RecordCopy(ContactCUr,CUr);
          TrHs = false;
        end;
      end;    
    end;
  end;

  FindCustomerRelationCred = res;
  return;
end;

procedure GetCredManCustContact(record CredManVc CredManr,var string contactid,var string contactname)
begin
  record CUVc ContactCUr;

  if (nonblank(CredManr.ClientContact)) then begin
    if (FindCustomerRelationCred(CredManr.CustCode,CredManr.ClientContact,ContactCUr)) then begin
      contactid = ContactCUr.RegNr1;
      contactname = ContactCUr.Name;
    end;
  end;

  return;
end;


//these functions are on client only. 
function Boolean MonthlyChargeType(Integer chargetype)
begin
  Boolean res;

  if (chargetype==1 or chargetype==3) then begin
    res = true;
  end;
  
  MonthlyChargeType = res;
  return;
end;

function Boolean CalculatedChargeType(Integer chargetype)
begin
  Boolean res;

  if (chargetype==2 or chargetype==3) then begin
    res = true;
  end;
  
  CalculatedChargeType = res;
  return;
end;

global
function val GetMonthlyFees(record CredManVc CredManr,Integer type)
begin
  val res;
  Integer rwcnt,i;
  row CredManVc CredManrw;

  rwcnt = MatRowCnt(CredManr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(CredManr,i,CredManrw);
    if (MonthlyChargeType(CredManrw.ChargeType)) then begin
      if (CalculatedChargeType(CredManrw.ChargeType)) then begin
        if (type==0) then begin
          res = res + CredManrw.vRebate;  
        end;
      end else begin
        if (type==1) then begin
          res = res + CredManrw.Price;
        end;
      end;
    end;
  end;

  GetMonthlyFees = res;
  return;
end;


procedure PrintCustomDetails(record CredManVc CredManr,record CUVc CUr)
begin
  string 255 tstr,contactname,contactid;
  record BankVc Bankr;
  val amt,fees,prolong,tot,calcfees,fixfees;
  row CredManVc CredManrw;
  Integer i,rwcnt;
  record CUVc ContactCUr,CEOCUr;
  record B2BLoanApplicationVc LAr;
  record RLinkVc RLr;
  Boolean foundf;

  OutFormField("F_EMAIL",CredManCustEmail(CUr));//Email
  OutFormField("F_REGNUMBER1",CUr.RegNr1);//Customer Registration No. 1
  OutFormField("F_KUNDTEL",CUr.Phone);//Customer Telephone Number
  OutFormField("F_MOBILE",CUr.Mobile);//Mobile
  GetCredManCustContact(CredManr,contactid,contactname);
  OUTFORMFIELD("F_KONTAKT",contactname);
  OUTFORMFIELD("F_ID",contactid);
  OUTFORMFIELD("F_TOTSUM",CredManr.InvSum4);
  OUTFORMFIELD("F_DATEDAY",CredManr.MonthlyPaymentDay);
  OUTFORMFIELD("F_MONTHLYINST",CredManr.MonthlySum);
  OUTFORMFIELD("F_DELAYMONTHS",CredManr.PrincipleDelayMonths);
  if (FIELDINFORM("F_TOTSUMINTEXT")) then begin
    ValToText(CredManr.InvSum4,M4Val,CredManr.CurncyCode,CredManr.LangCode,tstr);
    OUTFORMFIELD("F_TOTSUMINTEXT",tstr);
  end;
  
  OUTFORMFIELD("F_BANKACC",CUr.BankAccount);
  Bankr.Code = CUr.AccOperator;
  ReadFirstMain(Bankr,1,true);
  OUTFORMFIELD("F_ACCOUNTOPERATORNAME",Bankr.Name);
  OutFormField("F_CREDHALFSUM",(CredManr.InvSum4/2));
  if (FIELDINFORM("F_CREDHALFSUMTEXT")) then begin
    ValToText((CredManr.InvSum4/2),M4Val,CredManr.CurncyCode,CredManr.LangCode,tstr);
    OUTFORMFIELD("F_CREDHALFSUMTEXT",tstr);
  end;

  tstr = "";
  amt = GetMonthlyPaymentAmount(CredManr,6);
  OUTFORMFIELD("F_AMOUNT",amt);
  if (FIELDINFORM("F_AMOUNTINTEXT")) then begin
    ValToText(amt,M4Val,CredManr.CurncyCode,CredManr.LangCode,tstr);
    OUTFORMFIELD("F_AMOUNTINTEXT",tstr);
  end;

  amt = GetMonthlyPaymentAmount(CredManr,14);
  OUTFORMFIELD("F_AMOUNT2",amt);
  if (FIELDINFORM("F_AMOUNTINTEXT2")) then begin
    ValToText(amt,M4Val,CredManr.CurncyCode,CredManr.LangCode,tstr);
    OUTFORMFIELD("F_AMOUNTINTEXT2",tstr);
  end;

  amt = GetMonthlyPaymentAmount(CredManr,8);
  OUTFORMFIELD("F_PRINCIPLE",amt);

  tot = amt * (CredManr.InstalmentMonths);//-1?
  tot = CredManr.InvSum4-CredManr.DepositSum-tot;
  if (tot<0) then begin
    tot = 0;//the same as we do on cred man plan
  end;
  OUTFORMFIELD("F_LEFTPRINCIPLE",tot);

  fees = 0;
  rwcnt = MatRowCnt(CredManr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(CredManr,i,CredManrw);
    if (CredManrw.ChargeType==0 or CredManrw.ChargeType==2) then begin
      if (CredManrw.ChargeType==2) then begin
        fees = fees + ((CredManr.InvSum4-CredManr.DepositSum) * (CredManrw.vRebate/100));
      end else begin
        fees = fees + CredManrw.Price;
      end;
    end;
  end;
  OUTFORMFIELD("F_FEES",fees);
  if (FIELDINFORM("F_FEESINTEXT")) then begin
    ValToText(fees,M4Val,CredManr.CurncyCode,CredManr.LangCode,tstr);
    OUTFORMFIELD("F_FEESINTEXT",tstr);
  end;

  prolong = Round(CredManr.StdProlongFee + (CredManr.InvSum4 * (CredManr.StdProlongPrc/100)),SetRoundModeD(2));
  OUTFORMFIELD("F_PROLONG",prolong);
  if (FIELDINFORM("F_PROLONGINTEXT")) then begin
    ValToText(prolong,M4Val,CredManr.CurncyCode,CredManr.LangCode,tstr);
    OUTFORMFIELD("F_PROLONGINTEXT",tstr);
  end;
  OUTFORMFIELD("F_OVERDUEPRC",CredManr.OverduePercentage);
  OUTFORMFIELD("F_OTHERCONDITIONS",CredManr.OtherConditions);

  OutAddress("F_ADRESS",CUr.Name,CUr.InvAddr0,CUr.InvAddr1,CUr.InvAddr2,CUr.InvAddr3,CUr.InvAddr4);

  if (ReadRecordLink(CredManr,1,LAr,RLr)) then begin
    foundf = true;
  end else begin
    if (CredManr.LoanApplication>0) then begin
      LAr.SerNr = CredManr.LoanApplication;
      if (ReadFirstMain(LAr,1,true)) then begin
        foundf = true;
      end;
    end;
  end;
  if (foundf) then begin
    CEOCUr.Code = LAr.CEOCustCode;
    if (ReadFirstMain(CEOCUr,1,true)) then begin
      OutFormField("F_CEONAME",CEOCUr.Name);
      OutFormField("F_CEOID",CEOCUr.RegNr1);
    end;
  end;  

  amt = GetMonthlyPaymentAmount(CredManr,2);
  OUTFORMFIELD("F_INTEREST",amt);
  PrintDocumentSigner;

  OUTFORMFIELD("F_CUSTOWNBANKACC",CredManOwnBankAccount(CredManr.SerNr));
  if (CredManr.AnnualRate==1) then begin
    OUTFORMFIELD("F_ANNUALRATE",Round(CredManr.IntRate,SetRoundModeD(2)) & " %");
  end else begin
    OUTFORMFIELD("F_ANNUALRATE",Round(CredManr.IntRate*12,SetRoundModeD(2)) & " %");
  end;
  calcfees = GetMonthlyFees(CredManr,0);
  fixfees =  GetMonthlyFees(CredManr,1);
  if (calcfees>0) then begin
    OUTFORMFIELD("F_CALCFEES",calcfees & " %");
  end;
  if (fixfees>0) then begin
    OUTFORMFIELD("F_FIXFEES",fixfees);
  end;

  return;
end;

//CUST-END

procedure PrintCredManRows(record RcVc RepSpec,record CredManVc CredManr,record LangNrVc LangNrr)
BEGIN
  Integer i,rwcnt;
  row CredManVc CredManrw;
  string 255 tstr;
  record SysFormatBlock SysFormatRec;
  
  BlockLoad(SysFormatRec);
  rwcnt = MatRowCnt(CredManr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(CredManr,i,CredManrw);
    if (FIELDINFORM("F_ENHET")) then begin
      GetUnitStr(CredManrw.ArtCode,CredManr.LangCode,tstr);
      OUTFORMFIELD("F_ENHET",tstr);
    end;  
    OUTFORMFIELD("F_ARTNR",CredManrw.ArtCode);
    OUTFORMFIELD("F_ARTNR2",CredManrw.ArtCode);
    if (FIELDINFORM("F_ARTNRBC39")) then begin
      ItemBC39(CredManrw.ArtCode,tstr);
      OUTFORMFIELD("F_ARTNRBC39",tstr);
    end;  
    if (FIELDINFORM("F_ARTNRBCEAN")) then begin
      ItemBCEAN(CredManrw.ArtCode,tstr);
      OUTFORMFIELD("F_ARTNRBCEAN",tstr);
    end;  
    if (FIELDINFORM("F_ARTNRBCEAN13")) then begin
      ItemBCEAN13(CredManrw.ArtCode,tstr);    
      OUTFORMFIELD("F_ARTNRBCEAN13",tstr);
    end;  
    GetItemGroup(CredManrw.ArtCode,tstr);
    OUTFORMFIELD("F_ARTGRUPP",tstr);
    tstr = ValToString(CredManrw.Quant,M4UVal,SysFormatRec.thousSep,SysFormatRec.decimalPt,LangNrr.CutDecimals);    
    OUTFORMFIELD("F_ANTAL",tstr);
    OUTFORMFIELD("F_SPECIFIKATION",CredManrw.Comment);
    tstr = ValToString(CredManrw.Price,M423Val,SysFormatRec.thousSep,SysFormatRec.decimalPt,LangNrr.CutDecimals);
    OUTFORMFIELD("F_APRIS",tstr);
    OUTFORMFIELD("F_BELOPP",CredManrw.Sum);
    tstr = ValToString(CredManrw.vRebate,M41Val,SysFormatRec.thousSep,SysFormatRec.decimalPt,LangNrr.CutDecimals);
    OUTFORMFIELD("F_RABATT",tstr);
    OUTFORMFIELD("F_BASPRIS",CredManrw.Sum);
//    OUTFORMFIELD("F_MOMSKOD",CredManrw.VATCode);
    OUTFORMFIELD("F_PRICEFACTOR",CredManrw.PriceFactor);
//    OUTFORMFIELD("F_DUEDATE",CredManrw.InvoiceAfter);
    OUTFORMFIELD("F_FAKTURANUMMER",CredManrw.InvoicedOn);
    EndFormRow;    
  end;
  RETURN;
END;

global
procedure PrintCredManHeader(record CredManVc CredManr)
begin
  record CUVc CUr;
  record IVVc IVr;
  Integer i,rwcnt;
  string 255 tstr;
  
  CUr.Code = CredManr.CustCode;
  if (ReadFirstMain(CUr,1,true)) then begin
  end;
  IVr.SerNr = CredManr.IVNr;
  if (ReadFirstMain(IVr,1,true)==false) then begin
    RecordClear(IVr);
  end;
  OUTFORMFIELD("F_KUNDNR",CredManr.CustCode);
  OUTFORMFIELD("F_KUNDNAMN",CredManr.Addr0);
  OUTFORMFIELD("F_NUMMER",CredManr.SerNr);
  //OutAddress("F_ADRESS",IVr.Addr0,IVr.Addr1,IVr.Addr2,IVr.Addr3,IVr.InvAddr3,IVr.InvAddr4);//CUST-REMOVED
  OUTFORMFIELD("F_ADDR2",IVr.Addr1);
  OUTFORMFIELD("F_ADDR3",IVr.Addr2);
  OUTFORMFIELD("F_ADDR4",IVr.Addr3);
  OUTFORMFIELD("F_INVADDR3",IVr.InvAddr3);
  OUTFORMFIELD("F_INVADDR4",IVr.InvAddr4);
  OUTFORMFIELD("F_VARREFERENS",CredManr.OurContact);
  OUTFORMFIELD("F_ERREFERENS",CredManr.ClientContact);
  OUTFORMFIELD("F_KOMMENTAR",IVr.InvComment);
  if (FIELDINFORM("F_SALJARNAMN")) then begin
    GetUserName(CredManr.SalesMan,tstr);
    OUTFORMFIELD("F_SALJARNAMN",tstr);
  end;  
  OUTFORMFIELD("F_LOCATION",IVr.Location);
  OUTFORMFIELD("F_INLEVADRESS",IVr.ShipAddr0);
  OUTFORMFIELD("F_INLEVADRESS",IVr.ShipAddr1);
  OUTFORMFIELD("F_INLEVADRESS",IVr.ShipAddr2);
  OUTFORMFIELD("F_INLEVADRESS",IVr.ShipAddr3);
  OUTFORMFIELD("F_INLEVADRESS",IVr.DelAddr3);
  OUTFORMFIELD("F_INLEVADRESS",IVr.DelAddr4);
  OUTFORMFIELD("F_INVLEVSATT",IVr.ShipMode);
  if (FIELDINFORM("F_INVLEVSATTTEXT")) then begin
    GetShipModeText(IVr.ShipMode,IVr.LangCode,tstr);
    OUTFORMFIELD("F_INVLEVSATTTEXT",tstr);
  end;  
  OUTFORMFIELD("F_INVLEVVILLK",IVr.ShipDeal);
  if (FIELDINFORM("F_INVLEVVILLKTEXT")) then begin
    GetShipDealText(IVr.ShipDeal,IVr.LangCode,tstr);
    OUTFORMFIELD("F_INVLEVVILLKTEXT",tstr);
  end;  
  if (FIELDINFORM("F_VILLKOR")) then begin
    GetPayDealText(IVr.PayDeal,IVr.LangCode,tstr);
    OUTFORMFIELD("F_VILLKOR",tstr);
  end;  
  PrintCurrencyCode("F_VALUTA",CredManr.CurncyCode);
  OUTFORMFIELD("F_KONTRAKTSDATUM",CredManr.TransDate);
  OUTFORMFIELD("F_STARTDATUM",CredManr.startDate);
  OUTFORMFIELD("F_LASTINVDATE",CredManr.InvUntil);
  OUTFORMFIELD("F_ENDDATE",CredManr.endDate);
  OUTFORMFIELD("F_SUMMA",CredManr.InvSum4);
  GetFullCurncyRateText(true,tstr,CredManr.FrRate,CredManr.ToRateB1,CredManr.ToRateB2,CredManr.BaseRate1,CredManr.BaseRate2);  
  OUTFORMFIELD("F_RATE",tstr);
  GetFullCurncyRateText(false,tstr,CredManr.FrRate,CredManr.ToRateB1,CredManr.ToRateB2,CredManr.BaseRate1,CredManr.BaseRate2);  
  OUTFORMFIELD("F_BASERATE",tstr);
  OUTFORMFIELD("F_PERIODLENGTH",CredManr.InstalmentMonths);
  OUTFORMFIELD("F_RANTASATS",CredManr.IntRate);
  if (blank(IVr.ShipAddr0)) then begin
    tstr = IVr.Addr0;
  end else begin
    tstr = IVr.ShipAddr0;
  end;
  OUTFORMFIELD("F_INLEVADRESS2",tstr);
  if (blank(IVr.ShipAddr0)) then begin
    tstr = IVr.Addr1;
  end else begin
    tstr = IVr.ShipAddr1;
  end;
  OUTFORMFIELD("F_INLEVADRESS2",tstr);
  if (blank(IVr.ShipAddr0)) then begin
    tstr = IVr.Addr2;
  end else begin
    tstr = IVr.ShipAddr2;
  end;
  OUTFORMFIELD("F_INLEVADRESS2",tstr);
  if (blank(IVr.ShipAddr0)) then begin
    tstr = IVr.Addr3;
  end else begin
    tstr = IVr.ShipAddr3;
  end;
  OUTFORMFIELD("F_INLEVADRESS2",tstr);
  if (blank(IVr.ShipAddr0)) then begin
    tstr = IVr.InvAddr3;
  end else begin
    tstr = IVr.DelAddr3;
  end;
  OUTFORMFIELD("F_INLEVADRESS2",tstr);
  if (blank(IVr.ShipAddr0)) then begin
    tstr = IVr.InvAddr4;
  end else begin
    tstr = IVr.DelAddr4;
  end;
  OUTFORMFIELD("F_INLEVADRESS2",tstr);
  
  OUTFORMFIELD("F_BASE1SUMMA",MulRateToBase1(CredManr.CurncyCode,CredManr.InvSum4,CredManr.FrRate,CredManr.ToRateB1,CredManr.ToRateB2,CredManr.BaseRate1,CredManr.BaseRate2,DefaultCurRoundOff));
  OUTFORMFIELD("F_BASE2SUMMA",MulRateToBase2(CredManr.CurncyCode,CredManr.InvSum4,CredManr.FrRate,CredManr.ToRateB1,CredManr.ToRateB2,CredManr.BaseRate1,CredManr.BaseRate2,DefaultCurRoundOff));
  OUTFORMFIELD("F_ATTBETALA",CredManr.TotalSum);
  if (FIELDINFORM("F_ATTBETALATEXT")) then begin
    ValToText(CredManr.TotalSum,M4Val,CredManr.CurncyCode,CredManr.LangCode,tstr);
    OUTFORMFIELD("F_ATTBETALATEXT",tstr);        
  end;  
  OUTFORMFIELD("F_BASE1BETALA",MulRateToBase1(CredManr.CurncyCode,CredManr.TotalSum,CredManr.FrRate,CredManr.ToRateB1,CredManr.ToRateB2,CredManr.BaseRate1,CredManr.BaseRate2,DefaultCurRoundOff));
  OUTFORMFIELD("F_BASE2BETALA",MulRateToBase2(CredManr.CurncyCode,CredManr.TotalSum,CredManr.FrRate,CredManr.ToRateB1,CredManr.ToRateB2,CredManr.BaseRate1,CredManr.BaseRate2,DefaultCurRoundOff));

  OUTFORMFIELD("F_KUNDMOMSNR",CUr.VATNr);
  OUTFORMFIELD("F_KUNDFAX",CUr.Fax);
//  CredManSetFax(CUr,CredManr);

  //CUST-BEGIN
  PrintCustomDetails(CredManr,CUr);
  //CUST-END

  return;
end;

global
procedure DoCredManForm(record RcVc RepSpec,record CredManVc CredManr)
BEGIN
  record FormDefVc FDr;
  row FormDefVc FDrw;
  Integer i,rwcnt;
  string 255 tstr;
  record LangNrVc LangNrr;
  Boolean printf,langf;
  Integer intdocnr;
  string 30 formcode,langcode;
  
  GetLangNr(CredManr.LangCode,LangNrr);      
  langcode = CredManr.LangCode;
  FDr.repname = RepSpec.repname;
  FDr.shortname = RepSpec.shortname;
  if (ReadFirstMain(FDr,1,true)==false) then begin
    MessageBox(1624, " " & USetStr(1623));
    goto LDoCredManForm;
  end;
  rwcnt = MatRowCnt(FDr);
  for (i=rwcnt-1;i>=0;i=i-1) begin
    MatRowGet(FDr,i,FDrw);
    if (FDrw.LangCode==langcode) then begin
      i = -1;
      langf = true;
    end;
  end;
  if (langf==false) then begin langcode = ""; end;
  intdocnr = 1;
  printf = true;
  while (printf) begin  
    formcode = "";
//CUST-BEGIN
    if (nonblank(RepSpec.f12)) then begin
      formcode = RepSpec.f12;
      printf = false;
    end else begin
//CUST-END
      for (i=rwcnt-1;i>=0;i=i-1) begin
        MatRowGet(FDr,i,FDrw);
        if (FindFormcode(CredManr.OKFlag,FDrw.Typ)) then begin 
          if (Getformcode(i,FDrw.intdocnr,FDrw.FPCode,FDrw.UserGroup,FDrw.LangCode,FDrw.SerNr,CredManr.SerNr,FDrw.PrintGroupCode,
                          langcode,intdocnr,"CredManVc",formcode)) then
          begin
            goto LBREAK;
          end;
        end;
      end;
    end;
LBREAK:;
    if (nonblank(formcode)) then begin
      if (OpenForm(formcode)) then begin  
          RepSpec.sStartDate = CredManr.startDate;
          RepSpec.sEndDate = CredManr.endDate;
          CommonDocumentFields(RepSpec);
          NumberofDocumentPages(FDrw.FPCode,MatRowCnt(CredManr));
          PrintCredManHeader(CredManr);
          PrintCredManRows(RepSpec,CredManr,LangNrr);
          CloseForm;
      end else begin
        printf = false;
        MessageBox(1546,formcode);
      end;
    end else begin
      printf = false;
      if (intdocnr==1) then begin
        MessageBox(1624, " " & USetStr(1623));
      end;
    end;
    intdocnr = intdocnr + 1;
  end;
LDoCredManForm:;  
  RETURN;
END;
