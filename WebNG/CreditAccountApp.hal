//<halrule>server-only</halrule>
external inner procedure ShowWebAppPageStart(record WebNGPageVc,string);
external inner procedure ShowWebAppPageEnd(record WebNGPageVc);
external inner function string 255 removenextnode(var string);
external inner function string 255 ToolWebNGTranslateText2(Longint);
external inner procedure LoadWebPage(string,var record WebNGPageVc);
external inner procedure RedirectToLoginPage();
external inner function string 60 AddObjectToObjectList(string,string);
external inner function string 255 GetLinkToStruct(LongInt,boolean);
external function string 255 GetLoanType(string);
external procedure BuildCredManPayPlanCust(record CredManVc,var record CredManPayPlanVc,record CredManSetBlock,Boolean,Boolean);
external inner procedure SetContentTypeForExtension(string);
external procedure ShowWebLoanStrings();
external function Integer MapLoanType(string);
external function string 255 CreditalFixPhone(string,string);

procedure DisplayAccDataField(string cls,string label,string value) 
begin
  
  WebOutString("<div class='acc-item-col " & cls & "'><div class='acc-item-label'>" & label & "</div><div class='acc-item-value'>" & value & "</div></div>");

  return;
end;

global
function string 255 GetLinkToCreditAccount()
begin
  record WebNGStructVc WSr;
  string 255 res;

  WSr.Type = 201;
  if (ReadFirstKey("Type",WSr,1,true)) then begin
   res = GetLinkToStruct(WSr.SerNr,false);
  end;

  GetLinkToCreditAccount = res;
  return;
end;

function string 255 GetFirstCustCode(string contact)
begin
  record ContactRelVc CRr;
  string 255 res;
  
  CRr.ContactCode = contact;
  if (ReadFirstKey("ContactCode",CRr,1,true)) then begin
    res = CRr.CustCode;
  end;

  GetFirstCustCode = res;
  return;
end;

function Boolean CustIsContact(string contact,string custcode)
begin
  record ContactRelVc CRr;
  Boolean res,TrHs;
  
  TrHs = true;
  CRr.ContactCode = contact;
  while (LoopKey("ContactCode",CRr,1,TrHs)) begin
    if (CRr.ContactCode!=contact) then begin
      TrHs = false;
    end else begin
      if (CRr.CustCode==custcode) then begin
        res = true;
        TrHs = false;
      end;
    end;
  end;

  CustIsContact = res;
  return;
end;

procedure SetSelectedCustomerCode(string custcode)
begin
  
  if (CustIsContact(CurrentCust,custcode)) then begin
    PutSessionString("WebActCustCode",custcode);
  end;

  return;
end;

function string 255 GetSelectedCustomerCode()
begin
  string 255 res;
  
  res = GetSessionString("WebActCustCode");
  if (blank(res)) then begin
    res = GetFirstCustCode(CurrentCust);
    PutSessionString("WebActCustCode",res);
  end;

  GetSelectedCustomerCode = res;
  return;
end;

procedure ShowCreditAccountReceipts()
begin
  string 255 custcode,tstr;
  Boolean TrHs;
  record IPrsVc IPrsr;
  record IPVc IPr;
  record IVVc IVr;
  row IPVc IPrw;
  Integer i,j,rwcnt;

  WebOutString("<div class='record-list receipt-list'>");
  custcode = GetSelectedCustomerCode;//we will have to redo this once we implement multiple companies
  if (nonblank(custcode)) then begin
    j = 1;
    TrHs = true;
    IPrsr.CustCode = custcode;
    IPrsr.TransType = 1;
    while (LoopKey("CustType",IPrsr,2,TrHs)) begin
      if (IPrsr.CustCode!=custcode or IPrsr.TransType!=1) then begin
        TrHs = false;
      end else begin
        IPr.SerNr = IPrsr.TransNr;
        if (ReadFirstMain(IPr,1,true)) then begin
          rwcnt = MatRowCnt(IPr);
          for (i=0;i<rwcnt;i=i+1) begin
            MatRowGet(IPr,i,IPrw);
            if (IPrw.CustCode==custcode) then begin
              tstr = ToolWebNGTranslateText2(70283);
              if (IPrw.InvoiceNr>0) then begin
                IVr.SerNr = IPrw.InvoiceNr;
                if (ReadFirstMain(IVr,1,true)) then begin
                  if (IVr.CustCredManNr>0) then begin
                    tstr = IVr.CustCredManNr;
                  end;
                end;
              end;
              WebOutString("<div class='acc-item-line'><div class='item-cnt'>" & j & "</div>");
              DisplayAccDataField("date",ToolWebNGTranslateText2(70280),IPr.TransDate);
              DisplayAccDataField("amount",ToolWebNGTranslateText2(70281),IPrw.RecVal);
              DisplayAccDataField("ref",ToolWebNGTranslateText2(70282),tstr);
              WebOutString("</div>");
              j = j + 1;
            end;
          end;
        end;
      end;  
    end;
  end;
  WebOutString("</div>");

  return;
end;  

procedure ShowCreditAccountInvoices()
begin
  string 255 custcode,tstr;
  Boolean TrHs;
  record IVVc IVr;
  Integer i;

  custcode = GetSelectedCustomerCode;//we will have to redo this once we implement multiple companies
  i = 1;
  WebOutString("<div class='record-list invoice-list'>");
  if (nonblank(custcode)) then begin
    TrHs = true;
    IVr.CustCode = custcode;
    while (LoopKey("CustCode",IVr,1,TrHs)) begin
      if (IVr.CustCode!=custcode) then begin
        TrHs = false;
      end else begin
        tstr = "";
        if (IVr.CustCredManNr>0) then begin
          tstr = IVr.CustCredManNr;
        end;
        WebOutString("<div class='acc-item-line'><div class='item-cnt'>" & i & "</div>");
        DisplayAccDataField("date",ToolWebNGTranslateText2(70280),IVr.InvDate);
        DisplayAccDataField("amount",ToolWebNGTranslateText2(70281),IVr.Sum4);
        DisplayAccDataField("ref",ToolWebNGTranslateText2(70282),tstr);
        WebOutString("</div>");
        i = i + 1;
      end;
    end;
  end;
  WebOutString("</div>");

  return;
end;

procedure GetLoanApplications(var record ORVc ORr)
begin
  Integer rw;
  row ORVc ORrw;
  record B2BLoanApplicationVc LAr; 
  Boolean TrHs;
  record RLinkVc RLr;
  record CredManVc CredManr;
  
  rw = MatRowCnt(ORr);
  TrHs = true;
  LAr.CustCode = GetSelectedCustomerCode;
  while (LoopKey("CustCode",LAr,1,TrHs)) begin
    if (LAr.CustCode!=GetSelectedCustomerCode) then begin
      TrHs = false;
    end else begin
      if (ReadRecordLink(LAr,1,CredManr,RLr)==false) then begin
        RecordClear(CredManr);
        ClearRow(ORr,ORrw,1);
        ORrw.GroupOrdRow = LAr.SerNr;
        ORrw.ServiceDelDate = LAr.TransDate;
        ORrw.Location = LAr.OrderClass;
      //ORrw.PickingDate = LAr.StartDate;
      //ORrw.InloadingDate = LAr.EndDate;
/*
      if (ReadRecordLink(LAr,1,CredManr,RLr)) then begin
        ORrw.Location = CredManr.OrderClass;
        ORrw.PickingDate = CredManr.TransDate;
        ORrw.InloadingDate = CredManr.endDate;
        ORrw.Sum = CredManr.InvSum4;
      end else begin
*/
        ORrw.Sum = LAr.Sum;
        MatRowPut(ORr,rw,ORrw);
        rw = rw + 1;
      end;
//      end;
    end;
  end;

  return;
end;

procedure GetLoanAgreements(var record ORVc ORr)
begin
  Integer rw;
  row ORVc ORrw;
  record CredManVc CredManr; 
  record B2BLoanApplicationVc LAr; 
  record RLinkVc RLr;
  Boolean TrHs;
  
  
  rw = MatRowCnt(ORr);
  TrHs = true;
  CredManr.CustCode = GetSelectedCustomerCode;
  while (LoopKey("CustCode",CredManr,1,TrHs)) begin
    if (CredManr.CustCode!=GetSelectedCustomerCode) then begin
      TrHs = false;
    end else begin
      ClearRow(ORr,ORrw,2);
      ORrw.GroupOrdRow = CredManr.SerNr;
      ORrw.PickingDate = CredManr.TransDate;
      ORrw.InloadingDate = CredManr.endDate;
      ORrw.Location = CredManr.OrderClass;
      ORrw.Sum = CredManr.InvSum4;
      if (ReadRecordLink(CredManr,1,LAr,RLr)) then begin
        ORrw.ServiceDelDate = LAr.TransDate;
      end;
      MatRowPut(ORr,rw,ORrw);
      rw = rw + 1;
    end;
  end;
  
  return;
end;


function string 255 GetWebColor(Integer color)
begin
  string 255 res;

  switch (color) begin
    case kRowColorGreen:       res = "green";
    case kRowColorLime:        res = "lime";
    case kRowColorRed:         res = "red";
    case kRowColorOrange:      res = "orange";
    case kRowColorYellow:      res = "yellow";
    case kRowColorGold:        res = "gold";
    case kRowColorGray:        res = "gray";
    case kRowColorBeige:       res = "beige";
    case kRowColorBlue:        res = "blue";
    case kRowColorSkyBlue:     res = "skyeblue";
    case kRowColorViolet:      res = "violet";
    case kRowColorPeriwinkle:  res = "periwinkle";
  end;
  

  GetWebColor = res;
  return;
end;

procedure FillOrderClassData(var vector string vColor,var vector string vClass,var vector string vLoad)
begin
  record OrderClassColorBlock OCCb;
  row OrderClassColorBlock OCCbrw;
  record CredManExtBlock CEb;
  row CredManExtBlock CEbrw;
  Integer i,rwcnt;
  record OrderClassVc OCr;

  BlockLoad(OCCb);
  rwcnt = MatRowCnt(OCCb);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(OCCb,i,OCCbrw);
    vColor[OCCbrw.OrderClass] = GetWebColor(OCCbrw.Color);
  end;
  BlockLoad(CEb);
  rwcnt = MatRowCnt(CEb);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(CEb,i,CEbrw);
    if (CEbrw.ShowFlag==0) then begin
      vLoad[CEbrw.OrderClass] = 1;
    end;
  end;

  while (LoopMain(OCr,1,true)) begin
    vClass[OCr.Code] = OCr.Comment;
  end;

  return;
end;

procedure ShowCreditAccountAgreements()
begin
  record ORVc ORr;
  vector string 255 vColor,vClass,vLoad;
  Integer i,rwcnt;
  row ORVc ORrw;
  
  GetLoanApplications(ORr);
  GetLoanAgreements(ORr);

  FillOrderClassData(vColor,vClass,vLoad);

  SortRows(ORr,"Location",false);

  //show titles
  WebOutString("<div class='agreement-table-wrap'><table id='agreement-table' cellspacing=0>")
  WebOutString("<thead>");
  WebOutString("<th>" & ToolWebNGTranslateText2(70331) & "<i class='fas fa-chevron-down'></i></th>");
  WebOutString("<th>" & ToolWebNGTranslateText2(70332) & "<i class='fas fa-chevron-down'></i></th>");
  WebOutString("<th>" & ToolWebNGTranslateText2(70333) & "<i class='fas fa-chevron-down'></i></th>");
  WebOutString("<th>" & ToolWebNGTranslateText2(70334) & "<i class='fas fa-chevron-down'></i></th>");
  WebOutString("<th>" & ToolWebNGTranslateText2(70335) & "<i class='fas fa-chevron-down'></i></th>");
  WebOutString("<th></th>");
  WebOutString("</thead>");
  WebOutString("<tbody>");
  rwcnt = MatRowCnt(ORr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(ORr,i,ORrw);    
    WebOutString("<tr load='" & vLoad[ORrw.Location] & "'>");
    if (nonblank(vClass[ORrw.Location])) then begin
      WebOutString("<td><div class='or_status " & vColor[ORrw.Location] & "'>" & vClass[ORrw.Location] & "</div></td>");
    end else begin
      WebOutString("<td></td>");
    end;

    WebOutString("<td data-label='" & ToolWebNGTranslateText2(70331) & "'>" & DateToString(ORrw.ServiceDelDate,"YYYY MM DD") & "</td>");
    WebOutString("<td data-label='" & ToolWebNGTranslateText2(70332) & "'>" & DateToString(ORrw.PickingDate,"YYYY MM DD") & "</td>");
    WebOutString("<td data-label='" & ToolWebNGTranslateText2(70333) & "'>" & ValToString(ORrw.Sum,M4Val," ",".",1) & "&euro;</td>");
    WebOutString("<td data-label='" & ToolWebNGTranslateText2(70334) & "'>" & DateToString(ORrw.InloadingDate,"YYYY MM DD") & "</td>");
    WebOutString("<td class='row-expand-col' type='" & ORrw.stp & "' nr='" & ORrw.GroupOrdRow & "'><div class='row-expand'>" & ToolWebNGTranslateText2(70316) & "</div></td>");
    WebOutString("</tr>");
    WebOutString("<tr class='child-row'><td colspan=6></td></tr>")
  end;
  WebOutString("</tbody>");
  WebOutString("</table>");
  WebOutString("</div>");

  return;
end;

procedure ShowAccountStrings()
begin
  
  WebOutString("<script>");
  WebOutString("var acc_str = {};");
  WebOutString("acc_str['Number'] = '" & ToolWebNGTranslateText2(70318) & "';");
  WebOutString("acc_str['MonthlyPayment'] = '" & ToolWebNGTranslateText2(70325) & "';");
  WebOutString("acc_str['Type'] = '" & ToolWebNGTranslateText2(70319) & "';");
  WebOutString("acc_str['ServiceFee'] = '" & ToolWebNGTranslateText2(70326) & "';");
  WebOutString("acc_str['Amount'] = '" & ToolWebNGTranslateText2(70320) & "';");
  WebOutString("acc_str['StartDate'] = '" & ToolWebNGTranslateText2(70321) & "';");
  WebOutString("acc_str['IBAN'] = '" & ToolWebNGTranslateText2(70328) & "';");
  WebOutString("acc_str['EndDate'] = '" & ToolWebNGTranslateText2(70322) & "';");
  WebOutString("acc_str['Surety'] = '" & ToolWebNGTranslateText2(70329) & "';");
  WebOutString("acc_str['Rate'] = '" & ToolWebNGTranslateText2(70330) & "';");
  WebOutString("acc_str['Term'] = '" & ToolWebNGTranslateText2(70324) & "';");
  WebOutString("acc_str['SignDocuments'] = '" & ToolWebNGTranslateText2(70338) & "';");
  WebOutString("acc_str['Help'] = '" & ToolWebNGTranslateText2(70339) & "';");
  WebOutString("acc_str['CallText'] = '" & ToolWebNGTranslateText2(70336) & "';");
  WebOutString("acc_str['CallPhone'] = '" & ToolWebNGTranslateText2(70337) & "';");
  WebOutString("acc_str['SingleFee'] = '" & ToolWebNGTranslateText2(70384) & "';");
  WebOutString("acc_str['MonthlyFee'] = '" & ToolWebNGTranslateText2(70385) & "';");
  WebOutString("acc_str['DelayMonths'] = '" & ToolWebNGTranslateText2(70386) & "';");
  WebOutString("acc_str['DocType1'] = '" & ToolWebNGTranslateText2(70387) & "';");
  WebOutString("acc_str['DocType2'] = '" & ToolWebNGTranslateText2(70388) & "';");
  WebOutString("acc_str['DocType3'] = '" & ToolWebNGTranslateText2(70389) & "';");
  WebOutString("acc_str['DocType6'] = '" & ToolWebNGTranslateText2(70390) & "';");
  WebOutString("acc_str['DocType7'] = '" & ToolWebNGTranslateText2(70393) & "';");
  WebOutString("acc_str['Download'] = '" & ToolWebNGTranslateText2(70391) & "';");
  WebOutString("acc_str['OverduePrc'] = '" & ToolWebNGTranslateText2(70392) & "';");
  WebOutString("acc_str['Expand'] = '" & ToolWebNGTranslateText2(70316) & "';");
  WebOutString("acc_str['Hide'] = '" & ToolWebNGTranslateText2(70317) & "';");
  WebOutString("</script>");

  return;
end;

procedure ShowPersonalID(record CUVc CUr)
begin
  
  WebOutString("<div class='col-auto'><div class='profile_label top'>" & ToolWebNGTranslateText2(70350) & "</div><div class='profile_value'>" & CUr.RegNr1 & "</div></div>");

  return;
end;

procedure ShowCompanySelection(record CUVc CUr)
begin
  record ContactRelVc CRr;
  record CUVc tCUr;
  Boolean TrHs;
  string 255 curcust;
  
  WebOutString("<div class='col-md'><div class='profile_label top'>" & ToolWebNGTranslateText2(70351) & "</div><div class='profile_value comp_select'>");
  curcust = GetSelectedCustomerCode;
  WebOutString("<select>");
  if (CUr.CUType==0 and CUr.VEType==0 and CUr.GuestType==0 and CUr.DealerType==0) then begin
    CRr.ContactCode = CUr.Code;
    TrHs = true;
    while (LoopKey("ContactCode",CRr,1,TrHs)) begin
      if (CRr.ContactCode!=CUr.Code) then begin
        TrHs = false;
      end else begin
        if (curcust==CRr.CustCode) then begin
          WebOutString("<option value='" & CRr.CustCode & "' SELECTED>" & CRr.CustName & "</option>");  
        end else begin
          WebOutString("<option value='" & CRr.CustCode & "'>" & CRr.CustName & "</option>");  
        end;
      end;
    end;
  end;

   
  WebOutString("</select></div></div>");

  return;
end;

procedure ShowEditField(string name,string label,string type,string value,string add)
begin
  
  WebOutString("<div class='col-md" & add & "'><div class='profile_label'>" & label & "</div><div class='profile_value'><input type='" & type & "' value='" & value & "'></div></div>");

  return;
end;

procedure ShowProfile()
begin
  record CUVc CUr;

  CUr.Code = CurrentCust;
  ReadFirstMain(Cur,1,true);
  
  WebOutString("<div class='row profile_wrap'>");

  //profile left
  WebOutString("<div class='col-lg profile_left'>");
  WebOutString("<div class='row'><div class='col-auto user-img'><img src='/files?file=User-settings.svg'></div><div class='col plt'>");
  WebOutString("<div class='row username'><div class='col'>" & CUr.Name & "</div></div>");
  WebOutString("<div class='row info'>");
  ShowPersonalID(CUr);
  ShowCompanySelection(CUr);
  WebOutString("</div>");//info
  WebOutString("</div></div>");//plt row

  WebOutString("<div class='row profile_edit'>");
  ShowEditField("phone",ToolWebNGTranslateText2(70352),"text",CUr.Phone,"-4 phone");
  ShowEditField("address",ToolWebNGTranslateText2(70353),"text",CUr.InvAddr0," address");
  WebOutString("</div>");//row
  WebOutString("<div class='row profile_submit'>");
  WebOutString("<div class='col'><div class='hl_button'>" & ToolWebNGTranslateText2(70354) & "</div></div>")
  WebOutString("</div>");//row

  WebOutString("</div>");//profile_left


  //profile right
  WebOutString("<div class='col-lg profile_right'>");

  WebOutString("<div class='row passw_title'><div class='col'>" & ToolWebNGTranslateText2(70355) & "</div></div>");//row
  WebOutString("<div class='row'>");
  ShowEditField("currentpassw",ToolWebNGTranslateText2(70356),"password","","-6 old-password");
  WebOutString("</div>");//row
  WebOutString("<div class='row password-new'>");
  ShowEditField("newpassw1",ToolWebNGTranslateText2(70358),"password",""," new-passw");
  ShowEditField("newpassw2",ToolWebNGTranslateText2(70360),"password",""," new-passw2");
  WebOutString("</div>");//row
  WebOutString("<div class='row'>");
  WebOutString("<div class='col-md passw-info'>" & ToolWebNGTranslateText2(70362) & "</div>")
  WebOutString("<div class='col-auto submit_password'><div class='hl_button'>" & ToolWebNGTranslateText2(70363) & "</div></div>")
  WebOutString("</div>");//row

  WebOutString("</div>");//profile_right

  WebOutString("</div>");//profile_wrap

  return;
end;

global
procedure CreditAccountApp(record WebNGStructVc WSr,string mpath)
begin
  string 255 path,node;
  record WebNGPageVc WPr;
  record WebNGStructVc tWSr;
  Boolean pagef;

  path = mpath;
  
  if (blank(CurrentCust)) then begin
    RedirectToLoginPage;
    goto LCreditAccountApp;
  end;


  node = removenextnode(path);
  tWSr.Name = node;
  if (ReadFirstKey("MotherName:" & WSr.SerNr,tWSr,1,true)) then begin
    if (nonblank(tWSr.WebPage)) then begin
      LoadWebPage(tWSr.WebPage,WPr);
      pagef = true;
    end;
  end;
  if (!pagef) then begin
    LoadWebPage(WSr.WebPage,WPr);
  end;
  ShowWebAppPageStart(WPr,"my_account");
  switch(node) begin
    case "receipts":
      ShowCreditAccountReceipts;
    case "invoices":
      ShowCreditAccountInvoices;
    case "contracts":
      ShowCreditAccountAgreements;
    case "profile":
      ShowProfile;
    otherwise
      ShowCreditAccountReceipts;
  end;

  ShowAccountStrings;
  ShowWebLoanStrings;

  ShowWebAppPageEnd(WPr);

LCreditAccountApp:;
  return;
end;

global
function string 255 ShowSuretyApp(record B2BLoanApplicationVc LAr)
begin
  string 255 res;
  
  if (nonblank(LAr.SuretyProvider1)) then begin
    res = LAr.Surety1Name & " (" & LAr.Surety1ID & ")";
  end;
  if (nonblank(LAr.SuretyProvider2)) then begin
    if (nonblank(res)) then begin
      res = res & ", ";
    end;
    res = res & LAr.Surety2Name & " (" & LAr.Surety2ID & ")";
  end;
  if (nonblank(LAr.SuretyProvider3)) then begin
    if (nonblank(res)) then begin
      res = res & ", ";
    end;
    res = res & LAr.Surety3Name & " (" & LAr.Surety3ID & ")";
  end;


  ShowSuretyApp = res;
  return;
end;

global
function string 255 ShowSuretyCredMan(record CredManVc CredManr)
begin
  string 255 res;
  
  if (nonblank(CredManr.SuretyProvider1)) then begin
    res = CredManr.Surety1Name & " (" & CredManr.Surety1ID & ")";
  end;
  if (nonblank(CredManr.SuretyProvider2)) then begin
    if (nonblank(res)) then begin
      res = res & ", ";
    end;
    res = res & CredManr.Surety2Name & " (" & CredManr.Surety2ID & ")";
  end;
  if (nonblank(CredManr.SuretyProvider3)) then begin
    if (nonblank(res)) then begin
      res = res & ", ";
    end;
    res = res & CredManr.Surety3Name & " (" & CredManr.Surety3ID & ")";
  end;


  ShowSuretyCredMan = res;
  return;
end;


function string 255 ShowSuretyCredMan(record CredManVc CredManr)
begin
  string 255 res;
  
  if (nonblank(CredManr.SuretyProvider1)) then begin
    res = CredManr.Surety1Name & " (" & CredManr.Surety1ID & ")";
  end;
  if (nonblank(CredManr.SuretyProvider2)) then begin
    res = AddObjectToObjectList(res,CredManr.Surety1Name & " (" & CredManr.Surety1ID & ")");
  end;
  if (nonblank(CredManr.SuretyProvider3)) then begin
    res = AddObjectToObjectList(res,CredManr.Surety1Name & " (" & CredManr.Surety1ID & ")");
  end;


  ShowSuretyCredMan = res;
  return;
end;

function val GetOneTimeFeeAmount(record CredManVc CredManr,record CredManPayPlanVc CredManPayPlanr,record CreditalWebSetBlock WSb)
begin
  val res;
  row CredManPayPlanVc CredManPayPlanrw;
  Integer i,rwcnt;
  Date lastd;

  rwcnt = MatRowCnt(CredManPayPlanr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(CredManPayPlanr,i,CredManPayPlanrw);
    if (lastd!=CredManPayPlanrw.TransDate and nonblank(lastd)) then begin
      i = rwcnt;
    end else begin
      if (CredManPayPlanrw.ArtCode==WSb.OneFeeItem) then begin
        res = res + CredManPayPlanrw.Sum;
      end;
      lastd = CredManPayPlanrw.TransDate;
    end;
  end;

  GetOneTimeFeeAmount = res;
  return;
end;

function val GetMonthlyTimeFeeAmount(record CredManVc CredManr,record CredManPayPlanVc CredManPayPlanr,record CreditalWebSetBlock WSb)
begin
  val res;
  row CredManPayPlanVc CredManPayPlanrw;
  Integer i,rwcnt,cnt;
  Date lastd;

  rwcnt = MatRowCnt(CredManPayPlanr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(CredManPayPlanr,i,CredManPayPlanrw);
    if (lastd!=CredManPayPlanrw.TransDate and nonblank(lastd)) then begin
      cnt = cnt + 1;
      if (cnt>1) then begin
        i = rwcnt;
      end;
    end;
    if (cnt==1) then begin
      if (CredManPayPlanrw.ArtCode==WSb.MonthlyFeeItem) then begin
        res = res + CredManPayPlanrw.Sum;
      end;
    end;
    lastd = CredManPayPlanrw.TransDate;
  end;

  GetMonthlyTimeFeeAmount = res;
  return;
end;

function Integer GetCustomerSignatureStatus(record AgreeemtDocVc ADr,string custcode)
begin
  Integer i,rwcnt,res;
  row AgreementDocVc ADrw;

  res = -1;
  rwcnt = MatRowCnt(ADr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(ADr,i,ADrw);
    if (ADrw.CustCode==custcode) then begin
      res = 0;
      if (ADrw.Status==1) then begin
        res = 1; 
      end;
      i = rwcnt;
    end;
  end;    

  GetCustomerSignatureStatus = res;
  return;
end;

function Boolean CustomerInMatrix(record AgreementDocVc ADr,string custcode)
begin
  Integer i,rwcnt;
  Boolean res;
  row AgreementDocVc ADrw;
  
  rwcnt = MatRowCnt(ADr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(ADr,i,ADrw);
    if (ADrw.CustCode==custcode) then begin
      res = true;
      i = rwcnt;
    end;
  end;

  CustomerInMatrix = res;
  return;
end;

global
function Boolean ContactShouldSeeDocument(record CredManVc CredManr,string custcode,record AgreementDocVc ADr)
begin
  Boolean res;

  if (CustomerInMatrix(ADr,custcode)) then begin
    res = true;
  end;

LContactShouldSeeDocument:;
  ContactShouldSeeDocument = res;
  return;
end;

global
function Boolean ContactShouldSeeDocument2(record B2BLoanApplicationVc LAr,string custcode,record AgreementDocVc ADr)
begin
  Boolean res;
  row AgreementDocVc ADrw;
  
  MatRowGet(ADr,0,ADrw);
  if (ADrw.CustCode==custcode) then begin
    res = true;
  end;

  ContactShouldSeeDocument2 = res;
  return;
end;


function string 255 FixLoanTypeStr(string loanstr)
begin
  string 255 res;

  res = "<span class=\"highlight\">" & left(loanstr,2) & "</span>" & right(loanstr,len(loanstr)-2);


  FixLoanTypeStr = res;
  return;
end;

procedure SendLoanApplicationDocuments(record B2BLoanApplicationVc LAr)
begin
  record AgreementDocVc ADr;
  Boolean TrHs;

  TrHs = true;
  ADr.RecordNr = LAr.SerNr;
  ADr.RecordType = 1;
  while (LoopKey("RecordNr",ADr,2,TrHs)) begin
    if (ADr.RecordNr!=LAr.SerNr or ADr.RecordType!=1) then begin
      TrHs = false;
    end else begin
      if (ContactShouldSeeDocument2(LAr,CurrentCust,ADr)) then begin
        WebOutString("<document sernr='" & ADr.SerNr & "' type='" & ADr.Type & "' signed='" & GetCustomerSignatureStatus(ADr,CurrentCust) & "' allowsign='1'></document>");
      end;
    end;
  end;


  return;
end;

procedure SendAgreementData(record CredManVc CredManr,record B2BLoanApplicationVc LAr)
begin
  record CMApplicationSetBlock CMSb;
  record CredManPayPlanVc CredManPayPlanr;
  record CreditalWebSetBlock WSb;
  record AgreementDocVc ADr;  
  record CredManSetBlock CMb;
  Boolean TrHs;
  vector string 255 vColor,vClass,vLoad;

  BlockLoad(CMb);
  BlockLoad(WSb);
  BlockLoad(CMSb);
  BuildCredManPayPlanCust(CredManr,CredManPayPlanr,CMb,true,false);
  FillOrderClassData(vColor,vClass,vLoad);
  WebOutString("<res ");
  WebOutString("rectype='agreement' ");
  WebOutString("type='" & FixLoanTypeStr(GetLoanType(CredManr.Type)) & "' ");
  WebOutString("type2='" & MapLoanType(CredManr.Type) & "' ");
  WebOutString("color='" & vColor[CredManr.OrderClass] & "' ");
  WebOutString("classname='" & vClass[CredManr.OrderClass] & "' ");
  WebOutString("transdate='" & DateToString(CredManr.TransDate,"YYYY MM DD") & "' ");
  WebOutString("startdate='" & DateToString(CredManr.startDate,"YYYY MM DD") & "' ");
  WebOutString("amount='" & ValToString(CredManr.InvSum4,M4Val," ",",",1) & " &euro;' ");
  WebOutString("enddate='" & DateToString(CredManr.endDate,"YYYY MM DD") & "' ");
  WebOutString("fee='" & GetOneTimeFeeAmount(CredManr,CredManPayPlanr,WSb) & " &euro;'  ");
  WebOutString("monthlyfee='" & GetMonthlyTimeFeeAmount(CredManr,CredManPayPlanr,WSb) & " &euro;' "); 
  WebOutString("months='" & CredManr.InstalmentMonths & "' ");
  WebOutString("delaymonths='" & ValToString(CredManr.PrincipleDelayMonths,M4Val,"",",",1) & " " & ToolWebNGTranslateText2(70014) & "' ");
  WebOutString("rate='" & CredManr.IntRate & "%' ");
  WebOutString("suretylist='" & ShowSuretyCredMan(CredManr) & "' ");
  WebOutString("bankacc='" & CredManr.BankAccount & "' ");
  WebOutString("overdueprc='" & CredManr.OverduePercentage & "%' ");
  WebOutString("sernr='" & CredManr.SerNr & "'>");

  if (nonblank(CredManr.OrderClass) and SetInSet(CredManr.OrderClass,CMSb.ActiveCredOrderClass)) then begin
    TrHs = true;
    ADr.RecordNr = CredManr.SerNr;
    ADr.RecordType = 0;
    while (LoopKey("RecordNr",ADr,2,TrHs)) begin
      if (ADr.RecordNr!=CredManr.SerNr or ADr.RecordType!=0) then begin
        TrHs = false;
      end else begin
        if (ContactShouldSeeDocument(CredManr,CurrentCust,ADr)) then begin
          WebOutString("<document sernr='" & ADr.SerNr & "' type='" & ADr.Type & "' signed='" & GetCustomerSignatureStatus(ADr,CurrentCust) & "' allowsign='" & (CredManr.OrderClass==CMSb.SignOrderClass) & "'></document>");
        end;
      end;
    end;
  end;

  SendLoanApplicationDocuments(LAr);

  WebOutString("</res>");
  
  return;
end;

procedure SendLoanAppData(record B2BLoanApplicationVc LAr)
begin
  vector string 255 vColor,vClass,vLoad;
  
  WebOutString("<res ");

  FillOrderClassData(vColor,vClass,vLoad);
  WebOutString("rectype='application' ");
  WebOutString("type='" & FixLoanTypeStr(GetLoanType(LAr.Type)) & "' ");
  WebOutString("type2='" & MapLoanType(LAr.Type) & "' ");
  WebOutString("color='" & vColor[LAr.OrderClass] & "' ");
  WebOutString("classname='" & vClass[LAr.OrderClass] & "' ");
  WebOutString("transdate='" & DateToString(LAr.TransDate,"YYYY MM DD") & "' ");
  WebOutString("startdate='-' ");
  WebOutString("amount='" & ValToString(LAr.Sum,M4Val," ",",",1) & " &euro;' ");
  WebOutString("enddate='-' ");
  WebOutString("fee='-' ");
  WebOutString("monthlyfee='-' ");
  WebOutString("months='" & LAr.Months & "' ");
  WebOutString("delaymonths='" & ValToString(LAr.PrincipleDelayMonths,M4Val,"",",",1) & " " & ToolWebNGTranslateText2(70014) & "' ");
  WebOutString("rate='" & LAr.InterestRate & "%' ");
  WebOutString("suretylist='" & ShowSuretyApp(LAr) & "' ");
  WebOutString("bankacc='" & LAr.BankAccount & "' ");
  WebOutString("overdueprc='-' ");
  WebOutString("sernr='" & LAr.SerNr & "'>");

  SendLoanApplicationDocuments(LAr);

  WebOutString("</res>");

  return;
end;

procedure GetAgreementInfo(string agreement,string type)
begin
  record B2BLoanApplicationVc LAr,bLAr; 
  record CredManVc CredManr;
  val payment;
  Boolean TrHs;
  record RLinkVc RLr;
  
  if (type=="application") then begin
    LAr.SerNr = StringToLongint(agreement);
    if (ReadFirstMain(LAr,1,true)) then begin
      if (LAr.CustCode==GetSelectedCustomerCode) then begin
        if (ReadRecordLink(LAr,1,CredManr,RLr)) then begin
          SendAgreementData(CredManr,LAr);
        end else begin
          SendLoanAppData(LAr);
        end;
      end;
    end;
  end else begin
    CredManr.SerNr = StringToLongint(agreement);
    if (ReadFirstMain(CredManr,1,true)) then begin
      if (CredManr.CustCode==GetSelectedCustomerCode) then begin
        SendAgreementData(CredManr,bLAr);
      end;
    end;
  end;

  return;
end;

global
updating procedure UpdateCreditProfile(string address,string phone,var Boolean res)
begin
  record CUVc CUr,oldCUr;
  
  CUr.Code = CurrentCust;
  if (ReadFirstMain(CUr,1,true)) then begin
    RecordCopy(oldCUr,CUr);
    CUr.Phone = CreditalFixPhone(phone,CUr.CountryCode);
    CUr.InvAddr0 = address;
    if (RecordUpdate(oldCUr,CUr,true)==0) then begin
      res = true;
    end;
  end;

  return;
end;

global
updating procedure UpdateCreditPassword(string old,string new,string new2,var Boolean res,var string tstr)
begin
  record CUVc CUr,oldCUr;
  Longint oldpass,err;
  Boolean testf;
  
  CUr.Code = CurrentCust;
  if (ReadFirstMain(CUr,1,true)) then begin
    testf = true;
    if (CalcPassword(old,CUr.Code,0)!=CUr.Password) then begin
      testf = false;
      err = 70365;
    end;
    if (testf and new!=new2) then begin
      testf = false;
      err = 70366;
    end;

    if (testf) then begin
      RecordCopy(oldCUr,CUr);
      CUr.Password = CalcPassword(new,CUr.Code,0);
      if (RecordUpdate(oldCUr,CUr,true)==0) then begin
        res = true;
      end;
    end;
  end;

  if (err>0) then begin
    tstr = ToolWebNGTranslateText2(err);
  end;
  return;
end;

global
procedure CreditAccountActions(string action)
begin
  Boolean res;
  string 255 errstr,link;
  record AgreementDocVc ADr;
  record B2BLoanApplicationVc LAr;
  record CredManVc CredManr;
  record Attach2Vc Attachr;
  record RLinkVc RLr;
  
  switch (action) begin
    case "getagreementinfo":
      GetAgreementInfo(WebGetArg("agreement"),WebGetArg("type"));
    case "updatepassword":
      qupdating.UpdateCreditPassword(WebGetArg("old"),WebGetArg("new"),WebGetArg("new2"),res,errstr);
      if (res==false) then begin
        WebOutString("<res err='1' msg='" & errstr & "'></res>");
      end;
    case "updateprofile":
      qupdating.UpdateCreditProfile(WebGetArg("address"),WebGetArg("phone"),res);
      if (res==false) then begin
        WebOutString("<res err='1' msg='" & ToolWebNGTranslateText2(70367) & "'></res>");
      end;
    case "setcustcomp":
      SetSelectedCustomerCode(WebGetArg("comp"));
      link = GetLinkToCreditAccount & "contracts";
      WebOutString("<res link='" & link & "'></res>");
    case "downloaddocument":
      ADr.SerNr = StringToLongint(WebGetArg("sernr"));
      if (ReadFirstMain(ADr,1,true)) then begin
        switch (ADr.RecordType) begin
          case 0:
            CredManr.SerNr = ADr.RecordNr;
            if (ReadFirstMain(CredManr,1,true)) then begin
              if (ContactShouldSeeDocument(CredManr,CurrentCust,ADr)) then begin
                if (ReadRecordLink(ADr,1,Attachr,RLr)) then begin
                  SetContentTypeForExtension("pdf");
                  WebSetContentDisposition("inline; filename=" & Attachr.FileName);
                  WebOutAttachment(Attachr.SerNr);
                end;
              end;
            end;
          case 1:
            LAr.SerNr = ADr.RecordNr;
            if (ReadFirstMain(LAr,1,true)) then begin
              if (ContactShouldSeeDocument2(LAr,CurrentCust,ADr)) then begin
                if (ReadRecordLink(ADr,1,Attachr,RLr)) then begin
                  SetContentTypeForExtension("pdf");
                  WebSetContentDisposition("inline; filename=" & Attachr.FileName);
                  WebOutAttachment(Attachr.SerNr);
                end;
              end;
            end;
        end;
      end;
  end;

  return;
end;

