//<halrule>server-only</halrule>
/*
This is a template file for using stardard functions in halcust. No need to use webng.hal file or other files to just add new functions
This supports adding new web texts, adding new special elements, new structure types and web actions (both updating and non-updating)
*/
external procedure ShowSmartIDIdentification(record WebNGElementVc);
external procedure SmartIDWebActions(string);
external inner function string 255 removenextlistitem(var string,string);
external procedure ShowPartnerList(record WebNGElementVc);
external procedure ShowBannerList(record WebNGElementVc);
external procedure ShowFAQList();
external procedure ShowLoanApplicationOnWeb(record WebNGElementVc);
external procedure ShowLoanApplicationOnWeb2(record WebNGElementVc);
external procedure ShowNewsLetterSignup(record WebNGElementVc);
external procedure ShowEmployeesOnWeb(record WebNGElementVc);
external procedure ShowContactInfo(record WebNGElementVc);
external procedure ShowNewsLetterForm(record WebNGElementVc);
external procedure ShowLoanApp(record WebNGStructVc,string);
external procedure CreditAccountApp(record WebNGStructVc,string);
external procedure PartnerSearchForm(record WebNGStructVc);
external procedure ShowResetPasswordElement(record WebNGElementVc);
external procedure LoanApplicationStoreStep1();
external updating procedure LoanApplicationStoreStep2();
external inner function string 255 StrReplace(string,string,string);
external inner function Boolean GetNextCustNr(var string);
external procedure ShowNormalWebStrings();
external updating procedure UpdatePasswordSession();
external updating procedure PayseraActions(string);
external procedure LoanAppSmartIDAction(string);
external procedure ShowUpdatePasswordElement(record WebNGElementVc);
external updating procedure SendResetPasswordMail();
external procedure ProcessOtherVerification();
external procedure DokobitActions(string);


global
function boolean ShowSpecialWebElementInternal(record WebNGElementVc WEr)
begin
  boolean res;

  res = true;
  switch (WEr.Type) begin
    case 120:
      //ShowLoanApp(WEr);
    case 121:
      ShowSmartIDIdentification(WEr);
    case 122:
      ShowPartnerList(WEr);
    case 123:
      ShowBannerList(WEr);
    case 124:
      ShowFAQList;
    case 125:
      ShowLoanApplicationOnWeb(WEr);
    case 126:
      ShowNewsLetterSignup(WEr);
    case 127:
      ShowEmployeesOnWeb(WEr);
    case 128:
      ShowLoanApplicationOnWeb2(WEr);
    case 129:
      ShowContactInfo(WEr);
    case 130:
      PartnerSearchForm(WEr);
    case 131:
      ShowNormalWebStrings;
    case 132:
      ShowNewsLetterForm(WEr);
    case 133:
      ShowResetPasswordElement(WEr);
    case 134:
      ShowUpdatePasswordElement(WEr);
    otherwise
      res = false;
  end;
  ShowSpecialWebElementInternal = res;
  return;
end;

global
function Boolean ShowInternalWebApp(Integer lasttype,record WebNGStructVc WSr,string mpath)
begin
  Boolean res;

  //res = true;
  switch (lasttype) begin
    case 200: ShowLoanApp(WSr,mpath);      res = true;
    case 201: CreditAccountApp(WSr,mpath); res = true;
  otherwise
    res = false;
  end;
  ShowInternalWebApp = res;
  return;
end;

global
function Boolean InternalNodeIsApplication(Integer nodetype)
begin
  Boolean res;
  
  if (nodetype==200 or nodetype==201) then begin
    res = true;
  end;

  InternalNodeIsApplication = res;
  return;
end;

global
function string 255 CheckInternalStrings(Longint strno)
begin
  string 255 res;

  SetLangMode(LangLithuanian,"LIT",0);

  switch (strno) begin
    case 70000: res = "test";
    case 70001: res = "Jðs÷ °mon˜s pavadinimas";
    case 70002: res = "¯veskite °mon˜s pavadinimˆ";
    case 70003: res = "Jðs÷ el. paäto adresas";
    case 70004: res = "¯veskite el.paäto adresˆ";
    case 70005: res = "Telefonas";
    case 70006: res = "¯veskite telefono numer°";
    case 70007: res = "Finansavimo poreikis";
    case 70008: res = "Faktoringo terminas";
    case 70009: res = "Aä sutinku, kad äioje paraiäkoje pateikti mano duomenys bðt÷ tvarkomi ãCredital versluiÒ (UAB ã¯moka lengvaiÒ) verslo paskolos sudarymo tikslais.";
    case 70010: res = "Aä sutinku, kad mano nurodytu el. paätu susisiektum˜te su manimi tiesiogin˜s rinkodaros tikslais";
    case 70011: res = "Si÷sti uìklausˆ";
    case 70012: res = "Partneriai";
    case 70013: res = "&euro;";//uchr(128);
    case 70014: res = "m˜n.";
    case 70015: res = "Uìsisakykite naujienlaiäk°!";
    case 70016: res = "Gaukite aktualiausias verslo finansavimo naujienas, °ìvalgas ir specialius pasiðlymus tiesiai ° el. paätˆ.";
    case 70017: res = "Prenumeruoti";
    case 70018: res = "Added to News Letters successfully";
    case 70019: res = "Paieäka";
    case 70020: res = "Apie mus raäo";
    case 70021: res = "Darbo laikas: ";
    case 70022: res = "Tel. ";
    case 70023: res = "El. paäto adresas: ";
    case 70024: res = "¯mon˜s kodas. ";
    
  /*Loan Application*/

    case 70100: res = "Finansavimo tipas";
    case 70101: res = "Verslo paskola su grafiku";
    case 70102: res = "Paskola su atid˜tu grˆìinimu";
    case 70103: res = "Paskola su likutine verte";
    case 70104: res = "Sˆskait÷ finansavimas (faktoringas)";
    case 70105: res = "Atsiskaitymo garantija";
    case 70106: res = "Pageidaujama suma";
    case 70107: res = "Terminas";
    case 70108: res = "Preliminari kaina";
    case 70109: res = "paslaugos m˜n. mokestis";
    case 70110: res = "preliminari °moka";
    case 70111: res = "palðkan÷ (netaikomos)";
    case 70112: res = "¯mon˜s kodas";
    case 70113: res = "¯veskite °mon˜s kodas";
    case 70114: res = "Jðs÷ el. paäto adresas";
    case 70115: res = "¯veskite el.paäto adresˆ";
    case 70116: res = "Aä sutinku, kad äioje paraiäkoje pateikti mano duomenys bðt÷ tvarkomi ãNovitiÒ (UAB ã¯moka lengvaiÒ) verslo paskolos sudarymo tikslais.";
    case 70117: res = "Aä sutinku, kad mano nurodytu telefonu susisiektum˜te su manimi tiesiogin˜s rinkodaros tikslais.";
    case 70118: res = "T«sti";
    case 70119: res = "Paskolos uìklausa";
    case 70120: res = "¯mon˜s duomenys ir laiduotojai";
    case 70121: res = "Pasiraäymas";
    case 70122: res = "Failed to store Application";
    case 70123: res = "Finansavimo tipas";
    case 70124: res = "Laiduotojai";
    case 70125: res = "¯mon˜s pavadinimas";
    case 70126: res = "¯veskite °mon˜s pavadinimˆ";
    case 70127: res = "Adresas";
    case 70128: res = "¯veskite adresˆ";
    case 70129: res = "Adresas korespondencijai";
    case 70130: res = "Sutampa su °mon˜s adresu";
    case 70131: res = "Sutampa su °mon˜s adresu";
    case 70132: res = "Banko sˆskaitos numeris paskolai gauti";
    case 70133: res = "¯veskite banko sˆs. numer°";
    case 70134: res = "Vardas";
    case 70135: res = "¯veskite savo vardˆ";
    case 70136: res = "Pavard˜";
    case 70137: res = "¯veskite savo pavard«";
    case 70138: res = "Pirmosios °mokos data";
    case 70139: res = "¯veskite pirmosios °mokos datˆ";
    case 70140: res = "Laiduotoju praäome bðti °mon˜s savininkˆ (ar kelis), turint° ne maìiau nei 1/3 °mon˜s dalies. Jei äio laiduotojo mokumas ìemas, - siðlome papildomu laiduotoju taip pat °traukti °mon˜s vadovˆ paskolˆ pasirengus° laiduoti asmen°.";
    case 70141: res = "Esu äios sutarties laiduotojas";
    case 70142: res = "Prid˜ti papildomˆ laiduotojˆ";
    case 70143: res = "Gr°ìti";
    case 70144: res = "Skai‹iuokl˜";
    case 70145: res = "Pateik paraiäkˆ";
    case 70146: res = "Pateik paraiäkˆ";
    case 70147: res = "Finansavimo kaina";
    case 70148: res = "Vis÷ °mok÷ suma";
    case 70149: res = "Partneri÷ paieäka";
    case 70150: res = "Nerandate partnerio, pas kur° nor˜tum˜te °sigyti preki÷ su atsiskaitymo garantija?";
    case 70151: res = "Susisiekite";
    case 70152: res = "Statybin˜s medìiagos";
    case 70153: res = "Ieäkoti °moni÷";
  //normal web strings
    case 70154: res = "¯veskite °mon˜s pavadinimˆ";
    case 70155: res = "¯veskite °mon˜s kodas";
    case 70156: res = "¯veskite savo vardˆ ir pavrd«";
    case 70157: res = "¯veskite savo el.paäto adresˆ";
    case 70158: res = "¯veskite savo telefono numer°";
    case 70159: res = "¯veskite slaptaìod°";
    case 70160: res = "¯veskite vardˆ";
    case 70161: res = "Paraäykite komentarˆ ar klausimˆ";
    case 70162: res = "Enter valid email address";
    case 70163: res = "Password can't be blank";
    case 70164: res = "Passwords must match";
    

  //normal web strings end at 70200
    case 70200: res = "Foto galerija";
    case 70201: res = "Jðs÷ paraiäka pateikta";
    case 70202: res = "Susisieksime su Jumis per 1 darbo dienˆ.";
    case 70203: res = "Gr°ìti ° mano duomenis";
    case 70204: res = "Gr°ìti ° pradìiˆ";
    case 70205: res = "Pirmosios °mokos data";
    case 70206: res = "Paskolos tipas";
    case 70207: res = "Pageidaujama suma";
    case 70208: res = "Pirmosios °mokos data";
    case 70209: res = "Paskolos grˆìinimo data";
    case 70210: res = "Jðs÷ pareigos °mon˜je";
    case 70211: res = "¯mon˜s pavadinimas";
    case 70212: res = "¯mon˜s kodas";
    case 70213: res = "Adresas";
    case 70214: res = "Banko sˆskaitos numeris paskolai gauti";
    case 70215: res = "Laiduotojai";
    case 70216: res = "A:";
    case 70217: res = "B:";
    case 70218: res = "C:";
    case 70219: res = "D:";
    case 70220: res = "E:";
    case 70221: res = "";
    case 70222: res = "";
    case 70223: res = "";
    case 70224: res = "Kita";
    case 70225: res = "Pasiraäyti e. paraäu";
    case 70226: res = "Pasiraäyti bankiniu pavedimu";
    case 70227: res = "Pasiraäyti su smart ID";
    case 70228: res = "Leidimas tikrinti asmens duomenis";
    case 70229: res = "Laiduotoju praäome bðti °mon˜s savininkˆ (ar kelis), turint° ne maìiau nei 1/3 °mon˜s dalies. Jei äio laiduotojo mokumas ìemas, - siðlome papildomu laiduotoju taip pat °traukti °mon˜s vadovˆ paskolˆ pasirengus° laiduoti asmen°.";
    case 70230: res = "Leidimas tikrinti asmens duomenis (GDPR)";
    case 70231: res = "Kokiu bðd÷ pasiraäysite?";
    case 70232: res = "Paskolos m˜nesio kaina";
    case 70233: res = "M˜nesin˜ °moka";
    case 70234: res = "¯mon˜s vadovo vardas ir pavard˜";
    case 70235: res = "¯mon˜s vadovo vardas ir pavard˜";
    case 70236: res = "¯mon˜s vadovo asmens kodas";
    case 70237: res = "¯mon˜s vadovo asmens kodas";
    case 70238: res = "¯mon˜s vadovo korespondencijos adresas ";
    case 70239: res = "¯mon˜s vadovo korespondencijos adresas ";
    case 70240: res = "Vadovo el. paäto adresas ";
    case 70241: res = "Vadovo el. paäto adresas ";
    case 70242: res = "Vadovo telefono numeris";
    case 70243: res = "Vadovo telefono numeris";
    case 70244: res = "Vardas, Pavard˜";
    case 70245: res = "Vardas, Pavard˜";
    case 70246: res = "Asmens kodas";
    case 70247: res = "Asmens kodas";
    case 70248: res = "Korespondencijos adresas";
    case 70249: res = "Korespondencijos adresas";
    case 70250: res = "El. paäto adresas";
    case 70251: res = "El. paäto adresas";
    case 70252: res = "Telefono numeris";
    case 70253: res = "Telefono numeris";
    case 70254: res = "¯mon˜s adresas";
    case 70255: res = "¯mon˜s adresas";
    case 70256: res = "Prid˜ti papildomˆ laiduotojˆ";
    case 70257: res = "Jðs÷ el. paäto adresas";
    case 70258: res = "¯veskite el.paäto adresˆ";
    case 70259: res = "Si÷sti";
    case 70260: res = "Email is sent to your mailbox";
    case 70261: res = "Email address was not found";
    case 70262: res = "There was a problem, please try again";
    case 70263: res = "Session expired. Please request new password reset";
    case 70264: res = "Failed to update Password";
    case 70266: res = "Naujas slaptaìodis";
    case 70267: res = "¯veskite naujˆ slaptaìod°";
    case 70268: res = "Pakartokite slaptaìod°";
    case 70269: res = "Pakartokite naujˆ slaptaìod°";
    case 70270: res = "Pakeisti";
    case 70271: res = "Reset Password Session has expired. Please try to Request new Password again";
    case 70272: res = "Remove Surety";
    //what happened here with numbers???
    case 70073: res = "d.";
    case 70074: res = "Neteisingas °mon˜s kodas";

    case 70075: res = "Smart ID";
    case 70076: res = "Bank Transfer";
    case 70077: res = "E-Signature";
    case 70078: res = "By clicking proceed you will sign <a href='/WebShowLoanAppAgreement.hal' target='blank'>agreement</a> to ";
    case 70079: res = "This means that your application will be handled manually and will take longer time. Are you sure you want to continue?";
    case 70080: res = "Close";
    case 70081: res = "Proceed";
    case 70082: res = "Paskolos Pabrangimas";
    case 70083: res = "Paskolos Didis";

    case 70280: res = "Data:";
    case 70281: res = "Suma:";
    case 70282: res = "Paskirtis:";
    case 70283: res = "Prepayment";


  end;

  CheckInternalStrings = res;
  return;
end;


global
updating function Boolean InternalUpdatingActions(string action)
begin
  Boolean res;
  string 255 naction,app;

  if (InString(action,".")>0) then begin
    naction = action;
    app = removenextlistitem(naction,".");
    switch (app) begin
      case "paysera":
        PayseraActions(naction);
        res = true;
    end;
  end;
  if (res==false) then begin
    switch (action) begin
      case "StoreStep2":
        LoanApplicationStoreStep2;
        res = true;
      case "updatepasssess":
        UpdatePasswordSession;
        res = true;
      case "createnewpasssess":
        SendResetPasswordMail;
        res = true;
    end;
  end;

  InternalUpdatingActions = res;
  return;
end;

global
function Boolean DoOuterWebActions(string action)
begin
  string 255 app,naction;
  Boolean res;

  //split
  naction = action;
  app = removenextlistitem(naction,".");

  switch (app) begin
    case "smartid":
      SmartIDWebActions(naction);
      res = true;
    case "loansmartid":
      LoanAppSmartIDAction(naction);
      res = true;
    case "StoreStep1":
      LoanApplicationStoreStep1;
      res = true;
    case "proceedotherver":
      ProcessOtherVerification;
      res = true;
    case "dokobit":
      DokobitActions(naction);
      res = true;
  end;

  DoOuterWebActions = res;
  return;
end;

function string 255 GetFieldName(Integer i)
begin

  GetFieldName = "field" & i;
  return;
end;

function string 255 GetFormValue(string code,Integer i)
begin
  string 255 res;

  res = GetSessionString("cu_form_" & code & "_" & i);

  GetFormValue = res;
  return;
end;

procedure ShowRadioField(record WebNGContactFormFieldVc CFFr,Integer i)
begin
  string 255 label,tstr;
  Longint pos;

  label = CFFr.Comment;
  while (GetNextSubstring(label,pos,",",tstr)) begin
    WebOutString("<div class='cu_row field" & i & " radio'><div class='cu_field'><input type='radio' name='" & GetFieldName(i) & "' value='" & tstr & "'><div class='checkmark'></div></div><div class='cu_label'>" & tstr & "</div></div>");
  end;

  return;
end;

procedure ShowCheckboxField(record WebNGContactFormFieldVc CFFr,Integer i)
begin
  string 255 label;

  label = CFFr.Comment;
  WebOutString("<div class='cu_row field" & i & " checkbox'><div class='cu_field'><input type='checkbox' name='" & GetFieldName(i) & "'><div class='checkmark'></div></div><div class='cu_label'>" & label & "</div></div>");

  return;
end;


global
procedure OuterShowSingleContactUsField(record WebNGContactFormFieldVc CFFr,Integer i)
begin
  
  switch (CFFr.FieldType) begin
    case 2:
      ShowRadioField(CFFr,i);
    case 3:
      ShowCheckboxField(CFFr,i);
  end;

  return;
end;

procedure AddRadioFieldToMail(var record MailVc Mailr,record WebNGContactFormFieldVc CFFr,Integer i,string value)
begin
  Integer lcnt;
  string 255 tstr;

  lcnt = LineTextCnt(Mailr);
  tstr = StrReplace(CFFr.Comment,",","/") & ": " & value;
  LineTextPut(Mailr,lcnt,tstr);

  return;
end;

procedure AddCheckboxFieldToMail(var record MailVc Mailr,record WebNGContactFormFieldVc CFFr,Integer i,string value)
begin
  Integer lcnt;
  string 255 tstr;

  lcnt = LineTextCnt(Mailr);
  if (value=="on") then begin
    tstr = CFFr.Comment & ": " & USetStr(20175);
  end else begin
    tstr = CFFr.Comment & ": " & USetStr(20176);
  end;
  LineTextPut(Mailr,lcnt,tstr);

  return;
end;

global
procedure OuterAddFieldToMail(record MailVc Mailr,record WebNGContactFormFieldVc CFFr,Integer i,string fn,string value)
begin

  switch (CFFr.FieldType) begin
    case 2:
      AddRadioFieldToMail(Mailr,CFFr,i,value);
    case 3:
      AddCheckboxFieldToMail(Mailr,CFFr,i,value);
  end;

  return;
end;

global
updating procedure OuterSetupAndSendContactUsEmail(record MailVc Mailr,record WebNGContactFormVc CFr)
begin
  record WebNGContactFormFieldVc CFFr;
  Boolean TrHs;
  string 255 fn,tstr;
  record CUVc CUr;
  Integer i;

  if (CFr.Code=="INVGUARANTEE") then begin
    CFFr.Code = CFr.Code;
    TrHs = true;
    RecordNew(CUr);
    while (LoopKey("Sorting",CFFr,1,TrHs)) begin
      if (CFFr.Code!=CFr.Code) then begin
        TrHs = false;
      end else begin
        fn = GetFieldName(i);
        tstr = WebGetArg(fn);
        if (CFFr.FieldType==kContactUsFieldTypeText) then begin
          switch (i) begin
            case 1:
              CUr.RegNr1 = tstr;
            case 2:
              CUr.Name = tstr;
            case 3:
              CUr.Person = tstr;
            case 4:
              CUr.eMail = tstr;
            case 5:
              CUr.Phone = tstr;
          end;            
        end;
        i = i + 1;
      end;
    end;
    if (nonblank(CUr.Name) and nonblank(CUr.RegNr1)) then begin
      tstr = "";
      GetNextCustNr(tstr);
      CUr.Code = tstr;
      RecordInsert(CUr,true);
      CreateRecordLink(Mailr,CurrentCompany,CUr,CUrrentCompany);
    end;
  end;

  return;
end;