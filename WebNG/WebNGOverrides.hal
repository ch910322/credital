/*
This is a template file for using stardard functions in halcust. No need to use webng.hal file or other files to just add new functions
This supports adding new web texts, adding new special elements, new structure types and web actions (both updating and non-updating)
*/
external procedure ShowSmartIDIdentification(record WebNGElementVc);
external procedure SmartIDWebActions(string);
external inner function string 255 removenextlistitem(var string,string);
external procedure ShowPartnerList(record WebNGElementVc);
external procedure ShowBannerList(record WebNGElementVc);
external procedure ShowFAQList();
external procedure ShowLoanApplicationOnWeb(record WebNGElementVc);
external procedure ShowLoanApplicationOnWeb2(record WebNGElementVc);
external procedure ShowNewsLetterSignup(record WebNGElementVc);
external procedure ShowEmployeesOnWeb(record WebNGElementVc);
external procedure ShowContactInfo(record WebNGElementVc);
external procedure ShowLoanApp(record WebNGStructVc,string);
external updating procedure LoanApplicationStoreStep1();

global
function boolean ShowSpecialWebElementInternal(record WebNGElementVc WEr)
begin
  boolean res;

  res = true;
  switch (WEr.Type) begin
    case 120:
      //ShowLoanApp(WEr);
    case 121:
      ShowSmartIDIdentification(WEr);
    case 122:
      ShowPartnerList(WEr);
    case 123:
      ShowBannerList(WEr);
    case 124:
      ShowFAQList;
    case 125:
      ShowLoanApplicationOnWeb(WEr);
    case 126:
      ShowNewsLetterSignup(WEr);
    case 127:
      ShowEmployeesOnWeb(WEr);
    case 128:
      ShowLoanApplicationOnWeb2(WEr);
    case 129:
      ShowContactInfo(WEr);
    otherwise
      res = false;
  end;
  ShowSpecialWebElementInternal = res;
  return;
end;

global
function Boolean ShowInternalWebApp(Integer lasttype,record WebNGStructVc WSr,string mpath)
begin
  Boolean res;

  //res = true;
  switch (lasttype) begin
    case 200: ShowLoanApp(WSr,mpath); res = true;
  otherwise
    res = false;
  end;
  ShowInternalWebApp = res;
  return;
end;

global
function Boolean InternalNodeIsApplication(Integer nodetype)
begin
  Boolean res;
  
  if (nodetype==200) then begin
    res = true;
  end;

  InternalNodeIsApplication = res;
  return;
end;

global
function string 255 CheckInternalStrings(Longint strno)
begin
  string 255 res;

  SetLangMode(LangLithuanian,"LIT",0);

  switch (strno) begin
    case 70000: res = "test";
    case 70001: res = "Jðs÷ °mon˜s pavadinimas";
    case 70002: res = "¯veskite °mon˜s pavadinimˆ";
    case 70003: res = "Jðs÷ el. paäto adresas";
    case 70004: res = "¯veskite el.paäto adresˆ";
    case 70005: res = "Telefonas";
    case 70006: res = "¯veskite telefono numer°";
    case 70007: res = "Finansavimo poreikis";
    case 70008: res = "Faktoringo terminas";
    case 70009: res = "Aä sutinku, kad äioje paraiäkoje pateikti mano duomenys bðt÷ tvarkomi ãCredital versluiÒ (UAB ã¯moka lengvaiÒ) verslo paskolos sudarymo tikslais.";
    case 70010: res = "Aä sutinku, kad mano nurodytu el. paätu susisiektum˜te su manimi tiesiogin˜s rinkodaros tikslais";
    case 70011: res = "Si÷sti uìklausˆ";
    case 70012: res = "Partneriai";
    case 70013: res = uchr(128);
    case 70014: res = "m˜n.";
    case 70015: res = "Uìsisakykite naujienlaiäk°!";
    case 70016: res = "Gaukite aktualiausias verslo finansavimo naujienas, °ìvalgas ir specialius pasiðlymus tiesiai ° el. paätˆ.";
    case 70017: res = "Prenumeruoti";
    case 70018: res = "Added to News Letters successfully";
    case 70019: res = "Paieäka";
    case 70020: res = "Apie mus raäo";
    case 70021: res = "Darbo laikas: ";
    case 70022: res = "Tel. ";
    case 70023: res = "El. paäto adresas: ";
    case 70024: res = "¯mon˜s kodas. ";
    
  /*Loan Application*/

    case 70100: res = "Finansavimo tipas";
    case 70101: res = "Verslo paskola su grafiku";
    case 70102: res = "Paskola su atid˜tu grˆìinimu";
    case 70103: res = "Paskola su likutine verte";
    case 70104: res = "Sˆskait÷ finansavimas (faktoringas)";
    case 70105: res = "Atsiskaitymo garantija";
    case 70106: res = "Pageidaujama suma";
    case 70107: res = "Terminas";
    case 70108: res = "Preliminari kaina";
    case 70109: res = "paslaugos m˜n. mokestis";
    case 70110: res = "preliminari °moka";
    case 70111: res = "palðkan÷ (netaikomos)";
    case 70112: res = "¯mon˜s kodas";
    case 70113: res = "¯veskite °mon˜s kodas";
    case 70114: res = "Jðs÷ el. paäto adresas";
    case 70115: res = "¯veskite el.paäto adresˆ";
    case 70116: res = "Aä sutinku, kad äioje paraiäkoje pateikti mano duomenys bðt÷ tvarkomi ãNovitiÒ (UAB ã¯moka lengvaiÒ) verslo paskolos sudarymo tikslais.";
    case 70117: res = "Aä sutinku, kad mano nurodytu telefonu susisiektum˜te su manimi tiesiogin˜s rinkodaros tikslais.";
    case 70118: res = "T«sti";
    case 70119: res = "Paskolos uìklausa";
    case 70120: res = "¯mon˜s duomenys ir laiduotojai";
    case 70121: res = "Pasiraäymas";
    case 70122: res = "Failed to store Application";
    
  end;

  CheckInternalStrings = res;
  return;
end;


global
updating function Boolean InternalUpdatingActions(string action)
begin
  Boolean res;


  switch (action) begin
    case "StoreStep1":
      LoanApplicationStoreStep1;
      res = true;

  end;

  InternalUpdatingActions = res;
  return;
end;

global
function Boolean DoOuterWebActions(string action)
begin
  string 255 app,naction;
  Boolean res;

  //split
  naction = action;
  app = removenextlistitem(naction,".");

  switch (app) begin
    case "smartid":
      SmartIDWebActions(naction);
      res = true;
  end;

  DoOuterWebActions = res;
  return;
end;
