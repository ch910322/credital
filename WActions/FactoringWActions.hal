remote updating procedure AddFactoringIVAndGenerateRecords(record RcVc,var Longint);
remote procedure GetFactoringCustomers(Longint,var array string,var array string);
external inner procedure PasteFromSysList(Integer,Integer);
remote updating procedure GenerateSLAndPLInvoices(record CredManFactInvoiceVc);
remote updating procedure FillCredManBuyers(var record CredManFactVc,var val);
remote procedure CredManFactInsertCustCode(var record CredManFactVc,Integer);
remote updating procedure CreateSingleAgreementInvoice(record CredManVc,Date,var record IVVc);

global
procedure CustCredManFactInvoiceAddSm()
begin
  record RcVc RepSpec;
  record CredManVc CredManr;

  if (GetWindowClass(MotherWindow(CurWindow))=="CredManDClass") then begin
    GetWindowRecord(MotherWindow(CurWindow),CredManr);
    
    RepSpec.long1 = CredManr.SerNr;
    OpenWindow("NewCredManFactInvoiceWClass",1,CurWindow,"","",RepSpec);
  end;

  return;
end;

global
updating procedure CustCredManFactInvoiceCreateFeeInvSm()
begin
  record CredManVc CredManr;
  record IVVc IVr;
  Integer wn;

  wn = MotherWindow(CurWindow);

  if (GetWindowClass(wn)=="CredManDClass") then begin
    GetWindowRecord(wn,CredManr);
    
    CreateSingleAgreementInvoice(CredManr,CurrentDate,IVr);
    if (IVr.SerNr>-1) then begin
      OpenWindow("IVDClass",1,CurWindow,"","",IVr);
    end;
  end;

  return;
end;

global
procedure CustCredManFactInvoiceOpenSLSm()
begin
  record CredManFactInvoiceVc CMIr;
  record IVVc IVr;
  Integer wn;

  wn = CurWindow;
  if (GetRecordFromBrowse(CMIr,wn,1)) begin
    IVr.SerNr = CMIr.SellerIVNr;
    if (ReadFirstMain(IVr,1,true)) then begin
      OpenWindow("IVDClass",0,CurWindow,"","",IVr);
    end;
  end;

  return;
end;

global
procedure CustCredManFactInvoiceOpenPLSm()
begin
  record CredManFactInvoiceVc CMIr;
  record VIVc VIr;
  Integer wn;

  wn = CurWindow;
  if (GetRecordFromBrowse(CMIr,wn,1)) begin
    VIr.SerNr = CMIr.BuyerVINr;
    if (ReadFirstMain(VIr,1,true)) then begin
      OpenWindow("VIDClass",0,CurWindow,"","",VIr);
    end;
  end;

  return;
end;

global
updating procedure CustCredManFactInvoiceRecreateSm()
begin
  Integer wn;
  record CredManFactInvoiceVc CMIr;
  
  wn = CurWindow;
  if (GetRecordFromBrowse(CMIr,wn,1)) begin
    if (CMIr.InitSLInvFlag==0 and CMIr.InitPLInvFlag==0) then begin
      GenerateSLAndPLInvoices(CMIr);
      UpdateBrowses("CustCredManFactInvoiceWClass");
    end;
  end;

  return;
end;

global
updating procedure CustCredManFactInvoiceDeleteSm()
begin
  Integer wn;
  record CredManFactInvoiceVc CMIr;
  
  wn = CurWindow;
  if (GetRecordFromBrowse(CMIr,wn,1)) begin
    if (CMIr.InitSLInvFlag==0 and CMIr.InitPLInvFlag==0) then begin
      RecordDelete(CMIr);
      UpdateBrowses("CustCredManFactInvoiceWClass");
    end;
  end;

  return;
end;

global
procedure CredManFactCreateContactDsm()
begin
  record CUVc CUr;

  RecordNew(CUr);
  OpenWindow("CUDClass",1,CurWIndow,"","",CUr);

  return;
end;

global
updating procedure NewCredManFactInvoiceWClassProceed()
begin
  record RcVc RepSpec;
  Integer wn;
  Longint errno;

  wn = CurWindow;
  DeselectWindow(wn,true);
  GetWindowRecord(wn,RepSpec);
  AddFactoringIVAndGenerateRecords(RepSpec,errno);
  if (errno>-1) then begin
    MessageBox(errno,"");
  end else begin
    UpdateBrowses("CustCredManFactInvoiceWClass");
    CloseWindow(wn);
  end;

  return;
end;

global
function Boolean CustCredManFactInvoiceWClassUpdateWindowSubset(Integer wn,var string subsetname)
begin
  record CredManVc CredManr;
  
  GetWindowRecord(MotherWindow(wn),CredManr);
  if (CredManr.SerNr>0) then begin
    subsetname = CredManr.SerNr;
  end else begin
    subsetname = -9999999;
  end;

  CustCredManFactInvoiceWClassUpdateWindowSubset = true;
  return;
end;

function Boolean NewCredManFactInvoiceWClassf1EFAfter(Integer wn,Boolean changedf)
begin
  record RcVc RepSpec;
  record CUVc CUr;

  if (changedf) then begin  
    GetWindowRecord(wn,RepSpec);
    CUr.Code = RepSpec.f1;
    if (ReadFirstMain(CUr,1,true)) then begin
      RepSpec.searchstr = CUr.Name;
    end;
    PutWindowRecord(wn,RepSpec);   
  end; 
  NewCredManFactInvoiceWClassf1EFAfter = true;
  return;
end;


global
function Boolean NewCredManFactInvoiceWClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
begin
  Boolean res;

  switch (fieldname) begin
    case "f1": res = NewCredManFactInvoiceWClassf1EFAfter(wn,changed!=0);
  end;
  
  NewCredManFactInvoiceWClassAfterEditField = res;
  return;
end;

function Boolean CredManFactDClassCustCodeEFAfter(Integer wn,Integer rownr,Boolean changedf)
begin
  record CredManFactVc CMFr;

  if (changedf and rownr>-1) then begin  
    GetWindowRecord(wn,CMFr);
    CredManFactInsertCustCode(CMFr,rownr);
    PutWindowRecord(wn,CMFr);   
  end; 
  CredManFactDClassCustCodeEFAfter = true;
  return;
end;

procedure SumupFactoringLimits(var record CredManFactVc CMFr)
begin
  row CredManFactVc CMFrw;
  Integer i,rwcnt;
  val tot;

  rwcnt = MatRowCnt(CMFr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(CMFr,i,CMFrw);
    if (CMFrw.Type==0) then begin
      tot = tot + CMFrw.MaxLimit;
    end;
  end;

  CMFr.Total = tot;

  return;
end;

function Boolean CredManFactDClassMaxLimitEFAfter(Integer wn,Integer rownr,Boolean changedf)
begin
  record CredManFactVc CMFr;
  row CredManFactVc CMFrw;
  record CUVc CUr;

  if (changedf and rownr>-1) then begin  
    GetWindowRecord(wn,CMFr);
    SumupFactoringLimits(CMFr);
    PutWindowRecord(wn,CMFr);   
  end; 
  CredManFactDClassMaxLimitEFAfter = true;
  return;
end;



global
function Boolean CredManFactDClassAfterEditField(Integer wn,string fieldname,Integer fn, Integer rownr,Integer changed)
begin
  Boolean res;

  switch (fieldname) begin
    case "CustCode": res = CredManFactDClassCustCodeEFAfter(wn,rownr,changed!=0);
    case "MaxLimit": res = CredManFactDClassMaxLimitEFAfter(wn,rownr,changed!=0);
    case "Type": res = CredManFactDClassMaxLimitEFAfter(wn,rownr,changed!=0);
  end;
  
  CredManFactDClassAfterEditField = res;
  return;
end;

global
function Boolean CredManFactDClassSwitchRow(Integer wn,Integer rownr)
begin
  Boolean res;

  res = true;
  CredManFactDClassMaxLimitEFAfter(wn,rownr,true);

  CredManFactDClassSwitchRow = res;
  return;
end;


global
function Boolean CredManFactDClassOnOpenWindow(Integer wn)
begin
  record CredManFactVc CMFr;
  val credmanlimit;
  Integer oldstate;
  record CredManVc CredManr;
  array val aopen;
  Integer i;

  GetWindowRecord(wn,CMFr);
  CredManr.SerNr = CMFr.CredManNr;
  if (ReadFirstMain(CredManr,1,true)) then begin
    PutWindowString(wn,"credmanlimit",CredManr.InvSum4);
  end;
  if (WindowState(wn)==Rs_Normal) then begin
    NewTimedTask("FillCredManBuyersTask","FillCredManBuyersTask","FillCredManBuyersTask",wn,CurrentDate,CurrentTime,"","");
  end;

  CredManFactDClassOnOpenWindow = false;
  return;
end;

global
updating procedure FillCredManBuyersTask(string wnstr)
begin
  Integer wn;
  record CredManFactVc CMFr;
  val credmanlimit;
  Integer oldstate;

  wn = StringToInt(wnstr);
  if (GetWindowClass(wn)=="CredManFactDClass") then begin
    if (WindowState(wn)==Rs_Normal) then begin
      GetWindowRecord(wn,CMFr);
      FillCredManBuyers(CMFr,credmanlimit);
      PutWindowRecord(wn,CMFr);
      WindowDoOK(wn,0);
    end;
  end;
  
  return;
end;
/*

global
function LongInt CredManFactVcRecordProtectFields(var record CredManFactVc CMFr,record CredManFactVc CMF2r,LongInt long3,LongInt long4)
begin
  LongInt res;
  row CredManFactVc CMFrw,CMF2rw;
  Integer i,rwcnt;

  rwcnt = MatRowCnt(CMFr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(CMFr,i,CMFrw);
    MatRowGet(CMF2r,i,CMF2rw);
    CMF2rw.Used = CMFrw.Used;
    MatRowPut(CMF2r,i,CMF2rw);
  end;
  CredManFactVcRecordProtectFields = res;
  return;
end;
*/


global
function Boolean FactoringBuyersSClassOnOpenWindow(Integer wn)
begin
  array string 255 acode,aname;
  record RcVc RepSpec;
  Integer i;

  GetWindowRecord(MotherWindow(wn),RepSpec);
  GetFactoringCustomers(RepSpec.long1,acode,aname);

  ClearStringList(wn);
  for (i=0;i<acode.length;i=i+1) begin
    AddListRow(wn,"customers",1,acode[i],0);
    AddListData(wn,"customers","custcode",acode[i]);
    AddListData(wn,"customers","custname",aname[i]);
  end;

  FactoringBuyersSClassOnOpenWindow = false;
  return;
end;

global
function Boolean FactoringBuyersSClassOnOKWindow(Integer wn)
begin
  PasteFromSysList(wn,-1);
  FactoringBuyersSClassOnOKWindow = false;
  return;
end;
