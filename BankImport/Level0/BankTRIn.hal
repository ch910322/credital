external procedure IPSumup(var record IPVc);
external procedure IPVc_PasteBankVal(var record IPVc,Integer);
external procedure IPVc_PasteRecVal(var record IPVc,Integer);
external function Boolean IPVc_PasteCustCode(var record IPVc,Integer,var LongInt);
external function Boolean PasteInvIn2IPr(var record IPVc,Integer,Date,var val,Boolean,var Boolean);
external function string 255 StripCharacter(string,string);
external function Boolean IsDigit(string);
external function val ValFromString(string,string,string);
external function Date DateFromString(string,string);
//CUST-BEGIN
external outer updating procedure CustFillIPRecord(record BankTRVc,var record IPVc);
external outer updating procedure CustFillOPRecord(record BankTRVc,var record OPVc);
//CUST-END
function Boolean BankAccountNumberMatches(string pmbanknr,string bankacc)
begin
  Boolean res;
  Integer i;
  string 255 tstr;
  
  while (i<len(bankacc)) begin
    if (IsDigit(Mid(bankacc,i,1))) then begin
      tstr = right(bankacc,len(bankacc)-i);
      i = len(bankacc);
    end;
    i = i + 1;
  end;
  if (Right(pmbanknr,len(tstr))==tstr) then begin
    res = true;
  end;
  BankAccountNumberMatches = res;
  return;
end;

global
function Boolean GetBankAccPMRow(record PMBlock PMb,string sortcode,string bankacc,var row PMBlock PMbrw)
begin
  Boolean res;
  Integer i,rwcnt;
  
  ClearRow(PMb,PMbrw,1);
  res = true;
  BlockLoad(PMb);
  rwcnt = MatRowCnt(PMb);
  for (i=0 ;i<rwcnt;i=i+1) begin
    MatRowGet(PMb,i,PMbrw);
    if (PMbrw.SortCode==sortcode or blank(sortcode)) and (BankAccountNumberMatches(PMbrw.BankNr,bankacc)) then begin
      goto LGetBankAccPMRow;
    end;
  end;
  res = false;
  ClearRow(PMb,PMbrw,1);
LGetBankAccPMRow:;
  GetBankAccPMRow = res;
  return;
end;

global
function Boolean GetYodleeIDPMRow(record PMBlock PMb,string sortcode,string accountid,var row PMBlock PMbrw)
begin
  Boolean res;
  Integer i,rwcnt;
  
  ClearRow(PMb,PMbrw,1);
  res = true;
  BlockLoad(PMb);
  rwcnt = MatRowCnt(PMb);
  for (i=0 ;i<rwcnt;i=i+1) begin
    MatRowGet(PMb,i,PMbrw);
    if (PMbrw.YodleeaccountId==accountid) then begin
      goto LGetYodleeIDPMRow;
    end;
  end;
  res = false;
LGetYodleeIDPMRow:;
  GetYodleeIDPMRow = res;
  return;
end;

updating procedure CreateReceipt(record SRBlock SRb,string paymode,record BankTRVc BTRr)
begin
  record CUVc CUr;
  record IPVc IPr;
  row IPVc IPrw;
  LongInt pos,err;
  string 255 tstr,custcode;
  record IVVc IVr;
  record ARVc ARr;
  Integer rownr;
  val chk,btv;
  Boolean testf,found,installmentf,cufound,empty;

  empty = true;
  btv = BTRr.Sum;
  RecordNew(IPr);
  IPr.TransDate = BTRr.TransDate;
  IPr.SerNr = NextSerNr("IPVc",IPr.TransDate,SRb.LastPayNr,false,"");
  IPr.RegDate = CurrentDate;
  IPr.OKFlag = 0;
  IPr.PayMode = paymode;
  IPr.Comment = BTRr.Comment;
  pos = 0;
  GetNextSubstring(BTRr.PayReference,pos,", ",tstr);
  while (nonblank(tstr) and btv>0) begin
    testf = false;
    if (nonblank(tstr)) then begin
      IVr.OfficialSerNr = tstr;
      testf = ReadFirstKey("OfficialSerNr",IVr,1,true);
    end;
    if (testf==false) then begin
      IVr.SerNr = StripNonDigits(tstr);
      testf = ReadFirstKey("SerNr",IVr,1,true);
    end;
    if (testf) then begin
      empty = false;
      rownr = MatRowCnt(IPr);
      custcode = IVr.CustCode;
      ClearRow(IPr,IPrw,1);
      IPrw.InvoiceNr = IVr.SerNr;
      MatRowPut(IPr,rownr,IPrw);
      PasteInvIn2IPr(IPr,rownr,IPr.TransDate,chk,false,installmentf);
      MatRowGet(IPr,rownr,IPrw);
      if (btv<IPrw.InvVal) then begin
        IPrw.RecCurncy = BTRr.CurncyCode;
        IPrw.RecVal = btv;
        MatRowPut(IPr,rownr,IPrw);
        IPVc_PasteRecVal(IPr,rownr);
      end;
      MatRowGet(IPr,rownr,IPrw);
      IPrw.rkRecNumber = BTRr.Comment;
      MatRowPut(IPr,rownr,IPrw);
      MatRowGet(IPr,rownr,IPrw);
      btv = btv - IPrw.InvVal;
    end;
    GetNextSubstring(BTRr.PayReference,pos,", ",tstr);
  end;
  if (empty) then begin
    goto LCreateReceipt;
  end;
  if (btv>0) then begin
    cufound = true;
    if (blank(custcode)) then begin
      CUr.RegNr1 = BTRr.PayRegNr1;
      cufound = ReadFirstKey("RegNr1",CUr,1,true);
      custcode = CUr.Code;
      if (blank(CUr.RegNr1)) then begin cufound = false; custcode = ""; end;
      if (cufound==false) then begin
        CUr.IBANCode = BTRr.PayBankAcc;
        cufound = ReadFirstKey("ActIBAN",CUr,1,true);
        custcode = CUr.Code;
      end;
      if (cufound==false) then begin
        CUr.BankAccount = BTRr.PayBankAcc;
        cufound = ReadFirstKey("BankAccount",CUr,1,true);
        custcode = CUr.Code;
      end;
    end;
    if (cufound) then begin
      found = true;
      ARr.CustCode = custcode;
      while (LoopBackKey("CustCode",ARr,1,found)) begin
        if (ARr.CustCode!=custcode) then begin found = false; end;
        if (found) then begin
          testf = true;
          IVr.SerNr = ARr.InvoiceNr;
          testf = ReadFirstKey("SerNr",IVr,1,true);
          if (testf) then begin
            rownr = MatRowCnt(IPr);
            custcode = IVr.CustCode;
            ClearRow(IPr,IPrw,1);
            IPrw.InvoiceNr = IVr.SerNr;
            MatRowPut(IPr,rownr,IPrw);
            PasteInvIn2IPr(IPr,rownr,IPr.TransDate,chk,false,installmentf);
            MatRowGet(IPr,rownr,IPrw);
            if (btv<IPrw.InvVal) then begin
              IPrw.RecCurncy = BTRr.CurncyCode;
              IPrw.RecVal = btv;
              MatRowPut(IPr,rownr,IPrw);
              IPVc_PasteRecVal(IPr,rownr);
            end;
            MatRowGet(IPr,rownr,IPrw);
            IPrw.rkRecNumber = BTRr.Comment;
            MatRowPut(IPr,rownr,IPrw);
            MatRowGet(IPr,rownr,IPrw);
            btv = btv - IPrw.InvVal;
            if (btv<=0) then begin found = false; end;
          end;
        end;
      end;
    end;
  end;
  if (btv>0 and cufound) then begin
    rownr = MatRowCnt(IPr);
    ClearRow(IPr,IPrw,1);
    IPrw.CustCode = custcode;
    MatRowPut(IPr,rownr,IPrw);
    IPVc_PasteCustCode(IPr,rownr,err);
    MatRowGet(IPr,rownr,IPrw);
    IPrw.RecCurncy = BTRr.CurncyCode;
    IPrw.RecVal = btv;
    MatRowPut(IPr,rownr,IPrw);
    IPVc_PasteRecVal(IPr,rownr);
    MatRowGet(IPr,rownr,IPrw);
    IPrw.rkRecNumber = BTRr.Comment;
    MatRowPut(IPr,rownr,IPrw);
  end;
  
  IPSumup(IPr);
  RecordStore(IPr,false);
LCreateReceipt:;
  return;
end;

updating procedure ImpSwedBankLTU(record RcVc RepSpec)
begin
  record BankTRVc oBTRr;
  record BankTRVc BTRr;
  string 255 acctkey,balkey,ntrykey,nkey;
  string 255 sortcode,bankacc,inputLine;
  xml xdata;
  Integer n;
  record CYBlock CYb;
  record PMBlock PMb;
  row PMBlock PMbrw;
  record SRBlock SRb;
  
  BlockLoad(PMb);
  BlockLoad(CYb);
  BlockLoad(SRb);

  xdata = ParseXmlFile(GetImportFileName);

  acctkey = "Document/Stmt/Acct/";
  sortcode = XmlGet(xdata,"Document/BkToCstmrStmt/Stmt/Acct/Svcr/FinInstnId/BIC");
  bankacc = XmlGet(xdata,"Document/BkToCstmrStmt/Stmt/Acct/Id/IBAN");

  GetBankAccPMRow(PMb,"",bankacc,PMbrw);

  acctkey = "Document/BkToCstmrStmt/Stmt/Acct/";
  balkey = "Document/BkToCstmrStmt/Stmt/Bal/";
  nkey = "Document/BkToCstmrStmt/Stmt/Ntry";


  n = 0;
  while (XmlNodeExists(xdata,nkey & "[" & n & "]")) begin
    ntrykey = nkey & "[" & n & "]/";
    RecordNew(BTRr);

    BTRr.CurncyCode = XmlGetAttribute(xdata,ntrykey & "Amt","Ccy");
    BTRr.Sum = ValFromString(XmlGet(xdata,ntrykey & "Amt"),".","");
    BTRr.TypeRef = XmlGet(xdata,ntrykey & "CdtDbtInd");
    BTRr.TransDate = DateFromString(XmlGet(xdata,ntrykey & "BookgDt/Dt"),"YYYY-MM-DD");

    BTRr.TRNumber = XmlGet(xdata,ntrykey & "AcctSvcrRef");
    BTRr.Comment = XmlGet(xdata,ntrykey & "NtryDtls/TxDtls/RmtInf/Ustrd");

//    BTRr.Comment = XmlGet(xdata,ntrykey & "NtryDtls/TxDtls/RltdPties/CdtrAcct/Id/IBAN");
//    BTRr.Comment = XmlGet(xdata,ntrykey & "NtryDtls/TxDtls/RltdPties/CdtrAcct/Id/IBAN");

//    BTRr.Reference = XmlGet(xdata,ntrykey & "MEMO");
    
    switch (Left(BTRr.TypeRef,1)) begin
      case "D":
        BTRr.PayBankAcc = bankacc;
        if (blank(BTRr.PayBankAcc)) then begin
          BTRr.PayBankAcc = RepSpec.f20;
        end;
        if (blank(BTRr.PayBankAcc)) then begin
          BTRr.PayBankAcc = PMbrw.SortCode & PMbrw.BankNr;
        end;
        
        BTRr.PayTransDate = BTRr.TransDate;
        BTRr.PayName = CYb.CompName;
        BTRr.PayVATNr = CYb.VATNr;
        BTRr.PayRegNr1 = CYb.OrgNr;


        BTRr.RcpBankAcc = XmlGet(xdata,ntrykey & "NtryDtls/TxDtls/RltdPties/CdtrAcct/Id/IBAN");
        BTRr.RcpTransDate = BTRr.TransDate;
        BTRr.RcpName = XmlGet(xdata,ntrykey & "NtryDtls/TxDtls/RltdPties/Cdtr/Nm");
        BTRr.RcpRegNr1 = XmlGet(xdata,ntrykey & "NtryDtls/TxDtls/RltdPties/Cdtr/Id/OrgId/Othr/Id");
        BTRr.RcpReference = XmlGet(xdata,ntrykey & "NtryDtls/TxDtls/RmtInf/Ustrd");
//CUST-BEGIN
        begin
          record OPVc OPr;
          CustFillOPRecord(BTRr,OPr);
          if (OPr.SerNr>0) then begin
            BTRr.FileName = "OPVc";
            BTRr.TransNr = OPr.SerNr;
          end;
        end;
//CUST-END
      case "C":
        BTRr.RcpBankAcc = bankacc;
        if (blank(BTRr.RcpBankAcc)) then begin
          BTRr.RcpBankAcc = RepSpec.f20;
        end;
        if (blank(BTRr.RcpBankAcc)) then begin
          BTRr.RcpBankAcc = PMbrw.SortCode & PMbrw.BankNr;
        end;
        BTRr.RcpTransDate = BTRr.TransDate;
        BTRr.RcpName = CYb.CompName;
        BTRr.RcpVATNr = CYb.VATNr;
        BTRr.RcpRegNr1 = CYb.OrgNr;

        BTRr.PayBankAcc = XmlGet(xdata,ntrykey & "NtryDtls/TxDtls/RltdPties/DbtrAcct/Id/IBAN");
        BTRr.PayTransDate = BTRr.TransDate;
        BTRr.PayName = XmlGet(xdata,ntrykey & "NtryDtls/TxDtls/RltdPties/Dbtr/Nm");
        BTRr.PayRegNr1 = XmlGet(xdata,ntrykey & "NtryDtls/TxDtls/RltdPties/Dbtr/Id/OrgId/Othr/Id");
        BTRr.PayReference = XmlGet(xdata,ntrykey & "NtryDtls/TxDtls/RmtInf/Ustrd");
//CUST-BEGIN
//        CreateReceipt(SRb,PMbrw.Code,BTRr);
        begin
          record IPVc IPr;
          CustFillIPRecord(BTRr,IPr);
          if (IPr.SerNr>0) then begin
            BTRr.FileName = "IPVc";
            BTRr.TransNr = IPr.SerNr;
          end;
        end;
//CUST-END
    end;
    oBTRr.TRNumber = BTRr.TRNumber;
    if (ReadFirstKey("TRNumber",oBTRr,1,true)==false) then begin
      BTRr.SerNr = NextSerNr("BankTRVc",BTRr.TransDate,-1,false,"");
      if (BTRr.SerNr>0) then begin
        RecordInsert(BTRr,false);//CUST RecordStore>>RecordInsert
      end;
    end;

    n = n + 1;
  end;
  
  while (TestEOF==false) begin
    inputLine = ImportField;
    if (NextImportLine(true)) then begin
    end;
  end;
  return;
end;

updating procedure ImpSEBLTU(record RcVc RepSpec)
begin
  record BankTRVc oBTRr;
  record BankTRVc BTRr;
  string 255 acctkey,balkey,ntrykey,nkey;
  string 255 sortcode,bankacc,inputLine;
  xml xdata;
  Integer n;
  record CYBlock CYb;
  record PMBlock PMb;
  row PMBlock PMbrw;
  record SRBlock SRb;
  
  BlockLoad(PMb);
  BlockLoad(CYb);
  BlockLoad(SRb);

  xdata = ParseXmlFile(GetImportFileName);

  acctkey = "Document/Stmt/Acct/";
  sortcode = XmlGet(xdata,"Document/BkToCstmrStmt/Stmt/Acct/Svcr/FinInstnId/BIC");
  bankacc = XmlGet(xdata,"Document/BkToCstmrStmt/Stmt/Acct/Id/IBAN");

  GetBankAccPMRow(PMb,"",bankacc,PMbrw);

  acctkey = "Document/BkToCstmrStmt/Stmt/Acct/";
  balkey = "Document/BkToCstmrStmt/Stmt/Bal/";
  nkey = "Document/BkToCstmrStmt/Stmt/Ntry";


  n = 0;
  while (XmlNodeExists(xdata,nkey & "[" & n & "]")) begin
    ntrykey = nkey & "[" & n & "]/";
    RecordNew(BTRr);

    BTRr.CurncyCode = XmlGetAttribute(xdata,ntrykey & "Amt","Ccy");
    BTRr.Sum = ValFromString(XmlGet(xdata,ntrykey & "Amt"),".","");
    BTRr.TypeRef = XmlGet(xdata,ntrykey & "CdtDbtInd");
    BTRr.TransDate = DateFromString(XmlGet(xdata,ntrykey & "BookgDt/DtTm"),"YYYY-MM-DD");

    BTRr.TRNumber = XmlGet(xdata,ntrykey & "AcctSvcrRef");
    BTRr.Comment = XmlGet(xdata,ntrykey & "NtryDtls/TxDtls/RmtInf/Ustrd");
    
    switch (Left(BTRr.TypeRef,1)) begin
      case "D":
        BTRr.PayBankAcc = bankacc;
        if (blank(BTRr.PayBankAcc)) then begin
          BTRr.PayBankAcc = RepSpec.f20;
        end;
        if (blank(BTRr.PayBankAcc)) then begin
          BTRr.PayBankAcc = PMbrw.SortCode & PMbrw.BankNr;
        end;
        
        BTRr.PayTransDate = BTRr.TransDate;
        BTRr.PayName = CYb.CompName;
        BTRr.PayVATNr = CYb.VATNr;
        BTRr.PayRegNr1 = CYb.OrgNr;


        BTRr.RcpBankAcc = XmlGet(xdata,ntrykey & "NtryDtls/TxDtls/RltdPties/CdtrAcct/Id/IBAN");
        BTRr.RcpTransDate = BTRr.TransDate;
        BTRr.RcpName = XmlGet(xdata,ntrykey & "NtryDtls/TxDtls/RltdPties/Cdtr/Nm");
        BTRr.RcpRegNr1 = XmlGet(xdata,ntrykey & "NtryDtls/TxDtls/RltdPties/Cdtr/Id/OrgId/Othr/Id");
        BTRr.RcpReference = XmlGet(xdata,ntrykey & "NtryDtls/TxDtls/RmtInf/Ustrd");

      case "C":
        BTRr.RcpBankAcc = bankacc;
        if (blank(BTRr.RcpBankAcc)) then begin
          BTRr.RcpBankAcc = RepSpec.f20;
        end;
        if (blank(BTRr.RcpBankAcc)) then begin
          BTRr.RcpBankAcc = PMbrw.SortCode & PMbrw.BankNr;
        end;

        BTRr.RcpTransDate = BTRr.TransDate;
        BTRr.RcpName = CYb.CompName;
        BTRr.RcpVATNr = CYb.VATNr;
        BTRr.RcpRegNr1 = CYb.OrgNr;

        BTRr.PayBankAcc = XmlGet(xdata,ntrykey & "NtryDtls/TxDtls/RltdPties/DbtrAcct/Id/IBAN");
        BTRr.PayTransDate = BTRr.TransDate;
        BTRr.PayName = XmlGet(xdata,ntrykey & "NtryDtls/TxDtls/RltdPties/Dbtr/Nm");
        BTRr.PayRegNr1 = XmlGet(xdata,ntrykey & "NtryDtls/TxDtls/RltdPties/Dbtr/Id/OrgId/Othr/Id");
        BTRr.PayReference = XmlGet(xdata,ntrykey & "NtryDtls/TxDtls/RmtInf/Ustrd");
        CreateReceipt(SRb,PMbrw.Code,BTRr);

      
    end;
    
    oBTRr.TRNumber = BTRr.TRNumber;
    if (ReadFirstKey("TRNumber",oBTRr,1,true)==false) then begin
      BTRr.SerNr = NextSerNr("BankTRVc",BTRr.TransDate,-1,false,"");
      if (BTRr.SerNr>0) then begin
        RecordStore(BTRr,false);
      end;
    end;

    n = n + 1;
  end;
  
  while (TestEOF==false) begin
    inputLine = ImportField;
    if (NextImportLine(true)) then begin
    end;
  end;
  return;
end;

global
updating procedure ImpRaiffeisenBankHRV(record RcVc RepSpec)
begin
  record BankTRVc oBTRr;
  record BankTRVc BTRr;
  string 255 acctkey,balkey,ntrykey,nkey;
  string 255 sortcode,bankacc,inputLine,tstr;
  xml xdata;
  Integer n;
  record CYBlock CYb;
  record PMBlock PMb;
  row PMBlock PMbrw;
  record SRBlock SRb;

  BlockLoad(PMb);
  BlockLoad(CYb);
  BlockLoad(SRb);

  xdata = ParseXmlFile(GetImportFileName);

//acctkey = "Document/Stmt/Acct/";
//sortcode = XmlGet(xdata,"Document/BkToCstmrStmt/Stmt/Acct/Svcr/FinInstnId/BIC");
  bankacc = XmlGet(xdata,"Document/BkToCstmrStmt/Stmt/Acct/Id/IBAN");
//asuumption that file is for ONE   IBAN account

  GetBankAccPMRow(PMb,"",bankacc,PMbrw);

  acctkey = "Document/BkToCstmrStmt/Stmt/Acct/";
  balkey = "Document/BkToCstmrStmt/Stmt/Bal/";
  nkey = "Document/BkToCstmrStmt/Stmt/Ntry";

  n = 0;
  while (XmlNodeExists(xdata,nkey & "[" & n & "]")) begin
    ntrykey = nkey & "[" & n & "]/";
    RecordNew(BTRr);

    BTRr.CurncyCode = XmlGetAttribute(xdata,ntrykey & "Amt","Ccy");
    BTRr.Sum = ValFromString(XmlGet(xdata,ntrykey & "Amt"),".","");
    BTRr.TypeRef = XmlGet(xdata,ntrykey & "CdtDbtInd");
    tstr = XmlGet(xdata,ntrykey & "BookgDt/DtTm");
    if (blank(tstr)) then begin
      tstr = XmlGet(xdata,ntrykey & "BookgDt/Dt");
    end;
    BTRr.TransDate = DateFromString(tstr,"YYYY-MM-DD");

    BTRr.TRNumber = XmlGet(xdata,ntrykey & "AcctSvcrRef");
    BTRr.Comment = XmlGet(xdata,ntrykey & "NtryDtls/TxDtls/RmtInf/Strd/AddtlRmtInf");
    BTRr.Reference = XmlGet(xdata,ntrykey & "NtryDtls/TxDtls/RmtInf/Ustrd");
    tstr = XmlGet(xdata,ntrykey & "NtryDtls/TxDtls/AddtlTxInf");
    if (nonblank(tstr)) then begin
      BTRr.Reference = BTRr.Reference & " " & tstr;
    end;
//  if (blank(BTRr.Reference)) then begin
//    BTRr.Reference = BTRr.Comment;
//  end;

    switch (Left(BTRr.TypeRef,1)) begin
      case "D":
        BTRr.PayBankAcc = bankacc;
        if (blank(BTRr.PayBankAcc)) then begin
          BTRr.PayBankAcc = RepSpec.f20;
        end;
        if (blank(BTRr.PayBankAcc)) then begin
          BTRr.PayBankAcc = PMbrw.SortCode & PMbrw.BankNr;
        end;

        BTRr.PayTransDate = BTRr.TransDate;
        BTRr.PayName = CYb.CompName;
        BTRr.PayVATNr = CYb.VATNr;
        BTRr.PayRegNr1 = CYb.OrgNr;
        BTRr.RcpBankAcc = XmlGet(xdata,ntrykey & "NtryDtls/TxDtls/RltdPties/CdtrAcct/Id/IBAN");
        BTRr.RcpTransDate = BTRr.TransDate;
        BTRr.RcpName = XmlGet(xdata,ntrykey & "NtryDtls/TxDtls/RltdPties/Cdtr/Nm");
//      BTRr.RcpRegNr1 = XmlGet(xdata,ntrykey & "NtryDtls/TxDtls/RltdPties/Cdtr/Id/OrgId/Othr/Id");
        BTRr.RcpReference = XmlGet(xdata,ntrykey & "NtryDtls/TxDtls/RmtInf/Strd/CdtrRefInf/Ref");
      case "C":
        BTRr.RcpBankAcc = bankacc;
        if (blank(BTRr.RcpBankAcc)) then begin
          BTRr.RcpBankAcc = RepSpec.f20;
        end;
        if (blank(BTRr.RcpBankAcc)) then begin
          BTRr.RcpBankAcc = PMbrw.SortCode & PMbrw.BankNr;
        end;

        BTRr.RcpTransDate = BTRr.TransDate;
        BTRr.RcpName = CYb.CompName;
        BTRr.RcpVATNr = CYb.VATNr;
        BTRr.RcpRegNr1 = CYb.OrgNr;
        BTRr.PayBankAcc = XmlGet(xdata,ntrykey & "NtryDtls/TxDtls/RltdPties/DbtrAcct/Id/IBAN");
        BTRr.PayTransDate = BTRr.TransDate;
        BTRr.PayName = XmlGet(xdata,ntrykey & "NtryDtls/TxDtls/RltdPties/Dbtr/Nm");
//      BTRr.PayRegNr1 = XmlGet(xdata,ntrykey & "NtryDtls/TxDtls/RltdPties/Dbtr/Id/OrgId/Othr/Id");
        BTRr.PayReference = XmlGet(xdata,ntrykey & "NtryDtls/TxDtls/RmtInf/Strd/CdtrRefInf/Ref");
        CreateReceipt(SRb,PMbrw.Code,BTRr);
    end;

    oBTRr.TRNumber = BTRr.TRNumber;
    if (ReadFirstKey("TRNumber",oBTRr,1,true)==false) then begin
      BTRr.SerNr = NextSerNr("BankTRVc",BTRr.TransDate,-1,false,"");
      if (BTRr.SerNr>0) then begin
        RecordStore(BTRr,false);
      end;
    end;
    n = n + 1;
  end;

  while (TestEOF==false) begin
    inputLine = ImportField;
    if (NextImportLine(true)) then begin
    end;
  end;
  return;
end;

global
updating procedure ImpZGBHRV(record RcVc RepSpec)
begin
record BankTRVc oBTRr;
  record BankTRVc BTRr;
  string 255 acctkey,balkey,ntrykey,nkey;
  string 255 bankacc,inputLine,tstr;
  xml xdata;
  Integer n;
  record CYBlock CYb;
  record PMBlock PMb;
  row PMBlock PMbrw;
  record SRBlock SRb;

  BlockLoad(PMb);
  BlockLoad(CYb);
  BlockLoad(SRb);

  xdata = ParseXmlFile(GetImportFileName);

  bankacc = XmlGet(xdata,"Izvodi/Izvod/IBAN/IBANBroj");

  GetBankAccPMRow(PMb,"",bankacc,PMbrw);

  acctkey = "Izvodi/Izvod/Sekcije/Sekcija/Partija";
  balkey = "Izvodi/Izvod/Sekcije/Sekcija/PrethodnoStanje";
  nkey = "Izvodi/Izvod/Sekcije/Sekcija/Prometi/Promet";

  n = 0;
  while (XmlNodeExists(xdata,nkey & "[" & n & "]")) begin
    ntrykey = nkey & "[" & n & "]/";
    RecordNew(BTRr);

    BTRr.CurncyCode = XmlGetAttribute(xdata,ntrykey & "Amt","Ccy");
    BTRr.Sum = ValFromString(XmlGet(xdata,ntrykey & "Amt"),".","");
    BTRr.TypeRef = XmlGet(xdata,ntrykey & "CdtDbtInd");
    tstr = XmlGet(xdata,ntrykey & "BookgDt/DtTm");
    if (blank(tstr)) then begin
      tstr = XmlGet(xdata,ntrykey & "BookgDt/Dt");
    end;
    BTRr.TransDate = DateFromString(tstr,"YYYY-MM-DD");

    BTRr.TRNumber = XmlGet(xdata,ntrykey & "AcctSvcrRef");
    BTRr.Comment = XmlGet(xdata,ntrykey & "NtryDtls/TxDtls/RmtInf/Strd/AddtlRmtInf");
    BTRr.Reference = XmlGet(xdata,ntrykey & "NtryDtls/TxDtls/RmtInf/Ustrd");
    tstr = XmlGet(xdata,ntrykey & "NtryDtls/TxDtls/AddtlTxInf");
    if (nonblank(tstr)) then begin
      BTRr.Reference = BTRr.Reference & " " & tstr;
    end;
//  if (blank(BTRr.Reference)) then begin
//    BTRr.Reference = BTRr.Comment;
//  end;

    switch (Left(BTRr.TypeRef,1)) begin
      case "D":
        BTRr.PayBankAcc = bankacc;
        if (blank(BTRr.PayBankAcc)) then begin
          BTRr.PayBankAcc = RepSpec.f20;
        end;
        if (blank(BTRr.PayBankAcc)) then begin
          BTRr.PayBankAcc = PMbrw.SortCode & PMbrw.BankNr;
        end;

        BTRr.PayTransDate = BTRr.TransDate;
        BTRr.PayName = CYb.CompName;
        BTRr.PayVATNr = CYb.VATNr;
        BTRr.PayRegNr1 = CYb.OrgNr;
        BTRr.RcpBankAcc = XmlGet(xdata,ntrykey & "NtryDtls/TxDtls/RltdPties/CdtrAcct/Id/IBAN");
        BTRr.RcpTransDate = BTRr.TransDate;
        BTRr.RcpName = XmlGet(xdata,ntrykey & "NtryDtls/TxDtls/RltdPties/Cdtr/Nm");
//      BTRr.RcpRegNr1 = XmlGet(xdata,ntrykey & "NtryDtls/TxDtls/RltdPties/Cdtr/Id/OrgId/Othr/Id");
        BTRr.RcpReference = XmlGet(xdata,ntrykey & "NtryDtls/TxDtls/RmtInf/Strd/CdtrRefInf/Ref");
      case "C":
        BTRr.RcpBankAcc = bankacc;
        if (blank(BTRr.RcpBankAcc)) then begin
          BTRr.RcpBankAcc = RepSpec.f20;
        end;
        if (blank(BTRr.RcpBankAcc)) then begin
          BTRr.RcpBankAcc = PMbrw.SortCode & PMbrw.BankNr;
        end;

        BTRr.RcpTransDate = BTRr.TransDate;
        BTRr.RcpName = CYb.CompName;
        BTRr.RcpVATNr = CYb.VATNr;
        BTRr.RcpRegNr1 = CYb.OrgNr;
        BTRr.PayBankAcc = XmlGet(xdata,ntrykey & "NtryDtls/TxDtls/RltdPties/DbtrAcct/Id/IBAN");
        BTRr.PayTransDate = BTRr.TransDate;
        BTRr.PayName = XmlGet(xdata,ntrykey & "NtryDtls/TxDtls/RltdPties/Dbtr/Nm");
//      BTRr.PayRegNr1 = XmlGet(xdata,ntrykey & "NtryDtls/TxDtls/RltdPties/Dbtr/Id/OrgId/Othr/Id");
        BTRr.PayReference = XmlGet(xdata,ntrykey & "NtryDtls/TxDtls/RmtInf/Strd/CdtrRefInf/Ref");
        CreateReceipt(SRb,PMbrw.Code,BTRr);
    end;

    oBTRr.TRNumber = BTRr.TRNumber;
    if (ReadFirstKey("TRNumber",oBTRr,1,true)==false) then begin
      BTRr.SerNr = NextSerNr("BankTRVc",BTRr.TransDate,-1,false,"");
      if (BTRr.SerNr>0) then begin
        RecordStore(BTRr,false);
      end;
    end;
    n = n + 1;
  end;

  while (TestEOF==false) begin
    inputLine = ImportField;
    if (NextImportLine(true)) then begin
  end;

  end;
  return;
end;

global
updating procedure ImpErsteHRV(record RcVc RepSpec)
begin
  record BankTRVc oBTRr;
  record BankTRVc BTRr;
  string 255 acctkey,balkey,ntrykey,nkey;
  string 255 sortcode,bankacc,inputLine,tstr;
  xml xdata;
  Integer n;
  record CYBlock CYb;
  record PMBlock PMb;
  row PMBlock PMbrw;
  record SRBlock SRb;

  BlockLoad(PMb);
  BlockLoad(CYb);
  BlockLoad(SRb);

  xdata = ParseXmlFile(GetImportFileName);

//acctkey = "Document/Stmt/Acct/";
//sortcode = XmlGet(xdata,"Document/BkToCstmrStmt/Stmt/Acct/Svcr/FinInstnId/BIC");
  bankacc = XmlGet(xdata,"Document/BkToCstmrStmt/Stmt/Acct/Id/IBAN");
//asuumption that file is for ONE   IBAN account

  GetBankAccPMRow(PMb,"",bankacc,PMbrw);

  acctkey = "Document/BkToCstmrStmt/Stmt/Acct/";
  balkey = "Document/BkToCstmrStmt/Stmt/Bal/";
  nkey = "Document/BkToCstmrStmt/Stmt/Ntry";

  n = 0;
  while (XmlNodeExists(xdata,nkey & "[" & n & "]")) begin
    ntrykey = nkey & "[" & n & "]/";
    RecordNew(BTRr);

    BTRr.CurncyCode = XmlGetAttribute(xdata,ntrykey & "Amt","Ccy");
    BTRr.Sum = ValFromString(XmlGet(xdata,ntrykey & "Amt"),".","");
    BTRr.TypeRef = XmlGet(xdata,ntrykey & "CdtDbtInd");
    tstr = XmlGet(xdata,ntrykey & "BookgDt/DtTm");
    if (blank(tstr)) then begin
      tstr = XmlGet(xdata,ntrykey & "BookgDt/Dt");
    end;
    BTRr.TransDate = DateFromString(tstr,"YYYY-MM-DD");

    BTRr.TRNumber = XmlGet(xdata,ntrykey & "AcctSvcrRef");
    BTRr.Comment = XmlGet(xdata,ntrykey & "NtryDtls/TxDtls/RmtInf/Strd/AddtlRmtInf");
    BTRr.Reference = XmlGet(xdata,ntrykey & "NtryDtls/TxDtls/RmtInf/Ustrd");
    tstr = XmlGet(xdata,ntrykey & "NtryDtls/TxDtls/AddtlTxInf");
    if (nonblank(tstr)) then begin
      BTRr.Reference = BTRr.Reference & " " & tstr;
    end;
//  if (blank(BTRr.Reference)) then begin
//    BTRr.Reference = BTRr.Comment;
//  end;

    switch (Left(BTRr.TypeRef,1)) begin
      case "D":
        BTRr.PayBankAcc = bankacc;
        if (blank(BTRr.PayBankAcc)) then begin
          BTRr.PayBankAcc = RepSpec.f20;
        end;
        if (blank(BTRr.PayBankAcc)) then begin
          BTRr.PayBankAcc = PMbrw.SortCode & PMbrw.BankNr;
        end;

        BTRr.PayTransDate = BTRr.TransDate;
        BTRr.PayName = CYb.CompName;
        BTRr.PayVATNr = CYb.VATNr;
        BTRr.PayRegNr1 = CYb.OrgNr;
        BTRr.RcpBankAcc = XmlGet(xdata,ntrykey & "NtryDtls/TxDtls/RltdPties/CdtrAcct/Id/IBAN");
        BTRr.RcpTransDate = BTRr.TransDate;
        BTRr.RcpName = XmlGet(xdata,ntrykey & "NtryDtls/TxDtls/RltdPties/Cdtr/Nm");
//      BTRr.RcpRegNr1 = XmlGet(xdata,ntrykey & "NtryDtls/TxDtls/RltdPties/Cdtr/Id/OrgId/Othr/Id");
        BTRr.RcpReference = XmlGet(xdata,ntrykey & "NtryDtls/TxDtls/RmtInf/Strd/CdtrRefInf/Ref");
      case "C":
        BTRr.RcpBankAcc = bankacc;
        if (blank(BTRr.RcpBankAcc)) then begin
          BTRr.RcpBankAcc = RepSpec.f20;
        end;
        if (blank(BTRr.RcpBankAcc)) then begin
          BTRr.RcpBankAcc = PMbrw.SortCode & PMbrw.BankNr;
        end;

        BTRr.RcpTransDate = BTRr.TransDate;
        BTRr.RcpName = CYb.CompName;
        BTRr.RcpVATNr = CYb.VATNr;
        BTRr.RcpRegNr1 = CYb.OrgNr;
        BTRr.PayBankAcc = XmlGet(xdata,ntrykey & "NtryDtls/TxDtls/RltdPties/DbtrAcct/Id/IBAN");
        BTRr.PayTransDate = BTRr.TransDate;
        BTRr.PayName = XmlGet(xdata,ntrykey & "NtryDtls/TxDtls/RltdPties/Dbtr/Nm");
//      BTRr.PayRegNr1 = XmlGet(xdata,ntrykey & "NtryDtls/TxDtls/RltdPties/Dbtr/Id/OrgId/Othr/Id");
        BTRr.PayReference = XmlGet(xdata,ntrykey & "NtryDtls/TxDtls/RmtInf/Strd/CdtrRefInf/Ref");
        CreateReceipt(SRb,PMbrw.Code,BTRr);
    end;

    oBTRr.TRNumber = BTRr.TRNumber;
    if (ReadFirstKey("TRNumber",oBTRr,1,true)==false) then begin
      BTRr.SerNr = NextSerNr("BankTRVc",BTRr.TransDate,-1,false,"");
      if (BTRr.SerNr>0) then begin
        RecordInsert(BTRr,false);//CUST RecordStore>>RecordInsert
      end;
    end;
    n = n + 1;
  end;

  while (TestEOF==false) begin
    inputLine = ImportField;
    if (NextImportLine(true)) then begin
    end;
  end;
  return;
end;

updating procedure XMLBankTRIn(record RcVc RepSpec)
begin
  switch (RepSpec.flags[20]) begin
    case kReceiptBankSwedBankLithuania: ImpSwedBankLTU(RepSpec);
    case kReceiptBankSEBLithuania: ImpSEBLTU(RepSpec);
    case kReceiptBankRaiffeisenCroatia: ImpRaiffeisenBankHRV(RepSpec);
    case kReceiptBankZGBCroatia: ImpZGBHRV(RepSpec);
    case kReceiptBankErsteCroatia:  ImpErsteHRV(RepSpec);

    otherwise
      while (TestEOF==false) begin
        if (NextImportLine(true)) then begin
        end;
      end;

  end;
  return;
end;


updating procedure OFXBankTRIn(record RcVc RepSpec)
begin
  record CYBlock CYb;
  record PMBlock PMb;
  row PMBlock PMbrw;
  xml xdata;
  string 255 tstr,xkeytr,xkey;
  string 255 crncy,sortcode,bankacc;
  record BankTRVc BTRr;
  LongInt l;
  
  BlockLoad(CYb);
  BlockLoad(PMb);
  xdata = ParseXMLFile(GetImportFileName);
  xkey = "OFX/BANKMSGSRSV1/STMTTRNRS/STMTRS/";
  crncy = XmlGet(xdata,xkey & "CURDEF");

  sortcode = XmlGet(xdata,xkey & "BANKACCTFROM/BANKID");
  bankacc = XmlGet(xdata,xkey & "BANKACCTFROM/ACCTID");
  GetBankAccPMRow(PMb,sortcode,bankacc,PMbrw);

  xkey = "OFX/BANKMSGSRSV1/STMTTRNRS/STMTRS/BANKTRANLIST";
  
  l = 0;
  while (XmlNodeExists(xdata,xkey & "/STMTTRN[" & l & "]")) begin
    xkeytr = xkey & "/STMTTRN[" & l & "]/";

    RecordNew(BTRr);
    BTRr.CurncyCode = crncy;
    BTRr.TypeRef = XmlGet(xdata,xkeytr & "TRNTYPE");
    BTRr.TransDate = DateFromString(XmlGet(xdata,xkeytr & "DTPOSTED"),"YYYYMMDD");
    BTRr.Sum = ValFromString(XmlGet(xdata,xkeytr & "TRNAMT"),".","");
    BTRr.OffReference = XmlGet(xdata,xkeytr & "CHECKNUM");
    BTRr.Reference = XmlGet(xdata,xkeytr & "NAME");
    BTRr.Comment = XmlGet(xdata,xkeytr & "MEMO");
    
    switch (Left(BTRr.TypeRef,1)) begin
      case "D":
        BTRr.PayBankAcc = PMbrw.SortCode & PMbrw.BankNr;
        if (blank(BTRr.PayBankAcc)) then begin
          BTRr.PayBankAcc = RepSpec.f20;
        end;
        BTRr.PayTransDate = BTRr.TransDate;
        BTRr.PayName = CYb.CompName;
        BTRr.PayReference = BTRr.Reference;
        BTRr.PayVATNr = CYb.VATNr;
        BTRr.PayRegNr1 = CYb.OrgNr;
      case "C":
        BTRr.RcpBankAcc = PMbrw.SortCode & PMbrw.BankNr;
        if (blank(BTRr.RcpBankAcc)) then begin
          BTRr.RcpBankAcc = RepSpec.f20;
        end;
        BTRr.RcpTransDate = BTRr.TransDate;
        BTRr.RcpName = CYb.CompName;
        BTRr.RcpReference = BTRr.Reference;
        BTRr.RcpVATNr = CYb.VATNr;
        BTRr.RcpRegNr1 = CYb.OrgNr;
    end;
    
    BTRr.SerNr = NextSerNr("BankTRVc",BTRr.TransDate,-1,false,"");
    if (BTRr.SerNr>0) then begin
      RecordStore(BTRr,false);
    end;
    l = l + 1;
  end;

  while (TestEOF==false) begin
    tstr = ImportField;
    if (NextImportLine(true)) then begin
    end;
  end;
  return;
end;

function string 255 ImportColumn(record CYBlock CYb,string inline,Integer col,string specbankacc,string fsep,string coldata,string dateformat,string decsep,string thosep,var record BankTRVc BTRr)
begin
  string 255 data,bankacc;
  Integer i;
  LongInt pos;

  pos = 0;
  while (i<col) begin
    GetNextSubstring(inline,pos,fsep,data);
    i = i + 1;
  end;
  data = StripCharacter(data,"""");
  if (nonblank(data)) then begin
    switch (SetFromString(621,coldata)) begin
      case kBankTRFileColumnDate:
        BTRr.TransDate = DateFromString(data,dateformat);
      case kBankTRFileColumnTime:
  //      BTRr.TransTime = TimeFromString(data,"HHMMSS");
      case kBankTRFileColumnReference:
        BTRr.Reference = data;
      case kBankTRFileColumnType:
        BTRr.TypeRef = data;
      case kBankTRFileColumnStatus:
      case kBankTRFileColumnCurrency:
        BTRr.CurncyCode = data;
      case kBankTRFileColumnAmount:
        BTRr.Sum = ValFromString(data,decsep,"");
        if (BTRr.Sum>=0) then begin
          BTRr.TypeRef = "C";
        end else begin
          BTRr.TypeRef = "D";
        end;
      case kBankTRFileColumnReceipID:
        BTRr.OrdNumber = data;
      case kBankTRFileColumnBalance:
      case kBankTRFileColumnComment:
        BTRr.Comment = data;
      case kBankTRFileColumnBankAcc:
        bankacc = data;
    end;
    switch (Left(BTRr.TypeRef,1)) begin
      case "D":
        BTRr.PayBankAcc = bankacc;
        if (blank(BTRr.PayBankAcc)) then begin
          BTRr.PayBankAcc = specbankacc;
        end;
        BTRr.PayTransDate = BTRr.TransDate;
        BTRr.PayName = CYb.CompName;
        BTRr.PayReference = BTRr.Reference;
        BTRr.PayVATNr = CYb.VATNr;
        BTRr.PayRegNr1 = CYb.OrgNr;
      case "C":
        BTRr.RcpBankAcc = bankacc;
        if (blank(BTRr.RcpBankAcc)) then begin
          BTRr.RcpBankAcc = specbankacc;
        end;
        BTRr.RcpTransDate = BTRr.TransDate;
        BTRr.RcpName = CYb.CompName;
        BTRr.RcpReference = BTRr.Reference;
        BTRr.RcpVATNr = CYb.VATNr;
        BTRr.RcpRegNr1 = CYb.OrgNr;
    end;
  end;
  return;
end;

global
updating procedure CSVBankTRIn(record RcVc RepSpec)
begin
  string 255 inline;
  record BankTRVc BTRr;
  Integer col;
  record CYBlock CYb;
    
  BlockLoad(CYb);
  if (RepSpec.flags[0]!=0) then begin
    NextImportLine(true);
  end;
  while (TestEOF==false) begin
    inline = ImportField;
    RecordNew(BTRr);
    col = 1;
    ImportColumn(CYb,inline,col,RepSpec.f20,RepSpec.AccStr,RepSpec.f1,RepSpec.Stext,RepSpec.FirstAcc,RepSpec.LastAcc,BTRr); col = col + 1;
    ImportColumn(CYb,inline,col,RepSpec.f20,RepSpec.AccStr,RepSpec.f2,RepSpec.Stext,RepSpec.FirstAcc,RepSpec.LastAcc,BTRr); col = col + 1;
    ImportColumn(CYb,inline,col,RepSpec.f20,RepSpec.AccStr,RepSpec.f3,RepSpec.Stext,RepSpec.FirstAcc,RepSpec.LastAcc,BTRr); col = col + 1;
    ImportColumn(CYb,inline,col,RepSpec.f20,RepSpec.AccStr,RepSpec.f4,RepSpec.Stext,RepSpec.FirstAcc,RepSpec.LastAcc,BTRr); col = col + 1;
    ImportColumn(CYb,inline,col,RepSpec.f20,RepSpec.AccStr,RepSpec.f5,RepSpec.Stext,RepSpec.FirstAcc,RepSpec.LastAcc,BTRr); col = col + 1;
    ImportColumn(CYb,inline,col,RepSpec.f20,RepSpec.AccStr,RepSpec.f6,RepSpec.Stext,RepSpec.FirstAcc,RepSpec.LastAcc,BTRr); col = col + 1;
    ImportColumn(CYb,inline,col,RepSpec.f20,RepSpec.AccStr,RepSpec.f7,RepSpec.Stext,RepSpec.FirstAcc,RepSpec.LastAcc,BTRr); col = col + 1;
    ImportColumn(CYb,inline,col,RepSpec.f20,RepSpec.AccStr,RepSpec.f8,RepSpec.Stext,RepSpec.FirstAcc,RepSpec.LastAcc,BTRr); col = col + 1;
    ImportColumn(CYb,inline,col,RepSpec.f20,RepSpec.AccStr,RepSpec.f9,RepSpec.Stext,RepSpec.FirstAcc,RepSpec.LastAcc,BTRr); col = col + 1;
    ImportColumn(CYb,inline,col,RepSpec.f20,RepSpec.AccStr,RepSpec.f10,RepSpec.Stext,RepSpec.FirstAcc,RepSpec.LastAcc,BTRr); col = col + 1;

    if (BTRr.Sum!=0) then begin
      BTRr.SerNr = NextSerNr("BankTRVc",BTRr.TransDate,-1,false,"");
      if (BTRr.SerNr>0) then begin
        RecordStore(BTRr,false);
      end;
    end;
    if (NextImportLine(true)) then begin
    end;
  end;
  return;
end;

global
updating procedure BankTRIn(record RcVc RepSpec)
begin
  switch (RepSpec.ArtMode) begin
    case 0: OFXBankTRIn(RepSpec);
    case 1: CSVBankTRIn(RepSpec);
    case 2: XMLBankTRIn(RepSpec);
  end;
  return;
end;
