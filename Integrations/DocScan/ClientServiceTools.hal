//<halrule>server-only</halrule>
//Using hardcoded ip address in the beginning
external procedure ReadScanDocFile(area,Integer,string,Longint,string,Date,var vector string,var Boolean);
external procedure CompanyHasData(string,string,string,Longint,string,Date,var array Date,var array val,var array Integer,var array Longint,var Boolean);
external procedure CompanyGetData(string,string,Longint,var area,string,Longint,string,Date,var Boolean);
external procedure CompanyStoreData(string,string,area,Integer,string,Longint,string,Date,var Boolean);
external procedure DoEBSSendPrintDocument(vector string,area,var area,string,Longint,string,Date,var Boolean);
external procedure ReadScanDocFileBankStatement(area,Integer,string,Longint,string,Date,var vector string,var array Date,var array string,var array val,var array string,var Longint,var Boolean);
external procedure FactInvoiceUploadFileCallBack(Longint,record DummyAttachVc,vector string);

function string 255 GetServiceIPAddress()
begin
  string 255 ip;
  
  ip = "80.79.119.36:1402";
  if (TestEnablerFile("EnLocalhost")) then begin  
    ip = "127.0.0.1:1402";
  end;

  GetServiceIPAddress = ip;
  return;
end;

global
function Boolean SendScanDocFile(area a,Integer type,var vector string vVals)
begin
  record InternetEnablerBlock IEb;
  record ModuleBlock Mb;
  Boolean res;
  string 255 ip;

  BlockLoad(IEb);
  BlockLoad(Mb);
  ip = GetServiceIPAddress;
  
  CallService(ip).ReadScanDocFile(a,type,IEb.CustomerCode,IEb.Contract,Mb.TheKeyStr,Mb.ValidUntil,vVals,res);
  
  SendScanDocFile = res;
  return;
end;

global
updating function Boolean MainReadRecordLink(record DummyAttachVc DAr,Integer num,var record Attach2Vc Attachr,var record RLinkVc RLr)
begin
  Boolean res;

  if (ReadRecordLink(DAr,num,Attachr,RLr)) then begin
    res = true;
  end;

  MainReadRecordLink = res;
  return;
end;

global
procedure SendScanDocFile2(record DummyAttachVc DAr,record RcVc RepSpec,Integer type)
begin
  record InternetEnablerBlock IEb;
  record ModuleBlock Mb;
  string 255 ip;
  area a;
  Longint blocklen;
  record Attach2Vc Attachr;
  record RLinkVc RLr;
  Longint retries;
  vector string 255 vVals;
  Boolean res;
  
  res = false;
  BlockLoad(IEb);
  BlockLoad(Mb);
  ip = GetServiceIPAddress;
  while (retries<20) begin
    if (qupdating.MainReadRecordLink(DAr,1,Attachr,RLr)) then begin
      if (Attachr.Uploading==0) then begin
        goto LSendScanDocFile2;
      end;
    end;
    retries = retries + 1;
    Sleep(1);
  end;

LSendScanDocFile2:;
  blocklen = AttachFileSize(Attachr);
  LoadAttachFilePartToArea(Attachr,0,blocklen,a);
  CallService(ip).ReadScanDocFile(a,type,IEb.CustomerCode,IEb.Contract,Mb.TheKeyStr,Mb.ValidUntil,vVals,res);
  ClientRemoteAsync.FactInvoiceUploadFileCallBack(RepSpec.long1,DAr,vVals);
  
  return;
end;

global
function Boolean CheckIfCompanyInfoAvailable(string regnr,string country,var array Date arrDate,var array val arrAmount,var array Integer arrSource,var array Longint arrID)
begin
  record InternetEnablerBlock IEb;
  record ModuleBlock Mb;
  Boolean res;
  string 255 ip;


  BlockLoad(IEb);
  BlockLoad(Mb);
  ip = GetServiceIPAddress;
  
  CallService(ip).CompanyHasData(regnr,country,IEb.CustomerCode,IEb.Contract,Mb.TheKeyStr,Mb.ValidUntil,arrDate,arrAmount,arrSource,arrID,res);

  CheckIfCompanyInfoAvailable = res;
  return;
end;

global
function Boolean GetExistingCompanyInfo(string regnr,string country,Longint id,var area comparea)
begin
  record InternetEnablerBlock IEb;
  record ModuleBlock Mb;
  Boolean res;
  string 255 ip;


  BlockLoad(IEb);
  BlockLoad(Mb);
  ip = GetServiceIPAddress;
  
  CallService(ip).CompanyGetData(regnr,country,id,comparea,IEb.CustomerCode,IEb.Contract,Mb.TheKeyStr,Mb.ValidUntil,res);

  GetExistingCompanyInfo = res;
  return;
end;

global
procedure SendCompanyInfo(string regnr,string country,Integer source,var area comparea)
begin
  record InternetEnablerBlock IEb;
  record ModuleBlock Mb;
  Boolean res;
  string 255 ip;


  BlockLoad(IEb);
  BlockLoad(Mb);
  ip = GetServiceIPAddress;
  CallService(ip).CompanyStoreData(regnr,country,comparea,source,IEb.CustomerCode,IEb.Contract,Mb.TheKeyStr,Mb.ValidUntil,res);

  //we should retry if it fails...

  return;
end;


global
procedure EBSSendPrintDocument(vector string values,area template,var area pdffile)
begin
  record InternetEnablerBlock IEb;
  record ModuleBlock Mb;
  Boolean res;
  string 255 ip;


  BlockLoad(IEb);
  BlockLoad(Mb);
  ip = GetServiceIPAddress;
  CallService(ip).DoEBSSendPrintDocument(values,template,pdffile,IEb.CustomerCode,IEb.Contract,Mb.TheKeyStr,Mb.ValidUntil,res);

  //we should retry if it fails...

  return;
end;
/*
global
procedure EBSSendPrintDocument(area filearea,var vector string vCat,var array Date arrDate,var array string arrText,var array val arrVal,var array string arrCat,var Longint statement)
begin
  record InternetEnablerBlock IEb;
  record ModuleBlock Mb;
  Boolean res;
  string 255 ip;


  BlockLoad(IEb);
  BlockLoad(Mb);
  ip = GetServiceIPAddress;
  CallService(ip).ReadScanDocFileBankStatement(filearea,2,IEb.CustomerCode,IEb.Contract,Mb.TheKeyStr,Mb.ValidUntil,vCat,arrDate,arrText,arrVal,arrCat,statement,res);

  return;
end;
*/