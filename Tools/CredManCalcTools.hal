external inner function val GetCredManRate(Integer,string,val,Date);
external inner function LongInt DateDiff(Date,Date);
external inner function roundmode SetRoundModeD(Integer);
external inner function LongInt MonthDiff(Date,Date);

enum begin
  kEventTypeNone = 0,
  kEventTypeCalcInstalment = 1,
  kEventTypeCalcInterest = 2,
  kEventTypeCalcDeposit = 3,
  kEventTypeCalcFees = 4,
  kEventTypeIssueInstalment = 5,
  kEventTypeIssueInterest = 6,
  kEventTypeIssueDeposit = 7,
  kEventTypeIssueFees = 8,
  kEventTypePaidInterest = 13,
  kEventTypePaidInstalment = 14,
  kEventTypePaidDeposit = 15,
  kEventTypePaidFees = 16,
  kEventTypePartialBuyout = 17,
end;

enum begin
  kPlannedFeesMonthly = 0,
  kPlannedFeesOneTime = 1
end;

//This is used to get correct amounts (fees and interest) for first and last months (as they need to be different)
enum begin
  kMonthTypeFirst = 0,
  kMonthTypeRegular = 1,
  kMonthTypeLast = 2
end;

procedure CalcCredManCurrentPeriod(record CredManVc CredManr,Integer paymentnr,var Date sdp,var Date edp,var Date invd)
begin

  if (paymentnr==-1) then begin
    sdp = CredManr.startDate;
    edp = CredManr.FirstInvDate;
    invd = CredManr.FirstInvDate;
  end else begin
    sdp = AddMonth(CredManr.startDate,paymentnr);
    if (nonblankdate(CredManr.FirstInvDate)) then begin
      sdp = AddMonth(CredManr.FirstInvDate,paymentnr); //  - 1
    end;
    edp = AddMonth(sdp,1);
    invd = AddMonth(sdp,1);
    sdp = AddDay(sdp,1);
  end;
  return;
end;

function val GetAmount(record CredManVc CredManr)
begin
  val res;

  res = CredManr.InvSum4 - CredManr.DepositSum;
  
  GetAmount = res;
  return;
end;

function val GetRateAmount(record CredManVc CredManr,val rate,Integer monthtypef,Date frdate,Date todate,val calcbal)
begin
  record CMApplicationSetBlock CMb;
  val days,res;
  Integer months;

  switch (monthtypef) begin
    case kMonthTypeFirst:
      BlockLoad(CMb);
      days = DateDiff(todate,frdate);
      months = MonthDiff(frdate,todate);
      if (frdate.Day!=todate.Day) then begin
        months = months - 1;//MonthDiff returns +1 if there are extra days
      end;
      if (months>0 and CMB.DaysInMonth==0) then begin
        days = DateDiff(todate,AddMonth(frdate,months));
        res = GetAmount(CredManr)*(rate/100)*months;
        res = res + (GetAmount(CredManr)*(rate/100)*12/CMb.DaysInYear*days);
      end else begin
        res = GetAmount(CredManr)*(rate/100)*12/CMb.DaysInYear*days;
      end;
    case kMonthTypeRegular:
      res = GetAmount(CredManr)*(rate/100);    
    case kMonthTypeLast:
      res = calcbal*(rate/100);    
  end;

  GetRateAmount = res;
  return;
end;

function Boolean MonthlyChargeType(Integer chargetype)
begin
  Boolean res;

  if (chargetype==1 or chargetype==3) then begin
    res = true;
  end;
  
  MonthlyChargeType = res;
  return;
end;

function Boolean CalculatedChargeType(Integer chargetype)
begin
  Boolean res;

  if (chargetype==2 or chargetype==3) then begin
    res = true;
  end;
  
  CalculatedChargeType = res;
  return;
end;

function Boolean TypeAffectsBalance(Integer type)
begin
  Boolean res;

  switch (type) begin
    case kEventTypeCalcInstalment:  res = true;
    case kEventTypeIssueInstalment: res = true;
    case kEventTypeIssueDeposit:    res = true;
    case kEventTypeCalcDeposit:     res = true;
    case kEventTypePartialBuyout:   res = true;
  end;
  
  TypeAffectsBalance = res;
  return;
end;

function Boolean TypeAffectsInterest(Integer type)
begin
  Boolean res;

  switch (type) begin
    case kEventTypeCalcInterest:  res = true;
    case kEventTypeIssueInterest: res = true;
  end;
  
  TypeAffectsInterest = res;
  return;
end;

procedure AddCredPayPlanLine(record CredManPayPlanVc CredManPayPlanr,Date transdate,string item,string itemname,Integer type,val sum,val reb,var val acumint,var val calcbal,Date frdate,Date todate,Longint histnr,Longint factinv,val openamount)
begin
  row CredManPayPlanVc CredManPayPlanrw;
  val v;
  
  v = Round(sum,SetRoundModeD(2));//round(sum,SetRoundModeD(rounding));//CredManr.DepositSum,CredManSetb.DepositRoundOff
  if (v!=0) then begin
    CredManPayPlanrw.ArtCode = item;
    CredManPayPlanrw.Spec = itemname;
    CredManPayPlanrw.TransDate = transdate;
    CredManPayPlanrw.PlanType = type;
    CredManPayPlanrw.Sum = v;
    CredManPayPlanrw.Reb = reb;
    CredManPayPlanrw.FromDate = frdate;
    CredManPayPlanrw.ToDate = todate;
    CredManPayPlanrw.IssuedNr = histnr;
    CredManPayPlanrw.FactoringInvoice = factinv;
    if (TypeAffectsInterest(type)) then begin
      CredManPayPlanrw.AcumulatedInt = acumint + v;
    end else begin
      CredManPayPlanrw.AcumulatedInt = acumint;
    end;
    if (TypeAffectsBalance(type)) then begin
      CredManPayPlanrw.Bal = calcbal - v;
    end else begin
      CredManPayPlanrw.Bal = calcbal;
    end;
    CredManPayPlanrw.OpenAmount = openamount;
    MatRowPut(CredManPayPlanr,MatRowCnt(CredManPayPlanr),CredManPayPlanrw);
    acumint = CredManPayPlanrw.AcumulatedInt;
    calcbal = CredManPayPlanrw.Bal;
  end;

  return;
end;

global
procedure AddInterest(record CredManVc CredManr,record CredManPayPlanVc CredManPayPlanr,record CredManSetBlock CMb,Integer monthtypef,Date invdate,var val acumint,var val calcbal,Date frdate,Date todate,Longint factinv)
begin

  AddCredPayPlanLine(CredManPayPlanr,invdate,CMb.RateItem,"",kEventTypeCalcInterest,GetRateAmount(CredManr,CredManr.IntRate,monthtypef,frdate,todate,calcbal),0,acumint,calcbal,frdate,todate,-1,factinv,0);

  return;
end;

global
procedure AddInterestDelay(record CredManVc CredManr,record CredManPayPlanVc CredManPayPlanr,record CredManSetBlock CMb,Integer monthtypef,Date invdate,var val acumint,var val calcbal,Date frdate,Date todate,Longint factinv)
begin

  AddCredPayPlanLine(CredManPayPlanr,invdate,CMb.RateItem,"",kEventTypeCalcInterest,GetRateAmount(CredManr,CredManr.PrincipleDelayInterest,monthtypef,frdate,todate,calcbal),0,acumint,calcbal,frdate,todate,-1,factinv,0);

  return;
end;

global
procedure AddPlannedFees(record CredManVc CredManr,record CredManPayPlanVc CredManPayPlanr,record CredManSetBlock CMb,Integer type,Integer monthtypef,Date invdate,var val acumint,var val calcbal,Date frdate,Date todate,Longint factinv)
begin
  Integer i,rwcnt;
  row CredManVc CredManrw;

  rwcnt = MatRowCnt(CredManr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(CredManr,i,CredManrw);
    if ((type==kPlannedFeesMonthly and MonthlyChargeType(CredManrw.ChargeType)) or 
        (type==kPlannedFeesOneTime and MonthlyChargeType(CredManrw.ChargeType)==false)) then begin
      if (CalculatedChargeType(CredManrw.ChargeType)) then begin
        AddCredPayPlanLine(CredManPayPlanr,invdate,CredManrw.ArtCode,"",kEventTypeCalcFees,GetRateAmount(CredManr,CredManrw.vRebate,monthtypef,frdate,todate,calcbal),0,acumint,calcbal,frdate,todate,-1,factinv,0);
      end else begin
        AddCredPayPlanLine(CredManPayPlanr,invdate,CredManrw.ArtCode,"",kEventTypeCalcFees,CredManrw.Price,CredManrw.vRebate,acumint,calcbal,frdate,todate,-1,factinv,0);
      end;
    end;
  end;
  
  return;
end;

procedure AddDeposit(record CredManVc CredManr,record CredManPayPlanVc CredManPayPlanr,record CredManSetBlock CMb,Date invdate,var val acumint,var val calcbal,Date frdate,Date todate)
begin
  
  AddCredPayPlanLine(CredManPayPlanr,invdate,CMb.DepositItem,"",kEventTypeCalcDeposit,CredManr.DepositSum,0,acumint,calcbal,frdate,todate,-1,-1,0);

  return;
end;


global
function val FIN_PMT(val monthly_rate, integer payments, val total_sum)
begin
  val t, t2;
  t = monthly_rate * (total_sum * power(1 + monthly_rate, payments)) / (power(1 + monthly_rate, payments) - 1);

  FIN_PMT = t;
  return;
end;

function val FIN_PPMT(val monthly_rate, integer payments, val total_sum, integer payment_nr)
begin
  val res, t, c;


  c = Round(-FIN_PMT(monthly_rate, payments, total_sum),SetRoundModeD(2));//monthly payment. 
  res = c + (c * (power(1 + monthly_rate, payment_nr-1) - 1) / monthly_rate + total_sum * power(1 + monthly_rate, payment_nr-1)) * monthly_rate;

  FIN_PPMT = -res;
  return;
end;

function val GetCurrentMonthPayment(record CredManPayPlanVc CredManPayPlanr,Date invdate,val sum)
begin
  Integer i,rwcnt;
  row CredManPayPlanVc CredManPayPlanrw;
  val res;
  
  rwcnt = MatRowCnt(CredManPayPlanr);
  for (i=rwcnt-1;i>0;i=i-1) begin
    MatRowGet(CredManPayPlanr,i,CredManPayPlanrw);
    if (CredManPayPlanrw.TransDate==invdate) then begin
      res = res + CredManPayPlanrw.Sum;
    end else begin
      i = -1;
    end;
  end;
  res = res + sum;

  GetCurrentMonthPayment = res;
  return;
end;

function Boolean LinearInstalment(Integer type)
begin
  Boolean res;

  switch (type) begin
    case 1: res = true;
    case 2: res = true;
    case 6: res = true;
  end;

  LinearInstalment = res;
  return;
end;

procedure AddInstalment(record CredManVc CredManr,record CredManPayPlanVc CredManPayPlanr,record CredManSetBlock CMb,Integer type,Integer monthtypef,Date invdate,var val acumint,var val calcbal,Date frdate,Date todate,Integer month)
begin
  val sum,curpayment;
  Integer months;
  
  switch (type) begin
    case 0:
      AddCredPayPlanLine(CredManPayPlanr,invdate,CMb.InstalmentItem,"",kEventTypeCalcInstalment,CredManr.InvSum4,0,acumint,calcbal,frdate,todate,-1,-1,0);
    case 1:
      if (monthtypef==kMonthTypeLast) then begin
        AddCredPayPlanLine(CredManPayPlanr,invdate,CMb.InstalmentItem,"",kEventTypeCalcInstalment,calcbal,0,acumint,calcbal,frdate,todate,-1,-1,0);
      end else begin
        //for max monthly payments we need to check the instalment amount. 
        sum = (CredManr.InvSum4-CredManr.DepositSum)/CredManr.InstalmentMonths;
        if (LinearInstalment(CredManr.InstalmentType) and CredManr.MaxMonthlyPayment>0) then begin
          //get current month payment
          curpayment = GetCurrentMonthPayment(CredManPayPlanr,invdate,sum);
          if (CredManr.MaxMonthlyPayment<curpayment) then begin
            sum = CredManr.MaxMonthlyPayment-(curpayment-sum);
          end;
        end;
        AddCredPayPlanLine(CredManPayPlanr,invdate,CMb.InstalmentItem,"",kEventTypeCalcInstalment,sum,0,acumint,calcbal,frdate,todate,-1,-1,0);
      end;
    case 2:
      if (monthtypef==kMonthTypeLast) then begin
        AddCredPayPlanLine(CredManPayPlanr,invdate,CMb.InstalmentItem,"",kEventTypeCalcInstalment,calcbal,0,acumint,calcbal,frdate,todate,-1,-1,0);
      end else begin
        sum = FIN_PPMT(CredManr.IntRate/100, CredManr.InstalmentMonths, (CredManr.InvSum4-CredManr.DepositSum), (month+1));
        if (CredManr.MaxMonthlyPayment>0) then begin
          curpayment = GetCurrentMonthPayment(CredManPayPlanr,invdate,sum);
          if (CredManr.MaxMonthlyPayment<curpayment) then begin
            sum = CredManr.MaxMonthlyPayment-(curpayment-sum);
          end;
        end;
        AddCredPayPlanLine(CredManPayPlanr,invdate,CMb.InstalmentItem,"",kEventTypeCalcInstalment,sum,0,acumint,calcbal,frdate,todate,-1,-1,0);
      end;
  end;
 return;
end;

global
procedure AddInstalmentFixed(record CredManVc CredManr,record CredManPayPlanVc CredManPayPlanr,record CredManSetBlock CMb,val amount,Date invdate,var val acumint,var val calcbal,Date frdate,Date todate)
begin
  
  AddCredPayPlanLine(CredManPayPlanr,invdate,CMb.InstalmentItem,"",kEventTypeCalcInstalment,amount,0,acumint,calcbal,frdate,todate,-1,-1,0);

  return;
end;

function Integer GetCredHistType(string artcode,Boolean paidflag)
begin
  record CredManSetBlock CMSb;
  Integer res;

  res = 0;
  BlockLoad(CMSb);
  if (artcode==CMSb.InstalmentItem) then begin
    if (paidflag) then begin
      res = kEventTypePaidInstalment;
    end else begin
      res = kEventTypeIssueInstalment;
    end;
  end else begin
    if (artcode==CMSb.RateItem) then begin
      if (paidflag) then begin
        res = kEventTypePaidInterest;
      end else begin
        res = kEventTypeIssueInterest;
      end;
    end else begin
      if (artcode==CMSb.DepositItem) then begin
        if (paidflag) then begin
          res = kEventTypePaidDeposit;
        end else begin
          res = kEventTypeIssueDeposit;
        end;
      end else begin
        if (paidflag) then begin
          res = kEventTypePaidFees;
        end else begin
          res = kEventTypeIssueFees;
        end;
      end;
    end;
  end;

  GetCredHistType = res;
  return;
end;

function Boolean IsInitialInvoice(record CredManVc CredManr,Date transdate,Longint lastrecnr,Boolean firstinvf)
begin
  Boolean res;

  if (CredManr.startDate==transdate or CredManr.FirstInvDate>transdate) then begin
    if (lastrecnr==-1 or firstinvf) then begin
      res = true;
    end;
  end;
  
  IsInitialInvoice = res;
  return;
end;

procedure AddActualsToPlan(record CredManVc CredManr,var record CredmanPayPlanVc CredManPayPlanr,var Integer calculatedmonths,var val acumint,var val calcbal,var Boolean firstinvf,record CredManSetBlock CredManSetb,var Integer months)
begin
  record CredHistVc CredHistr,PrevCredHistr;
  Boolean TrHs;
  Integer type;
  Longint lastrecnr;
  vector Boolean vFirstInv;
  val monthlypayment,buyoutamount,openamount;
  Integer reducemonths;

  firstinvf = false;
  calculatedmonths = 0;
  TrHs = true;
  CredHistr.CredManNr = CredManr.SerNr;
  while (LoopKey("CredManTypeDate",CredHistr,1,TrHs)) begin
    if (CredHistr.CredManNr!=CredManr.SerNr) then begin
      TrHs = false;
    end else begin
 //     if (CredHistr.RecordType==0) then begin
        openamount = 0;
        switch (CredHistr.RecordType) begin
          case 0: 
            type = GetCredHistType(CredHistr.ArtCode,false); 
            openamount = CredHistr.Sum-CredHistr.PaidSum;
          case 4: 
            type = kEventTypePartialBuyout;
            buyoutamount = buyoutamount + CredHistr.Sum;
          otherwise
            PrevCredHistr.SerNr = CredHistr.PreviousNr;
            ReadFirstMain(PrevCredHistr,1,true);
            type = GetCredHistType(PrevCredHistr.ArtCode,true);          
        end;
        AddCredPayPlanLine(CredManPayPlanr,CredHistr.TransDate,CredHistr.ArtCode,"",type,CredHistr.Sum,0,acumint,calcbal,"","",CredHistr.SerNr,-1,openamount);
        if (CredHistr.RecordType==0) then begin
          if (IsInitialInvoice(CredManr,CredHistr.TransDate,lastrecnr,vFirstInv[CredHistr.RecordNr])) then begin
            firstinvf = true;
            vFirstInv[CredHistr.RecordNr] = true;//we can have multiple records for single invoice. so we need to store that this invoice is the initial invoice
          end else begin
            if (CredHistr.RecordType==0 and CredHistr.ArtCode!=CredManSetb.LateRateItem) then begin//invoice
              calculatedmonths = MonthDiff(CredManr.FirstInvDate,CredHistr.TransDate)+1;
            end;
          end;
          lastrecnr = CredHistr.RecordNr;
        end;
 //     end;
    end;
  end;

  if (buyoutamount>0) then begin
    if (CredManr.InstalmentType==2 or CredManr.InstalmentType==6) then begin
      monthlypayment = (CredManr.InvSum4-CredManr.DepositSum)/(CredManr.InstalmentMonths-CredManr.PrincipleDelayMonths);
      reducemonths = buyoutamount/monthlypayment;
      months = months - reducemonths;
    end;
  end;

  return;
end;

procedure AddInitialInvoice(record CredManVc CredManr,var record CredmanPayPlanVc CredManPayPlanr,record CredManSetBlock CMb,var val acumint,var val calcbal,Date frdate,Date todate)
begin
  
  AddPlannedFees(CredManr,CredManPayPlanr,CMb,kPlannedFeesOneTime,kMonthTypeRegular,CredManr.startDate,acumint,calcbal,frdate,todate,-1);

  return;
end;

function Boolean CredManIsPaused(record CredManVc CredManr,Date invdate)
begin
  Boolean res;
  Date pstart,pend;

  if (nonblank(CredManr.PauseDate)) then begin
    pstart = CredManr.PauseDate;
    pend = AddDay(AddMonth(pstart,CredManr.PauseMonths),-1);
    if (DateInRange(invdate,pstart,pend)) then begin
      res = true;
    end;
  end;

  CredManIsPaused = res;
  return;
end;

function Integer GetMonthType(Integer month,Integer totmonths)
begin
  Integer res;

  res = kMonthTypeRegular;
  if (month==0) then begin
    res = kMonthTypeFirst;
  end;
  if (month==totmonths-1) then begin
    res = kMonthTypeLast;
  end;

  GetMonthType = res;
  return;
end;

procedure AddFactoringInvoices(record CredManVc inCredManr,var record CredManPayPlanVc CredManPayPlanr,record CredManSetBlock CredManSetb,Date invdate,var val acumint,var val calcbal,Date frdate,Date todate)
begin
  val tcalcbal;
  record CredManFactInvoiceVc CMIr;
  Boolean TrHs;
  
  TrHs = true;
  CMIr.CustPaidFlag = 1;
  CMIr.FeeGenFlag = 0;
  while (LoopKey("CustPaidFlag:" & inCredManr.SerNr,CMIr,2,TrHs)) begin
    if (CMIr.CustPaidFlag!=1 or CMIr.FeeGenFlag!=0) then begin
      TrHs = false;
    end else begin
      tcalcbal = CMIr.TotalSum*inCredManr.LoanToValue/100;
      AddInterest(inCredManr,CredManPayPlanr,CredManSetb,kMonthTypeLast,invdate,acumint,tcalcbal,CMIr.InvDate,CMIr.PaymentDate,CMIr.SerNr);  
      tcalcbal = CMIr.TotalSum*inCredManr.LoanToValue/100;
      AddPlannedFees(inCredManr,CredManPayPlanr,CredManSetb,kPlannedFeesOneTime,kMonthTypeLast,invdate,acumint,tcalcbal,CMIr.InvDate,CMIr.PaymentDate,CMIr.SerNr);//kPlannedFeesOneTime or kPlannedFeesMonthly?
    end;
  end;

  return;
end;

global
procedure BuildCredManPayPlanCust(record CredManVc inCredManr,var record CredManPayPlanVc CredManPayPlanr,record CredManSetBlock CredManSetb,Boolean withactuals,Boolean suggestedonsameday)
begin
  Integer calculatedmonths,months;
  val acumint,calcbal;
  Integer i,monthtype,monthtype2,monthtype3,delaymonths;
  val hundred,twelve;
  Date invdat,frdat,todat;
  Boolean firstinvf;
  
/*should we calculate VAT here?
  if CredManr.VATSum > 0 and nonblank(CredManr.VATAddMonths) then begin
    GetMonthlyVatVector(CredManr.VATSum, CredManr.VATAddMonths, vatPayments);
  end;
*/

  hundred = 100;
  twelve = 12;

  months = inCredManr.InstalmentMonths;
  if (nonblank(inCredManr.PauseDate)) then begin
    months = months + inCredManr.PauseMonths;
  end;
  acumint = 0;
  calcbal = inCredManr.InvSum4;

  if (withactuals) then begin
    AddActualsToPlan(inCredManr,CredManPayPlanr,calculatedmonths,acumint,calcbal,firstinvf,CredManSetb,months);
  end;
  
  for(i=calculatedmonths;i<months;i=i+1) begin
    if (calcbal>0) then begin
      CalcCredManCurrentPeriod(inCredManr,i-1,frdat,todat,invdat); //sets dates, frdat, todat and invdat
      if (i==0 and firstinvf==false and inCredManr.InstalmentType!=4) then begin//Not for factoring
        AddInitialInvoice(inCredManr,CredManPayPlanr,CredManSetb,acumint,calcbal,"","");
      end;
      monthtype = GetMonthType(i,months);
      switch (inCredManr.InstalmentType) begin
        case 0://Annuity
          monthtype2 = monthtype;
          monthtype3 = monthtype;
          if (monthtype2==kMonthTypeLast) then begin
            monthtype2 = kMonthTypeRegular;
          end;
          if (monthtype3!=kMonthTypeFirst) then begin
            monthtype3 = kMonthTypeLast;
          end;
          AddPlannedFees(inCredManr,CredManPayPlanr,CredManSetb,kPlannedFeesMonthly,monthtype2,invdat,acumint,calcbal,frdat,todat,-1);
          AddInterest(inCredManr,CredManPayPlanr,CredManSetb,monthtype3,invdat,acumint,calcbal,frdat,todat,-1);
          if (CredManIsPaused(inCredManr,invdat)==false) then begin
            AddInstalment(inCredManr,CredManPayPlanr,CredManSetb,2,monthtype,invdat,acumint,calcbal,frdat,todat,i);
          end;
        case 1://Linear
        case 2://Linear with Service Fee - bullet with linear or just Same, Same
          monthtype2 = monthtype;
          if (monthtype2==kMonthTypeLast) then begin
            monthtype2 = kMonthTypeRegular;
          end;
          AddPlannedFees(inCredManr,CredManPayPlanr,CredManSetb,kPlannedFeesMonthly,monthtype2,invdat,acumint,calcbal,frdat,todat,-1);
          AddInterest(inCredManr,CredManPayPlanr,CredManSetb,monthtype2,invdat,acumint,calcbal,frdat,todat,-1);
          if (CredManIsPaused(inCredManr,invdat)==false) then begin
            AddInstalment(inCredManr,CredManPayPlanr,CredManSetb,1,monthtype,invdat,acumint,calcbal,frdat,todat,i);
          end;
        case 3://Bullet
          AddPlannedFees(inCredManr,CredManPayPlanr,CredManSetb,kPlannedFeesMonthly,monthtype,invdat,acumint,calcbal,frdat,todat,-1);
          AddInterest(inCredManr,CredManPayPlanr,CredManSetb,monthtype,invdat,acumint,calcbal,frdat,todat,-1);
          if (i==months-1) then begin
            AddInstalment(inCredManr,CredManPayPlanr,CredManSetb,0,monthtype,invdat,acumint,calcbal,frdat,todat,i)
          end;
        case 4://Factoring
          AddFactoringInvoices(inCredManr,CredManPayPlanr,CredManSetb,CurrentDate,acumint,calcbal,frdat,todat)
        case 5://Payment guarantee

        case 6:
          if (i==0) then begin
            inCredManr.InstalmentMonths = inCredManr.InstalmentMonths-inCredManr.PrincipleDelayMonths;
          end;
          monthtype2 = monthtype;
          if (monthtype2==kMonthTypeLast) then begin
            monthtype2 = kMonthTypeRegular;
          end;
          if (i>=inCredManr.PrincipleDelayMonths) then begin
            AddPlannedFees(inCredManr,CredManPayPlanr,CredManSetb,kPlannedFeesMonthly,monthtype2,invdat,acumint,  calcbal,frdat,todat,-1);
            AddInterest(inCredManr,CredManPayPlanr,CredManSetb,monthtype2,invdat,acumint,calcbal,frdat,todat,-1);
            AddInstalment(inCredManr,CredManPayPlanr,CredManSetb,1,monthtype,invdat,acumint,calcbal,frdat,todat,i);
          end else begin
            AddInterestDelay(inCredManr,CredManPayPlanr,CredManSetb,monthtype2,invdat,acumint,calcbal,frdat,todat,-1);
          end;
        case 7:
          if (i==0) then begin
            inCredManr.InstalmentMonths = inCredManr.InstalmentMonths-inCredManr.PrincipleDelayMonths;
            delaymonths = inCredManr.PrincipleDelayMonths;
          end;
          monthtype2 = monthtype;
          monthtype3 = monthtype;
          if (monthtype2==kMonthTypeLast) then begin
            monthtype2 = kMonthTypeRegular;
          end;
          if (monthtype3!=kMonthTypeFirst) then begin
            monthtype3 = kMonthTypeLast;
          end;
          if (i>=inCredManr.PrincipleDelayMonths) then begin
            AddPlannedFees(inCredManr,CredManPayPlanr,CredManSetb,kPlannedFeesMonthly,monthtype2,invdat,acumint,calcbal,frdat,todat,-1);
            AddInterest(inCredManr,CredManPayPlanr,CredManSetb,monthtype3,invdat,acumint,calcbal,frdat,todat,-1);
            AddInstalment(inCredManr,CredManPayPlanr,CredManSetb,2,monthtype,invdat,acumint,calcbal,frdat,todat,i-delaymonths);
          end else begin
            AddInterestDelay(inCredManr,CredManPayPlanr,CredManSetb,monthtype3,invdat,acumint,calcbal,frdat,todat,-1);
          end;
      end;
      if (i==0) then begin
        AddDeposit(inCredManr,CredManPayPlanr,CredManSetb,invdat,acumint,calcbal,frdat,todat);
      end;
    end;
  end;

  return;
end;

global
function val GetMonthlyPaymentAmount(record CredManVc inCredManr,Integer type)
begin
  record CredManSetBlock CredManSetb;
  record CredManPayPlanVc CredManPayPlanr;
  row CredManPayPlanVc CredManPayPlanrw;
  val acumint,res,bal,tmp;
  Date td;
  Integer i,rwcnt;

  BlockLoad(CredManSetb);
  td = inCredManr.startDate;

  if (BitAnd(type,2)) then begin
    bal = inCredManr.InvSum4-inCredManr.DepositSum;
    if (nonblank(inCredManr.PrincipleDelayMonths)) then begin
      AddInterestDelay(inCredManr,CredManPayPlanr,CredManSetb,kMonthTypeRegular,td,acumint,bal,"","",-1);
    end else begin
      AddInterest(inCredManr,CredManPayPlanr,CredManSetb,kMonthTypeRegular,td,acumint,bal,"","",-1);
    end;
  end;
  if (BitAnd(type,4)) then begin
    bal = inCredManr.InvSum4-inCredManr.DepositSum;
    AddPlannedFees(inCredManr,CredManPayPlanr,CredManSetb,kPlannedFeesMonthly,kMonthTypeRegular,td,acumint,bal,"","",-1);
  end;
  if (BitAnd(type,8)) then begin
    bal = inCredManr.InvSum4-inCredManr.DepositSum;
    AddInstalment(inCredManr,CredManPayPlanr,CredManSetb,1,kMonthTypeRegular,td,acumint,bal,"","",1);//first month
    if (inCredManr.MaxMonthlyPayment>0) then begin
      tmp = GetMonthlyPaymentAmount(inCredManr,6);
      MatRowGet(CredManPayPlanr,MatRowCnt(CredManPayPlanr)-1,CredManPayPlanrw);
      CredManPayPlanrw.Sum = inCredManr.MaxMonthlyPayment - tmp;
      MatRowPut(CredManPayPlanr,MatRowCnt(CredManPayPlanr)-1,CredManPayPlanrw);
    end;
  end;

  rwcnt = MatRowCnt(CredManPayPlanr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(CredManPayPlanr,i,CredManPayPlanrw);
    res = res + CredManPayPlanrw.Sum;
  end;

  GetMonthlyPaymentAmount = res;
  return;
end;

global
function string 255 GetPlanTypeTextCust(Integer plantype)
begin
  string 255 res;
  
  switch (plantype) begin
    case 0: res = "Should not happen";
    case 1: res = "Suggested Instalment";
    case 2: res = "Suggested Interest";
    case 3: res = "Suggested Deposit";
    case 4: res = "Suggested Fee";
    case 5: res = "Invoiced Instalment";
    case 6: res = "Invoiced Interest";
    case 7: res = "Invoiced Deposit";
    case 8: res = "Invoiced Fee";
    case 9: res = "Invoiced Late Fees";
    case 10: res = "Paid Instalment";
    case 11: res = "Paid Interest";
    case 12: res = "Paid Deposit";
    case 13: res = "Paid Fee";
  end;
  GetPlanTypeTextCust = res;
  return;
end;
