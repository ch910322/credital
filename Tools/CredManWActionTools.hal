external updating procedure DoBuyOutAgreement(record CredManVc,var record IVVc);
external inner procedure CredManUpdate(var record CredManVc,Integer,string);
external inner procedure CredManSumup(var record CredManVc);
external inner procedure CredManVc_PasteCurncyCode(var record CredManVc);
external procedure BuildCredManPayPlanCust(record CredManVc,var record CredManPayPlanVc,record CredManSetBlock,Boolean,Boolean);
external procedure CheckBuyOutAgreement(record CredManVc,var record RcVc);
external inner function Boolean PasteCustInCredMan(var record CredManVc);
external inner procedure CredManVc_PasteType(var record CredManVc);
external inner function Integer CreateCreditNoteIV(record IVVc,Integer,var record IVVc,string,Boolean);
external updating procedure PrintMultiDocDocument(string,string,string,Integer,Boolean);
external updating procedure PrintMultiDocDocument2(string,string,string,Integer,Boolean,record RcVc);
external inner function string 60 AddObjectToObjectList(string,string);
external inner procedure VIVc_PasteInvDate(var record VIVc);
external inner procedure VIDDefault(Integer,string,var record VIVc);
external inner function Boolean VIVc_PasteAccNumber(var record VIVc,string,Boolean,Integer);
external inner function Boolean VIVc_PasteVECode(var record VIVc,Integer,Boolean,Boolean,var string);
external inner procedure VIVc_PastePayDeal(var record VIVc);
external inner procedure VICalcVals(var record VIVc);
external inner procedure VISumup(record VIVc,var val);
external updating procedure CreateSingleAgreementInvoice(record CredManVc,Date,var record IVVc);
external inner procedure IVVc_PasteInvDate(var record IVVc,record LocalMachineBlock,var Integer,var Integer);

global
procedure PasteCustInAgreementRemote(var record CredManVc CredManr)
begin
  record BankVc Bankr;
  record CUVc CUr;
  record BaseCurBlock BCb;


  CUr.Code = CredManr.CustCode;
  if (ReadFirstMain(CUr,1,true)) then begin
    CredManr.BankCode = CUr.AccOperator;
    Bankr.Code = CUr.AccOperator;
    if (ReadFirstMain(Bankr,1,true)) then begin
      CredManr.BankName = Bankr.Name;
    end;
    CredManr.BankAccount = CUr.BankAccount;
    if (nonblank(CUr.CurncyCode)) then begin
      CredManr.CurncyCode = CUr.CurncyCode;
    end else begin
      BlockLoad(BCb);
      CredManr.CurncyCode = BCb.BaseCur1;
    end;
    CredManVc_PasteCurncyCode(CredManr);
  end;
  
  return;
end;

global
updating procedure TerminateCredMan(var record CredManVc CredManr,var record IVVc IVr)
begin
  record CMOrderClassBlock OCb;
  record CredManVc oldCredManr;
   
  BlockLoad(OCb);

  if (nonblank(OCb.TerminatedOrderClass)) then begin
    DoBuyOutAgreement(CredManr,IVr);
    RecordCopy(oldCredManr,CredManr);
    CredManr.OrderClass = OCb.TerminatedOrderClass;
    RecordUpdate(oldCredManr,CredManr,true);
  end;

  return;
end;

global
procedure CredManSetDatesCust(var record CredManVc CredManr)
begin
  record CredManSetBlock CredManSetb;
  Date startd,finv,fint,tsd;
  Integer invday;
  
  invday = CredManr.MonthlyPaymentDay;
  if (invday<1) then begin
    BlockLoad(CredManSetb);
    invday = CredManSetb.InvDay;
  end;
  startd = CredManr.startDate;
  //finv = AddMonth(startd,1); //CUST-CHANGED
  finv = AddDay(startd,25);//29
  tsd = finv;
  finv = AddDay(finv,invday - GetDay(finv));//-14
  if (tsd>finv) then begin
    finv = AddMonth(finv,1);
  end;
  CredManr.FirstInvDate = finv;
  CredManr.FirstIntDate = CredManr.startDate;
  CredManr.MoneyTransferDate = CredManr.startDate;
  CredManUpdate(CredManr,-1,"");
  CredManSumup(CredManr);
  CredManr.endDate = AddMonth(CredManr.FirstInvDate,CredManr.InstalmentMonths - 1);
  if (nonblank(CredManr.PauseDate)) then begin
    CredManr.endDate = AddMonth(CredManr.endDate,CredManr.PauseMonths);
  end;
  
  return;
end;

global
procedure DoPauseCredMan(var record CredManVc CredManr,Longint months)
begin
  record CredManVc oldCredManr;
  record CredManPayPlanVc CredManPayPlanr;
  row CredManPayPlanVc CredManPayPlanrw;
  Integer i,rwcnt;
  Date nextdate;
  record CredManSetBlock CMb;

  BlockLoad(CMb);
  BuildCredManPayPlanCust(CredManr,CredManPayPlanr,CMb,true,false);
  rwcnt = MatRowCnt(CredManPayPlanr);
  nextdate = CredManr.FirstInvDate;
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(CredManPayPlanr,i,CredManPayPlanrw);
    if (CredManPayPlanrw.PlanType<5) then begin
      i = rwcnt;
      nextdate = CredManPayPlanrw.TransDate;
    end;
  end;

  //RecordCopy(oldCredManr,CredManr);
  CredManr.PauseDate = nextdate;
  CredManr.PauseMonths = months;
  CredManSetDatesCust(CredManr);
  //RecordUpdate(oldCredManr,CredManr,true);

  return;
end;

global
procedure GetRefinCredManData(Longint CredManNr,Integer type,var record RcVc RepSpec,Boolean initf)
begin
  record CredManVc CredManr;
  record CredManPayPlanVc CredManPayPlanr;
  record CredManTypeVc CredManTyper;
  record RcVc planRepSpec;

  CredManr.SerNr = CredManNr;
  if (ReadFirstMain(CredManr,1,true)) then begin

    if (blank(RepSpec.d1)) then begin
      RepSpec.d1 = CurrentDate;
    end; 

    planRepSpec.long1 = CredManr.SerNr;
    planRepSpec.d1 = RepSpec.d1;
    CheckBuyOutAgreement(CredManr,planRepSpec);
    RepSpec.vals0 = planRepSpec.vals0;
    RepSpec.vals1 = planRepSpec.vals1;
    //RepSpec.vals2 = 0;//should stay blank;
    RepSpec.vals3 = RepSpec.vals0 + RepSpec.vals1 + RepSpec.vals2;

    if (initf) then begin
      RepSpec.long1 = CredManr.SerNr;
      RepSpec.f1 = CredManr.Type;
      CredManTyper.Code = CredManr.Type;
      if (ReadFirstMain(CredManTyper,1,true)) then begin
        RepSpec.flags[0] = CredManTyper.InstalmentMonths;
      end;
      if (type==2) then begin
        RepSpec.f2 = CredManr.SuretyProvider1;
      end else begin
        RepSpec.f2 = CredManr.CustCode;
      end;

      RepSpec.flags[1] = CredManr.MonthlyPaymentDay;
      RepSpec.vals4 = 0;
      if (type==2) then begin
        RepSpec.vals4 = CredManr.SuretyInterestRate;
      end;

      RepSpec.ArtMode = type;
    end;
  end;

  return;
end;

updating procedure CreateRefinCredMan(record RcVc RepSpec,var record CredManVc CredManr)
begin
  
  RecordNew(CredManr);
  CredManr.startDate = RepSpec.d1;
  CredManr.FirstInvDate = RepSpec.d1;
  CredManr.InvSum4 = RepSpec.vals3;
  CredManr.Type = RepSpec.f1;
  CredManr.CustCode = RepSpec.f2;
  PasteCustInCredMan(CredManr);
  CredManVc_PasteType(CredManr);
  CredManr.IntRate = RepSpec.vals4;
  CredManr.MonthlyPaymentDay = RepSpec.flags[1];
  CredManr.InstalmentMonths = RepSpec.flags[0];
  CredManSetDatesCust(CredManr); 
  CredManr.SerNr = NextSerNr("CredManVc",CredManr.startDate,-1,false,"");
  CredManr.OKFlag = 1;
  CredManr.Approved = 1;
  RecordInsert(CredManr,true);

  return;
end;

updating procedure CreditAndOKInvoice(Longint ivnr)
begin
  record IVVc IVr,IVCreditr;

  IVr.SerNr = ivnr;
  if (ReadFirstMain(IVr,1,true)) then begin
    if (CreateCreditNoteIV(IVr,kInvoiceTypeCredit,IVCreditr,"",false)==0) then begin
      IVCreditr.SerNr = NextSerNr("IVVc",IVCreditr.InvDate,-1,false,"");
      IVCreditr.OKFlag = 1;
      RecordInsert(IVCreditr,true);
    end;
  end;

  return;
end;

updating procedure CreditCredManInvoices(record CredManVc CredManr)
begin
  Boolean TrHs;
  record CredHistVc CredHistr;
  vector Boolean vInv;
  array string 255 invarr;
  record ARVc ARr;
  Integer i;

  TrHs = true;
  CredHistr.CredManNr = CredManr.SerNr;
  while (LoopKey("CredManChargeType",CredHistr,1,TrHs)) begin
    if (CredHistr.CredManNr!=CredManr.SerNr) then begin
      TrHs = false;
    end else begin
      if (CredHistr.RecordType==0) then begin
        vInv[CredHistr.RecordNr] = true;
      end;
    end;
  end;

  GetVectorTags(vInv,invarr);
  for (i=0;i<invarr.length;i=i+1) begin
    ARr.InvoiceNr = StringToLongint(invarr[i]);
    if (ReadFirstMain(ARr,1,true)) then begin
      if (ARr.RVal>0) then begin
        CreditAndOKInvoice(ARr.InvoiceNr);
      end;
    end;
  end;
  
  return;
end;

global
updating function Boolean DoRefinCredMan(record RcVc RepSpec,var string msg,var record CredManVc nCredManr)
begin
  record CMOrderClassBlock OCb;
  record IVVc IVr;
  record CredManVc CredManr,oldCredManr;
  Boolean res;
  
  CredManr.SerNr = RepSpec.long1;
  if (ReadFirstMain(CredManr,1,true)) then begin
    BlockLoad(OCb);
    RecordCopy(oldCredManr,CredManr);
    CredManr.OrderClass = OCb.RefinClass;
    if (RecordUpdate(oldCredManr,CredManr,true)==0) then begin
      CreateRefinCredMan(RepSpec,nCredManr);
      DoBuyOutAgreement(CredManr,IVr);
      CreditCredManInvoices(CredManr);
      res = true;
    end;
  end;

  DoRefinCredMan = res;
  return;
end;

global
procedure GetFactoringRecord(record CredManVc CredManr,var record CredManFactVc CMFr)
begin
  record CredManFactVc tCMFr;

  tCMFr.CredManNr = CredManr.SerNr;
  if (ReadFirstMain(tCMFr,1,true)) then begin
    RecordCopy(CMFr,tCMFr);
  end else begin
    RecordNew(CMFr);
    CMFr.CredManNr = CredManr.SerNr;
  end;

  return;
end;

global
procedure GetPayGrntRecord(record CredManVc CredManr,var record CredManPmtGrntVc PGr)
begin
  record CredManPmtGrntVc tPGr;

  tPGr.CredManNr = CredManr.SerNr;
  if (ReadFirstMain(tPGr,1,true)) then begin
    RecordCopy(PGr,tPGr);
  end else begin
    RecordNew(PGr);
    PGr.CredManNr = CredManr.SerNr;
  end;

  return;
end;

function Integer GetSuretyCnt(record CredManVc CredManr)
begin
  Integer res;
  
  res = 0;
  if (nonblank(CredManr.SuretyProvider1)) then begin
    res = res + 1;
  end;
  if (nonblank(CredManr.SuretyProvider2)) then begin
    res = res + 1;
  end;
  if (nonblank(CredManr.SuretyProvider3)) then begin
    res = res + 1;
  end;

  GetSuretyCnt = res;
  return;
end;

procedure AddSuretyToDocument(var record AgreementDocVc ADr,record CredManVc CredManr)
begin
  Integer i;
  string 255 custcode;
  row AgreementDocVc ADrw;
   
  for (i=1;i<4;i=i+1) begin
    custcode = GetFieldValueByName(CredManr,"SuretyProvider" & i,-1);
    if (nonblank(custcode)) then begin
      ClearRow(ADr,ADrw,1);
      ADrw.CustCode = custcode;
      ADrw.CustName = GetFieldValueByName(CredManr,"Surety" & i & "Name",-1);
      MatRowPut(ADr,MatRowCnt(ADr),ADrw);
    end;
  end;

  return;
end;

global
updating procedure CreateAgreementDoc(record CredManVc CredManr,Integer type,var record AgreementDocVc ADr)
begin
  string 255 fn;
  Integer scnt;
  row AgreementDocVc ADrw;
  record B2BLoanApplicationVc LAr;
  record RLinkVc RLr;
  
  RecordNew(ADr);
  ADr.SerNr = NextSerNr("AgreementDocVc",CurrentDate,-1,false,"");
  ADr.TransDate = CurrentDate;
  ADr.TransTime = CurrentTime;
  ADr.RecordNr = CredManr.SerNr;
  ADr.Type = type;
  switch (ADr.Type) begin
    case 3:
      AddSuretyToDocument(ADr,CredManr);
    case 6:
      AddSuretyToDocument(ADr,CredManr);
      goto LAddCEO;
    otherwise
LAddCEO:;
      if (ReadRecordLink(CredManr,1,LAr,RLr)) then begin
        if (nonblank(LAr.CEOCustCode)) then begin
          ClearRow(ADr,ADrw,1);
          ADrw.CustCode = LAr.CEOCustCode;
          ADrw.CustName = LAr.CEOName;
          MatRowPut(ADr,MatRowCnt(ADr),ADrw);
        end;
      end;
  end;
  if (RecordInsert(ADr,true)) then begin
    scnt = GetSuretyCnt(CredManr);
    switch (ADr.Type) begin
      case 1://agreement
        fn = "Agreement.pdf";
        PrintMultiDocDocument("CredManLongForm",fn,CredManr.SerNr,CredManr.InstalmentType,(CredManr.MaxMonthlyPayment>0));
      case 2://schedule
        fn = "Schedule.pdf";
        PrintMultiDocDocument("CredManScheduleForm",fn,CredManr.SerNr,CredManr.InstalmentType,(CredManr.MaxMonthlyPayment>0));
      case 3://surety
        fn = "Surety.pdf";
        PrintMultiDocDocument("SuretyAgreementForm" & scnt,fn,CredManr.SerNr,CredManr.InstalmentType,(CredManr.MaxMonthlyPayment>0));
      case 6://vekselis
        fn = "Vekselis.pdf";
        PrintMultiDocDocument("VekselisForm" & scnt,fn,CredManr.SerNr,CredManr.InstalmentType,(CredManr.MaxMonthlyPayment>0));
    end;
    RecordLinkFile(fn,0,ADr,CurrentCompany);
    Delete_File(fn);
  end;


  return;
end;

global
function Boolean GetAgreementDoc(record CredManVc CredManr,Integer type,var record AgreementDocVc ADr)
begin
  record AgreementDocVc tADr;
  Boolean res;
  
  tADr.RecordNr = CredManr.SerNr;
  tADr.RecordType = 0;
  tADr.Type = type;
  if (ReadFirstKey("RecordNr",tADr,3,true)) then begin
    RecordCopy(ADr,tADr);
    res = true;
  end else begin
    qupdating.CreateAgreementDoc(CredManr,type,ADr);
    res = true;
  end;

  GetAgreementDoc = res;
  return;
end;

global
updating procedure CreateAgreementDoc2(Longint sernr,string custcode,Integer rw,var record AgreementDocVc ADr)
begin
  string 255 fn;
  Integer scnt;
  row AgreementDocVc ADrw;
  record B2BLoanApplicationVc LAr;
  record RLinkVc RLr;
  record RcVc RepSpec;
  
  RecordNew(ADr);
  ADr.SerNr = NextSerNr("AgreementDocVc",CurrentDate,-1,false,"");
  ADr.TransDate = CurrentDate;
  ADr.TransTime = CurrentTime;
  ADr.RecordNr = sernr;
  ADr.Type = 8;
  if (RecordInsert(ADr,true)) then begin
    fn = "PaymentCertificate.pdf";
    RepSpec.ArtMode = rw;
    PrintMultiDocDocument2("PaymentCertificateForm",fn,sernr,0,false,RepSpec);
    RecordLinkFile(fn,0,ADr,CurrentCompany);
    Delete_File(fn);
  end;


  return;
end;

global
function Boolean GetAgreementDoc2(Longint sernr,string custcode,Integer rw,var record AgreementDocVc ADr)
begin
  record AgreementDocVc tADr;
  Boolean res,TrHs;
  
  TrHs = true;
  tADr.RecordNr = sernr;
  tADr.RecordType = 0;
  tADr.Type = 8;
  while (LoopKey("RecordNr",tADr,3,TrHs)) begin
    if (tADr.RecordNr!=sernr or tADr.RecordType!=0 or tADr.Type!=8) then begin
      TrHs = false;
    end else begin
      if (ADr.CustCode==custcode) then begin
        RecordCopy(ADr,tADr);
        res = true;
        goto LGetAgreementDoc2;
      end;
    end;
  end;
  qupdating.CreateAgreementDoc2(sernr,custcode,rw,ADr);
  res = true;//no point of having a function i guess

LGetAgreementDoc2:;
  GetAgreementDoc2 = res;
  return;
end;


updating procedure CredManCreditAllInvoices(record CredManVc CredManr)
begin
  record ARVc ARr;
  Boolean TrHs;
  record IVVc IVr,oldIVr,IVCreditr;
  record LocalMachineBlock LMb;
  Integer err1,err2;
  array record IVVc aIVr;
  Integer i;

  ARr.CustCode = CredManr.CustCode;
  TrHs = true;
  while (LoopKey("CustCode",ARr,1,TrHs)) begin
    if (ARr.CustCode!=CredManr.CustCode) then begin
      TrHs = false;
    end else begin
      if (ARr.RVal>0) then begin
        IVr.SerNr = ARr.InvoiceNr;
        if (ReadFirstMain(IVr,1,true)) then begin
          aIVr[aIVr.length] = IVr;
        end;
      end;
    end;
  end;
  for (i=0;i<aIVr.length;i=i+1) begin
    IVr = aIVr[i];
    RecordClear(IVCreditr);
    if (CreateCreditNoteIV(IVr,kInvoiceTypeCredit,IVCreditr,"",false)==0) then begin
      if (IVr.InvDate>CurrentDate) then begin
        IVCreditr.InvDate = IVr.InvDate;   
        IVVc_PasteInvDate(IVCreditr,LMb,err1,err2);
      end;
      IVCreditr.SerNr = NextSerNr("IVVc",IVCreditr.InvDate,-1,false,"");
      if (RecordInsert(IVCreditr,true)) then begin
        RecordCopy(oldIVr,IVCreditr);
        IVCreditr.OKFlag = 1;
        RecordUpdate(oldIVr,IVCreditr,true);
      end;
    end;
  end;
 

  return;
end;

updating procedure CreateCredmanPurchaseInvoice(record CredManVc CredManr,var record VIVc VIr)
begin
  record CreditalInvoiceBlock CIb;
  record VIVc oldVIr;
  row VIVc VIrw;
  val ct;
  string 255 warning;

  BlockLoad(CIb);
  RecordNew(VIr);
  VIr.SerNr = NextSerNr("VIVc",CurrentDate,-1,false,"");
  VIr.TransDate = CurrentDate;
  VIr.InvDate = CurrentDate;
  VIVc_PasteInvDate(VIr);    
  VIr.VECode = CredManr.CustCode;
  VIVc_PasteVECode(VIr,0,true,true,warning)
  VIr.PayDeal = CIb.PaymentPayDeal;
  VIVc_PastePayDeal(VIr);
  VIr.Objects =  AddObjectToObjectList(VIr.Objects,CIb.PaymentObject);
  VIr.PayVal = CredManr.InvSum4;
  ClearRow(VIr,VIrw,1);
  VIrw.AccNumber = CIb.PaymentAccount;
  MatRowPut(VIr,0,VIrw);
  VIVc_PasteAccNumber(VIr,"",true,0);
  MatRowGet(VIr,0,VIrw);
  VIrw.VATCode = CIb.PaymentVATCode;
  MatRowPut(VIr,0,VIrw);
  VIDDefault(0,"VATCode",VIr);
  MatRowGet(VIr,0,VIrw);
  VIrw.Sum = CredManr.InvSum4;
  MatRowPut(VIr,0,VIrw);
  VICalcVals(VIr);
  VISumup(VIr,ct);
  if (RecordInsert(VIr,true)) then begin
    RecordCopy(oldVIr,VIr);
    VIr.OKFlag = 1;
    RecordUpdate(oldVIr,VIr,true);
  end; 

  return;
end;

global
updating procedure CredManMakePaymentRemote(var record CredManVc CredManr,var record VIVc VIr)
begin
  record IVVc IVr;

  if (CredManr.InstalmentType!=4 and CredManr.InstalmentType!=5) then begin
    CreateSingleAgreementInvoice(CredManr,CredManr.endDate,IVr);
    CredManCreditAllInvoices(CredManr);
    CreateCredmanPurchaseInvoice(CredManr,VIr);
    if (VIr.SerNr>0) then begin
      CredManr.VINr = VIr.SerNr;
    end;
  end;


  return;
end;