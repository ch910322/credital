external updating procedure DoBuyOutAgreement(record CredManVc,var record IVVc);
external inner procedure CredManUpdate(var record CredManVc,Integer,string);
external inner procedure CredManSumup(var record CredManVc);
external inner procedure CredManVc_PasteCurncyCode(var record CredManVc);
external procedure BuildCredManPayPlanCust(record CredManVc,var record CredManPayPlanVc,record CredManSetBlock,Boolean,Boolean);
external procedure CheckBuyOutAgreement(record CredManVc,var record RcVc);
external inner function Boolean PasteCustInCredMan(var record CredManVc);
external inner procedure CredManVc_PasteType(var record CredManVc);
external inner function Integer CreateCreditNoteIV(record IVVc,Integer,var record IVVc,string,Boolean);

global
procedure PasteCustInAgreementRemote(var record CredManVc CredManr)
begin
  record BankVc Bankr;
  record CUVc CUr;
  record BaseCurBlock BCb;


  CUr.Code = CredManr.CustCode;
  if (ReadFirstMain(CUr,1,true)) then begin
    CredManr.BankCode = CUr.AccOperator;
    Bankr.Code = CUr.AccOperator;
    if (ReadFirstMain(Bankr,1,true)) then begin
      CredManr.BankName = Bankr.Name;
    end;
    CredManr.BankAccount = CUr.BankAccount;
    if (nonblank(CUr.CurncyCode)) then begin
      CredManr.CurncyCode = CUr.CurncyCode;
    end else begin
      BlockLoad(BCb);
      CredManr.CurncyCode = BCb.BaseCur1;
    end;
    CredManVc_PasteCurncyCode(CredManr);
  end;
  
  return;
end;

global
updating procedure TerminateCredMan(var record CredManVc CredManr,var record IVVc IVr)
begin
  record CMApplicationSetBlock CMASb;
  record CredManVc oldCredManr;
   
  BlockLoad(CMASb);

  if (nonblank(CMASb.TerminatedOrderClass)) then begin
    DoBuyOutAgreement(CredManr,IVr);
    RecordCopy(oldCredManr,CredManr);
    CredManr.OrderClass = CMASb.TerminatedOrderClass;
    RecordUpdate(oldCredManr,CredManr,true);
  end;

  return;
end;

global
procedure CredManSetDatesCust(var record CredManVc CredManr)
begin
  record CredManSetBlock CredManSetb;
  Date startd,finv,fint;
  Integer invday;
  
  invday = CredManr.MonthlyPaymentDay;
  if (invday<1) then begin
    BlockLoad(CredManSetb);
    invday = CredManSetb.InvDay;
  end;
  startd = CredManr.startDate;
  //finv = AddMonth(startd,1); //CUST-CHANGED
  finv = AddDay(startd,25);
  finv = AddDay(finv,invday - GetDay(finv));
  if (startd.day>invday) then begin
    finv = AddMonth(finv,1);
  end;
  CredManr.FirstInvDate = finv;
  CredManr.FirstIntDate = CredManr.startDate;
  CredManr.MoneyTransferDate = CredManr.startDate;
  CredManUpdate(CredManr,-1,"");
  CredManSumup(CredManr);
  CredManr.endDate = AddMonth(CredManr.FirstInvDate,CredManr.InstalmentMonths - 1);
  if (nonblank(CredManr.PauseDate)) then begin
    CredManr.endDate = AddMonth(CredManr.endDate,CredManr.PauseMonths);
  end;
  
  return;
end;

global
procedure DoPauseCredMan(var record CredManVc CredManr,Longint months)
begin
  record CredManVc oldCredManr;
  record CredManPayPlanVc CredManPayPlanr;
  row CredManPayPlanVc CredManPayPlanrw;
  Integer i,rwcnt;
  Date nextdate;
  record CredManSetBlock CMb;

  BlockLoad(CMb);
  BuildCredManPayPlanCust(CredManr,CredManPayPlanr,CMb,true,false);
  rwcnt = MatRowCnt(CredManPayPlanr);
  nextdate = CredManr.FirstInvDate;
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(CredManPayPlanr,i,CredManPayPlanrw);
    if (CredManPayPlanrw.PlanType<5) then begin
      i = rwcnt;
      nextdate = CredManPayPlanrw.TransDate;
    end;
  end;

  //RecordCopy(oldCredManr,CredManr);
  CredManr.PauseDate = nextdate;
  CredManr.PauseMonths = months;
  CredManSetDatesCust(CredManr);
  //RecordUpdate(oldCredManr,CredManr,true);

  return;
end;

global
procedure GetRefinCredManData(Longint CredManNr,Integer type,var record RcVc RepSpec,Boolean initf)
begin
  record CredManVc CredManr;
  record CredManPayPlanVc CredManPayPlanr;
  record CredManTypeVc CredManTyper;
  record RcVc planRepSpec;

  CredManr.SerNr = CredManNr;
  if (ReadFirstMain(CredManr,1,true)) then begin

    if (blank(RepSpec.d1)) then begin
      RepSpec.d1 = CurrentDate;
    end; 

    planRepSpec.long1 = CredManr.SerNr;
    planRepSpec.d1 = RepSpec.d1;
    CheckBuyOutAgreement(CredManr,planRepSpec);
    RepSpec.vals0 = planRepSpec.vals0;
    RepSpec.vals1 = planRepSpec.vals1;
    //RepSpec.vals2 = 0;//should stay blank;
    RepSpec.vals3 = RepSpec.vals0 + RepSpec.vals1 + RepSpec.vals2;

    if (initf) then begin
      RepSpec.long1 = CredManr.SerNr;
      RepSpec.f1 = CredManr.Type;
      CredManTyper.Code = CredManr.Type;
      if (ReadFirstMain(CredManTyper,1,true)) then begin
        RepSpec.flags[0] = CredManTyper.InstalmentMonths;
      end;
      if (type==2) then begin
        RepSpec.f2 = CredManr.SuretyProvider1;
      end else begin
        RepSpec.f2 = CredManr.CustCode;
      end;

      RepSpec.flags[1] = CredManr.MonthlyPaymentDay;
      RepSpec.vals4 = 0;
      if (type==2) then begin
        RepSpec.vals4 = CredManr.SuretyInterestRate;
      end;

      RepSpec.ArtMode = type;
    end;
  end;

  return;
end;

updating procedure CreateRefinCredMan(record RcVc RepSpec,var record CredManVc CredManr)
begin
  
  RecordNew(CredManr);
  CredManr.startDate = RepSpec.d1;
  CredManr.FirstInvDate = RepSpec.d1;
  CredManr.InvSum4 = RepSpec.vals3;
  CredManr.Type = RepSpec.f1;
  CredManr.CustCode = RepSpec.f2;
  PasteCustInCredMan(CredManr);
  CredManVc_PasteType(CredManr);
  CredManr.IntRate = RepSpec.vals4;
  CredManr.MonthlyPaymentDay = RepSpec.flags[1];
  CredManr.InstalmentMonths = RepSpec.flags[0];
  CredManSetDatesCust(CredManr); 
  CredManr.SerNr = NextSerNr("CredManVc",CredManr.startDate,-1,false,"");
  CredManr.OKFlag = 1;
  CredManr.Approved = 1;
  RecordInsert(CredManr,true);

  return;
end;

updating procedure CreditAndOKInvoice(Longint ivnr)
begin
  record IVVc IVr,IVCreditr;

  IVr.SerNr = ivnr;
  if (ReadFirstMain(IVr,1,true)) then begin
    if (CreateCreditNoteIV(IVr,kInvoiceTypeCredit,IVCreditr,"",false)==0) then begin
      IVCreditr.SerNr = NextSerNr("IVVc",IVCreditr.InvDate,-1,false,"");
      IVCreditr.OKFlag = 1;
      RecordInsert(IVCreditr,true);
    end;
  end;

  return;
end;

updating procedure CreditCredManInvoices(record CredManVc CredManr)
begin
  Boolean TrHs;
  record CredHistVc CredHistr;
  vector Boolean vInv;
  array string 255 invarr;
  record ARVc ARr;
  Integer i;

  TrHs = true;
  CredHistr.CredManNr = CredManr.SerNr;
  while (LoopKey("CredManChargeType",CredHistr,1,TrHs)) begin
    if (CredHistr.CredManNr!=CredManr.SerNr) then begin
      TrHs = false;
    end else begin
      if (CredHistr.RecordType==0) then begin
        vInv[CredHistr.RecordNr] = true;
      end;
    end;
  end;

  GetVectorTags(vInv,invarr);
  for (i=0;i<invarr.length;i=i+1) begin
    ARr.InvoiceNr = StringToLongint(invarr[i]);
    if (ReadFirstMain(ARr,1,true)) then begin
      if (ARr.RVal>0) then begin
        CreditAndOKInvoice(ARr.InvoiceNr);
      end;
    end;
  end;
  
  return;
end;

global
updating function Boolean DoRefinCredMan(record RcVc RepSpec,var string msg,var record CredManVc nCredManr)
begin
  record CMApplicationSetBlock CMb;
  record IVVc IVr;
  record CredManVc CredManr,oldCredManr;
  Boolean res;
  
  CredManr.SerNr = RepSpec.long1;
  if (ReadFirstMain(CredManr,1,true)) then begin
    BlockLoad(CMb);
    RecordCopy(oldCredManr,CredManr);
    CredManr.OrderClass = CMb.RefinClass;
    if (RecordUpdate(oldCredManr,CredManr,true)==0) then begin
      CreateRefinCredMan(RepSpec,nCredManr);
      DoBuyOutAgreement(CredManr,IVr);
      CreditCredManInvoices(CredManr);
      res = true;
    end;
  end;

  DoRefinCredMan = res;
  return;
end;

global
updating procedure GetFactoringRecord(record CredManVc CredManr,var record CredManFactVc CMFr)
begin
  record CredManFactVc tCMFr;

  tCMFr.CredManNr = CredManr.SerNr;
  if (ReadFirstMain(tCMFr,1,true)) then begin
    RecordCopy(CMFr,tCMFr);
  end else begin
    RecordNew(CMFr);
    CMFr.CredManNr = CredManr.SerNr;
  end;

  return;
end;