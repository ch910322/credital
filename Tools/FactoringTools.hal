external inner procedure IVVc_PastePayDeal(var record IVVc,string,string);
external inner procedure IVVc_PasteInvDate(var record IVVc,record LocalMachineBlock,var Integer,var Integer);
external inner function Boolean PasteCust2InInv(var record IVVc,record LocalMachineBlock,string,Boolean,var string,var string,var string,var string,var string);
external inner function Boolean IVVc_PasteArtCode(var record IVVc,Integer,var string,var string,Boolean,var Integer);
external inner function Boolean IVVc_PasteQuantity(var record IVVc,Integer);
external inner function string 60 AddObjectToObjectList(string,string);
external inner procedure VIVc_PasteInvDate(var record VIVc);
external inner procedure VIDDefault(Integer,string,var record VIVc);
external inner function Boolean VIVc_PasteAccNumber(var record VIVc,string,Boolean,Integer);
external inner function Boolean VIVc_PasteVECode(var record VIVc,Integer,Boolean,Boolean,var string);
external inner procedure VIVc_PastePayDeal(var record VIVc);
external inner procedure VICalcVals(var record VIVc);
external inner procedure VISumup(record VIVc,var val);
external function val GetCustomerOpenInvoices(string,Longint,var val);
external inner procedure OPPastePayMode(var record OPVc);
external inner function Boolean PasteInvIn2OPr(var record OPVc,Integer,Date,Integer,val,var string,Boolean,var Boolean);
external inner function Boolean PasteInvIn2IPr(var record IPVc,Integer,Date,var val,Boolean,var Boolean);
external inner procedure IPPastePayMode(var record IPVc);
external inner procedure OPVc_PasteRecVal(var record OPVc,Integer);
external inner procedure IPVc_PasteRecVal(var record IPVc,Integer);

global
updating procedure GenerateSLAndPLInvoices(record CredManFactInvoiceVc CMIr)
begin
  record CreditalInvoiceBlock CIb;
  record CredManFactInvoiceVc oldCMIr;
  record IVVc IVr;
  record VIVc VIr;
  row IVVc IVrw;
  row VIVc VIrw;
  Integer sernrf;
  Integer err1,err2;
  string 255 warning,errstr,prepstr,invdatewarn,transdatewarn;
  record LocalMachineBlock LMb;
  val ct;
  record CredManVc CredManr;
  
  CredManr.SerNr = CMIr.CredManNr;
  if (ReadFirstMain(CredManr,1,true)) then begin
    BlockLoad(CIb);
    RecordCopy(oldCMIr,CMIr);

    RecordNew(IVr);
    IVr.SerNr = NextSerNr("IVVc",CurrentDate,-1,false,"");
    IVr.TransDate = CurrentDate;
    IVr.InvDate = CMIr.InvDate;
    IVVc_PasteInvDate(IVr,LMb,err1,err2);
    IVr.CustCode = CMIr.CustCode;
    PasteCust2InInv(IVr,LMb,"",true,warning,errstr,prepstr,invdatewarn,transdatewarn)
    IVr.PayDeal = CIb.FBuyerPayDeal;
    IVVc_PastePayDeal(IVr,"","");
    IVr.PayDate = CMIr.DueDate;
    IVr.Objects =  AddObjectToObjectList(IVr.Objects,CIb.FBuyerObject);
    IVr.CustCredManNr = CMIr.CredManNr;
    ClearRow(IVr,IVrw,1);
    IVrw.ArtCode = CIb.FBuyerItem;
    MatRowPut(IVr,0,IVrw);
    IVVc_PasteArtCode(IVr,0,warning,warning,false,sernrf);
    MatRowGet(IVr,0,IVrw);
    IVrw.Quant = 1;
    MatRowPut(IVr,0,IVrw);
    IVVc_PasteQuantity(IVr,0);
    MatRowGet(IVr,0,IVrw);
    IVrw.Price = CMIr.TotalSum;
    MatRowPut(IVr,0,IVrw);
    IVVc_PasteQuantity(IVr,0);
    IVr.OKFlag = 1;
    if (RecordInsert(IVr,true)) then begin
      CMIr.SellerIVNr = IVr.SerNr;
      CMIr.InitSLInvFlag = 1;
    end;

    RecordNew(VIr);
    VIr.SerNr = NextSerNr("VIVc",CurrentDate,-1,false,"");
    VIr.TransDate = CurrentDate;
    VIr.InvDate = CurrentDate;
    VIVc_PasteInvDate(VIr);    
    VIr.VECode = CredManr.CustCode;
    VIVc_PasteVECode(VIr,0,true,true,warning)
    VIr.PayDeal = CIb.FSellerPayDeal;
    VIVc_PastePayDeal(VIr);
    VIr.Objects =  AddObjectToObjectList(VIr.Objects,CIb.FSellerObject);
    VIr.PayVal = (CMIr.TotalSum*CredManr.LoanToValue/100);
    ClearRow(VIr,VIrw,1);
    VIrw.AccNumber = CIb.FSellerAccount;
    MatRowPut(VIr,0,VIrw);
    VIVc_PasteAccNumber(VIr,"",true,0);
    MatRowGet(VIr,0,VIrw);
    VIrw.VATCode = CIb.FSellerVATCode;
    MatRowPut(VIr,0,VIrw);
    VIDDefault(0,"VATCode",VIr);
    MatRowGet(VIr,0,VIrw);
    VIrw.Sum = (CMIr.TotalSum*CredManr.LoanToValue/100);
    MatRowPut(VIr,0,VIrw);
    VICalcVals(VIr);
    VISumup(VIr,ct);
    VIr.OKFlag = 1;
    if (RecordInsert(VIr,true)) then begin
      CMIr.BuyerVINr = VIr.SerNr;
      CMIr.InitPLInvFlag = 1;
    end; 

    RecordUpdate(oldCMIr,CMIr,true);
  end;

  return;
end;

global
updating procedure AddFactoringIVAndGenerateRecords(record RcVc RepSpec,var Longint errno)
begin
  record CredManFactInvoiceVc CMIr;
  record CredManFactVc CMFr;
  row CredManFactVc CMFrw;
  Boolean foundf;
  Integer i,rwcnt;
  val openval,usedval;
  
  errno = -1;
  CMFr.CredManNr = RepSpec.long1;
  if (ReadFirstMain(CMFr,1,true)) then begin
    rwcnt = MatRowCnt(CMFr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(CMFr,i,CMFrw);
      if (CMFrw.CustCode==RepSpec.f1) then begin
        foundf = true;
        usedval = GetCustomerOpenInvoices(RepSpec.f1,RepSpec.long1,openval);
        if (usedval+RepSpec.vals0>CMFrw.MaxLimit) then begin
          errno = 200103;
          goto LAddFactoringIVAndGenerateRecords;
        end;
      end;
    end;
  end;
  if (!foundf) then begin
    errno = 200102;
    goto LAddFactoringIVAndGenerateRecords;
  end;

  if (errno==-1) then begin
    RecordNew(CMIr);
    CMIr.SerNr = NextSerNr("CredManFactInvoiceVc",CurrentDate,-1,false,"");
    CMIr.CredManNr = RepSpec.long1;
    CMIr.CustCode = RepSpec.f1;
    CMIr.CustName = RepSpec.searchstr;
    CMIr.InvDate = RepSpec.d1;
    CMIr.DueDate = RepSpec.d2;
    CMIr.InvoiceNr = RepSpec.ObjStr;
    CMIr.TotalSum = RepSpec.vals0;
    if (RecordInsert(CMIr,true)) then begin
      GenerateSLAndPLInvoices(CMIr);
    end;
  end;
LAddFactoringIVAndGenerateRecords:;
  return;
end;

global
updating procedure UpdateFactoringInvoiceReceipt(record IPVc IPr,Boolean setf)
begin
  record CredManFactInvoiceVc CMIr,oldCMIr;
  row IPVc IPrw;
  Integer i,rwcnt;
  val due;
  record ARVc ARr;
  
  rwcnt = MatRowCnt(IPr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(IPr,i,IPrw);
    if (IPrw.InvoiceNr>-1) then begin
      CMIr.SellerIVNr = IPrw.InvoiceNr;
      if (ReadFirstKey("SellerIVNr",CMIr,1,true)) then begin
        RecordCopy(oldCMIr,CMIr);
        ARr.InvoiceNr = IPrw.InvoiceNr;
        if (ReadFirstMain(ARr,1,true)) begin
          due = ARr.RVal;
        end;
        if (setf) then begin
          if (due==0) then begin
            CMIr.CustPaidFlag = 1;
            CMIr.PaymentDate = IPrw.PayDate;
          end;
          CMIr.ReceivedAmount = CMIr.TotalSum - ARr.RVal;
        end else begin
          CMIr.CustPaidFlag = 0;
          CMIr.PaymentDate = "";
          CMIr.ReceivedAmount = due;//blank value
        end;
        RecordUpdate(oldCMIr,CMIr,true);
      end;
    end;
  end;

  return;
end;

global
updating procedure UpdateFactoringInvoicePayment(record OPVc OPr,Boolean setf)
begin
  record CredManFactInvoiceVc CMIr,oldCMIr;
  row OPVc OPrw;
  Integer i,rwcnt;
  val due;
  record APVc APr;
  
  rwcnt = MatRowCnt(OPr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(OPr,i,OPrw);
    if (OPrw.VISerNr>-1) then begin
      CMIr.BuyerVINr = OPrw.VISerNr;
      if (ReadFirstKey("BuyerVINr",CMIr,1,true)) then begin
        RecordCopy(oldCMIr,CMIr);
        if (setf) then begin
          APr.SerNr = OPrw.VISerNr;
          if (ReadFirstMain(APr,1,true)) begin
            due = APr.RVal;
          end;
          if (due==0) then begin
            CMIr.CustPaid2Flag = 1;
          end;
        end else begin
          CMIr.CustPaid2Flag = 0;
        end;
        RecordUpdate(oldCMIr,CMIr,true);
      end;
    end;
  end;

  return;
end;

global
updating procedure UpdateFactoringInvoicesPL(record VIVc VIr,Boolean setf)
begin
  Integer i,rwcnt;
  record CredManFactInvoiceVc CMIr,oldCMIr;
  
//first check if this invoice was the initial factoring invoice
  
  CMIr.BuyerVINr = VIr.SerNr;
  if (ReadFirstKey("BuyerVINr",CMIr,1,true)) then begin
    if (!setf) then begin
      RecordCopy(oldCMIr,CMIr);
      CMIr.BuyerVINr = -1;
      CMIr.InitPLInvFlag = 0;
      RecordUpdate(oldCMIr,CMIr,true);
    end;
  end;

  return;
end;

global
updating procedure UpdateFactoringInvoicesSL(record IVVc IVr,Boolean setf)
begin
  Integer i,rwcnt;
  row IVVc IVrw;
  record CredManFactInvoiceVc CMIr,oldCMIr;
  
//first check if this invoice was the initial factoring invoice
  CMIr.SellerIVNr = IVr.SerNr;
  if (ReadFirstKey("SellerIVNr",CMIr,1,true)) then begin
    if (!setf) then begin
      RecordCopy(oldCMIr,CMIr);
      CMIr.SellerIVNr = -1;
      CMIr.InitSLInvFlag = 0;
      RecordUpdate(oldCMIr,CMIr,true);
    end;
  end;

//second - check if this was a fee invoice
  if (IVr.CustCredManNr>-1) then begin
    rwcnt = MatRowCnt(IVr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(IVr,i,IVrw);
      if (IVrw.FactoringInvoice>-1) then begin
        CMIr.SerNr = IVrw.FactoringInvoice;
        if (ReadFirstMain(CMIr,1,true)) then begin
          RecordCopy(oldCMIr,CMIr);
          if (setf) then begin
            CMIr.FeeGenFlag = 1;
          end else begin
            CMIr.FeeGenFlag = 0;
          end;
          RecordUpdate(oldCMIr,CMIr,true);
        end;
      end;
    end;
  end;

  return;
end;

global
procedure GetFactoringCustomers(Longint credmannr,var array string acode,var array string aname)
begin
  record CredManFactVc CMFr;
  row CredManFactVc CMFrw;
  Integer i,rwcnt;

  CMFr.CredManNr = credmannr;
  if (ReadFirstMain(CMFr,1,true)) then begin
    rwcnt = MatRowCnt(CMFr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(CMFr,i,CMFrw);
      acode[acode.length] = CMFrw.CustCode;
      aname[aname.length] = CMFrw.CustName;
    end;
  end;

  return;
end;

global
procedure FillCredManBuyers(var record CredManFactVc CMFr,var val credmanlimit)
begin
  Integer i,rwcnt;
  row CredManFactVc CMFrw;
  val open;
  
  rwcnt = MatRowCnt(CMFr);
  for (i=0;i<rwcnt;i=i+1) begin
    MatRowGet(CMFr,i,CMFrw);
    CMFrw.Used = GetCustomerOpenInvoices(CMFrw.CustCode,CMFr.CredManNr,open);
    CMFrw.OpenTotal = open;
    MatRowPut(CMFr,i,CMFrw);
  end;

  return;
end;

global
procedure CredManFactInsertCustCode(var record CredManFactVc CMFr,Integer rownr)
begin
  row CredManFactVc CMFrw;
  record CUVc CUr;
  val open;

  MatRowGet(CMFr,rownr,CMFrw);
  CUr.Code = CMFrw.CustCode;
  if (ReadFirstMain(CUr,1,true)) then begin
    CMFrw.CustName = CUr.Name;
    CMFrw.Used = GetCustomerOpenInvoices(CMFrw.CustCode,CMFr.CredManNr,open);
    CMFrw.OpenTotal = open;
    MatRowPut(CMFr,rownr,CMFrw);
  end;

  return;
end;

updating procedure CreateFeePaymentAndReceipt(record IVVc IVr,record VIVc VIr)
begin
  record OPVc OPr,oldOPr;
  row OPVc OPrw;
  record IPVc IPr,oldIPr;
  row IPVc IPrw;
  val chk;
  Boolean installmentf;
  string 255 warning;
  record CreditalInvoiceBlock CIb;

  BlockLoad(CIb);
  RecordNew(OPr);
  OPr.TransDate = CurrentDate;	 
  OPr.PayDate = CurrentDate;	 
  OPr.SerNr = NextSerNr("OPVc",OPr.TransDate,-1,false,"");		
  OPr.PayMode = CIb.FVIPaymentMode;
  OPPastePayMode(OPr);

  ClearRow(OPr,OPrw,1);
  OPrw.VISerNr = VIr.SerNr;
  MatRowPut(OPr,0,OPrw);
  PasteInvIn2OPr(OPr,0,OPr.TransDate,1,chk,warning,false,installmentf);
  MatRowGet(OPr,0,OPrw);
  if (IVr.Sum4<OPrw.BankVal) then begin
    OPrw.BankVal = IVr.Sum4;
    OPrw.RecVal = IVr.Sum4;
  end;
  MatRowPut(OPr,0,OPrw);
  OPVc_PasteRecVal(OPr,0);

  if (RecordStore(OPr,true)) then begin
    RecordCopy(oldOPr,OPr);
    OPr.DoneFlag = 1;
    OPr.OrderedFlag = 1;
    RecordUpdate(oldOPr,OPr,true);
  end;  
  
  RecordNew(IPr);
  IPr.TransDate = CurrentDate;
  IPr.SerNr = NextSerNr("IPVc",IPr.TransDate,-1,false,"");
  IPr.RegDate = CurrentDate;
  IPr.OKFlag = 0;
  IPr.PayMode = CIb.FIVPaymentMode;
  IPPastePayMode(IPr);
  
  ClearRow(IPr,IPrw,1);
  IPrw.InvoiceNr = IVr.SerNr;
  MatRowPut(IPr,0,IPrw);
  PasteInvIn2IPr(IPr,0,IPr.TransDate,chk,false,installmentf);
  MatRowGet(IPr,0,IPrw);
  if (VIr.PayVal<IPrw.InvVal) then begin
    IPrw.RecVal = VIr.PayVal;
    MatRowPut(IPr,0,IPrw);
    IPVc_PasteRecVal(IPr,0);
  end;
  if (RecordStore(IPr,true)) then begin
    RecordCopy(oldIPr,IPr);
    IPr.OKFlag = 1;
    RecordUpdate(oldIPr,IPr,true);
  end;  

  return;
end;

global
updating procedure CheckAndCreateFactoringFeeInvoicePL(record IVVc IVr)
begin
  val amount;
  row IVVc IVrw;
  Integer i,rwcnt;
  record VIVc VIr;
  row VIVc VIrw;
  record CreditalInvoiceBlock CIb;
  record CredManFactInvoiceVc CMIr;
  record CredManVc CredManr;
  string 255 warning;
  val ct;

  if (IVr.CustCredManNr>-1) then begin
    rwcnt = MatRowCnt(IVr);
    for (i=0;i<rwcnt;i=i+1) begin
      MatRowGet(IVr,i,IVrw);
      if (IVrw.FactoringInvoice>-1) then begin
        if (IVrw.ChargeType==2) then begin
          CMIr.SerNr = IVrw.FactoringInvoice;
          if (ReadFirstMain(CMIr,1,true)) then begin
            CredManr.SerNr = CMIr.CredManNr;
            if (ReadFirstMain(CredManr,1,true)) then begin
              BlockLoad(CIb);
              amount = CMIr.TotalSum - (CMIr.TotalSum*CredManr.LoanToValue/100);
              RecordNew(VIr);
              VIr.SerNr = NextSerNr("VIVc",CurrentDate,-1,false,"");
              VIr.TransDate = CurrentDate;
              VIr.InvDate = CurrentDate;
              VIVc_PasteInvDate(VIr);    
              VIr.VECode = CredManr.CustCode;
              VIVc_PasteVECode(VIr,0,true,true,warning)
              VIr.PayDeal = CIb.FSellerPayDeal;
              VIVc_PastePayDeal(VIr);
              VIr.Objects =  AddObjectToObjectList(VIr.Objects,CIb.FSellerObject);
              VIr.PayVal = amount;
              ClearRow(VIr,VIrw,1);
              VIrw.AccNumber = CIb.FSellerFeeAccount;
              MatRowPut(VIr,0,VIrw);
              VIVc_PasteAccNumber(VIr,"",true,0);
              MatRowGet(VIr,0,VIrw);
              VIrw.VATCode = CIb.FSellerVATCode;
              MatRowPut(VIr,0,VIrw);
              VIDDefault(0,"VATCode",VIr);
              MatRowGet(VIr,0,VIrw);
              VIrw.Sum = amount;
              MatRowPut(VIr,0,VIrw);
              VICalcVals(VIr);
              VISumup(VIr,ct);
              VIr.OKFlag = 1;
              if (RecordInsert(VIr,true)) then begin
                CreateFeePaymentAndReceipt(IVr,VIr);
              end; 
            end;
          end;
        end;
      end;
    end;
  end;

  return;
end;