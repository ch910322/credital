external inner procedure SendMessenteMessage(string,string);
external function string 255 NovitiGetEmailSender();
external procedure CheckBuyOutAgreement(record CredManVc,var record RcVc);
external inner function Boolean PasteCuInAct(var record ActVc,var string);
external inner function Boolean PasteActTypeInAct2(string,var record ActVc,var string);
external updating procedure Cust_SetReminderStatus(record SMSReminderQueueVc,Integer);

enum begin
  kMaxCheckDays = 5
end;


global
function string 255 SMSReminderVcReplaceToken(record SMSReminderVc SMSReminder,record RcVc RepSpec,string token)
begin
  string 255 res;
  record CYBlock CYb;
  record IVVc IVr;
  record CredManVc CMr;
  Longint pos;
  string 255 recname,field;

  if (InString(token,".")) then begin
    GetNextSubString(token,pos,".",recname);
    GetNextSubString(token,pos,".",field);
    switch (recname) begin
      case "CYb":
        BlockLoad(CYb);
        switch (field) begin
          case "CompName":   res = CYb.CompName;
          case "Bank1":      res = CYb.Bank1;
          case "Bank2":      res = CYb.Bank2;
          case "BankName":   res = CYb.BankName;
          case "Phone":      res = CYb.Phone;
          case "emailAddr":  res = CYb.emailAddr;
        end;
      case "IVr":
        IVr.SerNr = RepSpec.long1;
        if (ReadFirstMain(IVr,1,true)) then begin
          switch (field) begin
            case "SerNr":         res = IVr.SerNr;
            case "OfficialSerNr": res = IVr.OfficialSerNr;
            case "PayDate":       res = IVr.PayDate;
          end;
        end;
      case "CMr":
        CMr.SerNr = RepSpec.long2;
        if (ReadFirstMain(CMr,1,true)) then begin
          switch (field) begin
            case "SerNr":          res = CMr.SerNr;
//            case "OfficialSerNr":  res = CMr.OfficialSerNr;
//            case "MonthlyInterest":res = CMr.PayDate;
          end;
        end;
    end;    
  end else begin
    switch (token) begin
      case "CustName":
        res = RepSpec.searchstr;
      case "InvAmount":
        res = RepSpec.vals0;
      case "InvDate":
        res = DateToString(RepSpec.d1,"YYYY/MM/DD");;
      case "OverDueAmount":
        res = RepSpec.vals1;
      case "PayableAmount":
        res = RepSpec.vals2;
    end;
  end;

  SMSReminderVcReplaceToken = res;
  return;
end;

function val GetTotalPayableAmount(Longint sernr)
begin
  val res;
  record RcVc RepSpec;
  record CredManVc CredManr;
  
  CredManr.SerNr = sernr;
  if (ReadFirstMain(CredManr,1,true)) then begin  
    RepSpec.d1 = CurrentDate;
    CheckBuyOutAgreement(CredManr,RepSpec);
    res = RepSpec.vals4;
    res = res + StringToVal(RepSpec.f12,M4Val);
  end;

  GetTotalPayableAmount = res;
  return;
end;

global
procedure FindFirstContactPerson(record CUVc CUr,var record CUVc ContactCUr)
begin
  record ContactRelVc CRr;

  CRr.CustCode = CUr.Code;
  if (ReadFirstMain(CRr,1,true)) then begin
    ContactCUr.Code = CRr.ContactCode;
    if (ReadFirstMain(ContactCUr,1,true)) then begin
    end;
  end;

  return;
end;

function string 255 GetContactPhoneNumber(record CUVc CUr)
begin
  string 255 res;
  record CUVc ContactCUr;

  res = CUr.Mobile;
  if (blank(res)) then begin
    FindFirstContactPerson(CUr,ContactCUr);
    res = ContactCUr.Mobile;
  end;
  if (blank(res)) then begin
    res = CUr.Phone;
  end;
  if (blank(res)) then begin
    res = ContactCUr.Phone;
  end;

  GetContactPhoneNumber = res;
  return;
end;

function string 255 GetContactEmail(record CUVc CUr)
begin
  string 255 res;
  record CUVc ContactCUr;

  res = CUr.eMail;
  if (blank(res)) then begin
    FindFirstContactPerson(CUr,ContactCUr);
    res = ContactCUr.eMail;
  end;

  GetContactEmail = res;
  return;
end;

global
procedure SendSMSReminderToService(string phoneno,string text,Longint queuenr)
begin
  transaction Longint gSMSQueueRecord;

  gSMSQueueRecord = queuenr;
  SendMessenteMessage(phoneno,text);

  return;
end;

global
updating procedure DoHandleFailedSMSReminder(Longint sernr,Integer type,area reply)
begin
  record SMSReminderQueueVc SRQr;
  record NotePadVc Noter;
  record RLinkVc RLr;
  record MesenteSMSBlock MSb;
  record ActVc Actr;
  string 255 warning;

  SRQr.SerNr = sernr;
  if (ReadFirstMain(SRQr,1,true)) then begin
    Cust_SetReminderStatus(SRQr,3);
    RecordNew(Noter);
    Noter.SerNr = NextSerNr("NotepadVc",CurrentDate,-1,false,"");
    if (type==0) then begin
      AddAreaToTextField(reply,Noter);
    end else begin
      SetTextField(Noter,"Failed to connect to server");
    end;
    if (RecordStore(Noter,false)) then begin
      CreateRecordLink(SRQr,CurrentCompany,Noter,CurrentCompany);  
      if (ReadRecordLink(SRQr,1,Noter,RLr)) then begin
        RLr.Comment = "Error Message";
        if (RecordStore(RLr,true)) then begin
        end;
      end;
    end;
    BlockLoad(MSb);
    if (MSb.CreateActivity==1) then begin
      RecordNew(Actr);
      Actr.SerNr = NextSerNr("ActVc",CurrentDate,-1,false,"");
      Actr.TransDate = CurrentDate;
      Actr.ActType = MSb.ActType;
      PasteActTypeInAct2("",Actr,warning);
      Actr.MainPersons = MSb.ActPerson;
      Actr.Comment = MSb.ActText;
      Actr.TodoFlag = kTodoFlagTodo;
      if (RecordInsert(Actr,true)) then begin
        CreateRecordLink(Actr,CurrentCompany,SRQr,CurrentCompany);
        CreateRecordLink(SRQr,CurrentCompany,Actr,CurrentCompany);
      end;

    end;

  end;

  return;
end;

global
procedure HandleFailedSMSReminder(Integer errtype,area reply)
begin
  transaction Longint gSMSQueueRecord;

  queued.DoHandleFailedSMSReminder(gSMSQueueRecord,errtype,reply);

  return;
end;

function Boolean DoSendSMSReminder(record SMSReminderVc SMSReminder,record IVVc IVr,Longint queuenr)
begin
  record RcVc RepSpec;
  area a;
  string 255 text,tstr,phoneno;
  Integer i,lcnt;
  record CUVc CUr;
  record ARVc ARr;
  Boolean res;
  
  CUr.Code = IVr.CustCode;
  if (ReadFirstMain(CUr,1,true)) then begin
    if (CUr.NoLetterPosting!=0) then begin
      goto LSendSMSReminder;
    end;
    phoneno = GetContactPhoneNumber(CUr);
    if (blank(phoneno)) then begin
      LogText(0,"Skipping SMS reminder for contact " & CUr.Code & " - " & CUr.Name & ". No Mobile Phone specified");
      goto LSendSMSReminder;
    end;
    res = true;
    ARr.InvoiceNr = IVr.SerNr;
    ReadFirstMain(ARr,1,true);
    RepSpec.searchstr = CUr.Name;
    RepSpec.vals0 = IVr.Sum4;
    RepSpec.vals1 = ARr.RVal;
    RepSpec.long1 = IVr.SerNr;
    RepSpec.long2 = IVr.CustCredManNr;
    RepSpec.d1 = IVr.InvDate;
    RepSpec.vals2 = GetTotalPayableAmount(IVr.CustCredManNr);
    ParseTextField(a,SMSReminder,RepSpec,"SMSReminderVcReplaceToken");

    lcnt = CountLinesInArea(a);
    for (i=0;i<lcnt;i=i+1) begin
      tstr = GetLineFromArea(a,i);
      if (i>0) then begin
        text = text & "\\n";
      end;
      text = text & tstr;
    end;

    threadasync.SendSMSReminderToService(phoneno,text,queuenr);

  end;

LSendSMSReminder:;
  DoSendSMSReminder = res;
  return;
end;

global
updating function Boolean DoSendEmailReminder(record SMSReminderVc SMSReminder,record IVVc IVr)
begin
  record RcVc RepSpec;
  area a;
  string 255 text,tstr,email;
  Integer i;
  Longint l,pos;
  record CUVc CUr;
  record EMailQueVc emqrp;
  row EMailQueVc emarw;
  record CYBlock CYb;
  record ARVc ARr;
  Boolean res;
  
  CUr.Code = IVr.CustCode;
  if (ReadFirstMain(CUr,1,true)) then begin
    if (CUr.NoLetterPosting!=0) then begin
      goto LSendSMSReminder;
    end;
    email = GetContactEmail(CUr);
    if (blank(email)) then begin
      LogText(0,"Skipping Email reminder for contact " & CUr.Code & " - " & CUr.Name & ". No Email specified");
      goto LSendSMSReminder;
    end;

    res = true;
    emarw.RowTyp = 1;
    emarw.AddrCode = NovitiGetEmailSender;
    MatRowPut(emqrp,MatRowCnt(emqrp),emarw);

    emarw.RowTyp = 0;
    emarw.AddrCode = email;
    MatRowPut(emqrp,MatRowCnt(emqrp),emarw);
    emqrp.Header = SMSReminder.Subject;

    ARr.InvoiceNr = IVr.SerNr;
    ReadFirstMain(ARr,1,true);
    RepSpec.searchstr = CUr.Name;
    RepSpec.vals0 = IVr.Sum4;
    RepSpec.vals1 = ARr.RVal;
    RepSpec.long1 = IVr.SerNr;
    RepSpec.long2 = IVr.CustCredManNr;
    RepSpec.d1 = IVr.InvDate;
    RepSpec.vals2 = GetTotalPayableAmount(IVr.CustCredManNr);
    ParseTextField(a,SMSReminder,RepSpec,"SMSReminderVcReplaceToken");

    l = GetAreaLength(a);
    pos = 0;
    while (pos<l) begin
      tstr = GetStringFromArea(a,pos,255);
      AddToText(tstr,emqrp); 
      pos = pos+255;
    end;

    emqrp.SerNr = NextSerNr("EMailQueVc",CurrentDate,-1,false,"");
    emqrp.OrgSerNr = -1;
    emqrp.FileName = "";
    emqrp.TransDate = CurrentDate;
    emqrp.TransTime = CurrentTime;
    emqrp.HasFileAtt = 0;
    emqrp.HasRecAtt = 0;
    emqrp.Priority = 1;
    emqrp.EMailSent = 0;
    emqrp.Lifespan = 0;
    emqrp.QueDate = CurrentDate;
    emqrp.QueTime = CurrentTime;

    if (RecordStore(emqrp,false)==false) then begin
    end;
  end;

LSendSMSReminder:;
  DoSendEmailReminder = res;
  return;
end;

function Boolean ShouldTrigerSMSReminder(record SMSReminderVc SMSReminder)
begin
  Boolean res;
  Integer day;
  string 255 tstr;
  Time t;
  
  if (SMSReminder.LastSentDate==CurrentDate) then begin
    goto LShouldTrigerSMSReminder;
  end;

  day = GetDateID(CurrentDate);
  tstr = GetFieldValueByName(SMSReminder,"Day" & day,-1);
  if (tstr=="1") then begin
    t = StringToTime(GetFieldValueByName(SMSReminder,"Time" & day,-1));
    if (t<CurrentTime and AddMinutes(t,10)>CurrentTime) then begin
      res = true;
    end;
  end;

LShouldTrigerSMSReminder:;
  ShouldTrigerSMSReminder = res;
  return;
end;

global
updating procedure UpdateReminderLastSentDate(record SMSReminderVc SMSReminder)
begin
  record SMSReminderVc oldSMSReminder;

  if (ReadFirstMain(SMSReminder,1,true)) then begin
    RecordCopy(oldSMSReminder,SMSReminder);
    SMSReminder.LastSentDate = CurrentDate;
    RecordUpdate(oldSMSReminder,SMSReminder,true);
  end;

  return;
end;

global updating
procedure Cust_SetReminderStatus(record SMSReminderQueueVc SRQr,Integer status)
begin
  record SMSReminderQueueVc oldSRQr;
  
  RecordCopy(oldSRQr,SRQr);
  SRQr.SentFlag = status;
  RecordUpdate(oldSRQr,SRQr,true);

  return;
end;

updating procedure CreateFailedReminderActivity(record SMSReminderVc SMSReminder,string custcode)
begin
  string 255 warning;
  record ActVc Actr;

  if (SMSReminder.CreateActivity==1) then begin
    RecordNew(Actr);
    Actr.SerNr = NextSerNr("ActVc",CurrentDate,-1,false,"");
    Actr.TransDate = CurrentDate;
    Actr.CUCode = custcode;
    PasteCuInAct(Actr,warning);
    Actr.ActType = SMSReminder.ActType;
    PasteActTypeInAct2("",Actr,warning);
    Actr.MainPersons = SMSReminder.ActPerson;
    Actr.Comment = SMSReminder.ActText;
    Actr.TodoFlag = kTodoFlagTodo;
    RecordInsert(Actr,true);
  end;

  return;
end; 

global
updating procedure Cust_SendReminder(record SMSReminderQueueVc SRQr,record SMSReminderVc SMSReminder,record IVVc IVr)
begin
  Boolean sentf;

  if (SMSReminder.ReminderType==0) then begin
    sentf = DoSendSMSReminder(SMSReminder,IVr,SRQr.SerNr);
  end else begin    
    sentf = DoSendEmailReminder(SMSReminder,IVr);
  end;
  if (sentf) then begin
    Cust_SetReminderStatus(SRQr,1);
  end else begin
    Cust_SetReminderStatus(SRQr,3);
    CreateFailedReminderActivity(SMSReminder,IVr.CustCode);
  end;
  return;
end;

global
updating procedure Cust_SendReminder2(record SMSReminderVc SMSReminder,record IVVc IVr)
begin
  record SMSReminderQueueVc SRQr;
  Boolean sentf;

  RecordNew(SRQr);
  SRQr.SerNr = NextSerNr("SMSReminderQueueVc",CurrentDate,-1,false,"");
  SRQr.InvoiceNr = IVr.SerNr;
  SRQr.InvDate = CurrentDate;
  SRQr.ReminderNr = SMSReminder.SerNr;
  SRQr.SentFlag = 1;
  RecordInsert(SRQr,true);

  if (SMSReminder.ReminderType==0) then begin
    sentf = DoSendSMSReminder(SMSReminder,IVr,SRQr.SerNr);
  end else begin
    sentf = DoSendEmailReminder(SMSReminder,IVr);
  end;

  if (!sentf) then begin
    SRQr.SentFlag = 3;
    RecordStore(SRQr,true);
    CreateFailedReminderActivity(SMSReminder,IVr.CustCode);
  end;
  return;
end;

function Boolean ReminderAlreadySent(Longint ivnr,Longint remnr)
begin
  record SMSReminderQueueVc SRQr;
  Boolean res;

  SRQr.InvoiceNr = ivnr;
  SRQr.ReminderNr = remnr;
  if (ReadFirstKey("ReminderInvoice",SRQr,2,true)) then begin
    res = true;
  end;

  ReminderAlreadySent = res;
  return;
end;

function Boolean SkipCustomerBalance(longint sernr,val minval)
begin
  Boolean res;

  res = false;
  if (GetTotalPayableAmount(sernr)<minval) then begin
    res = true;
  end;

  SkipCustomerBalance = res;
  return;
end;

procedure FindAndSendInvoiceReminders(record SMSReminderVc SMSReminder)
begin
  record SMSReminderQueueVc SRQr;
  record IVVc IVr;
  Boolean TrHs,testf;
  record ARVc ARr;
  Integer latedays;
  Date td,ed;
  
  td = AddDay(CurrentDate,-SMSReminder.Days);
  switch (SMSReminder.Type) begin
    case 0:
      TrHs = true;
      SRQr.InvDate = td;
      SRQr.SentFlag = 0;
      while (LoopBackKey("SentFlag",SRQr,2,TrHs)) begin
        if (SRQr.SentFlag!=0) then begin
          TrHs = false;
        end else begin
          IVr.SerNr = SRQr.InvoiceNr;
          if (ReadFirstMain(IVr,1,true)) then begin
            testf = true;
            if (nonblank(SMSReminder.CustCode) or SMSReminder.CustCode!=IVr.CustCode) then begin
              testf = false;
            end;
            if (SMSReminder.MinAmount>0 and SkipCustomerBalance(IVr.CustCredManNr,SMSReminder.MinAmount)) then begin
              testf = false;
            end;
            if (testf) then begin
              ARr.InvoiceNr = IVr.SerNr;
              ReadFirstMain(ARr,1,true);
              if (ARr.RVal>0) then begin
                queued.Cust_SendReminder(SRQr,SMSReminder,IVr);
              end else begin
                queued.Cust_SetReminderStatus(SRQr,2);
              end;
            end;
          end;
        end;
      end;
    case 1://due date
      TrHs = true;
      ed = td;
      ARr.DueDate = AddDay(td,-kMaxCheckDays);
      while (LoopKey("DueDate",ARr,1,TrHs)) begin
        if (ARr.DueDate>ed) then begin 
          TrHs = false;
        end else begin
          IVr.SerNr = ARr.InvoiceNr;
          if (ReadFirstMain(IVr,1,true)) then begin
            testf = true;
            if (nonblank(SMSReminder.CustCode) and SMSReminder.CustCode!=IVr.CustCode) then begin
              testf = false;
            end;
            if (SMSReminder.MinAmount>0 and SkipCustomerBalance(IVr.CustCredManNr,SMSReminder.MinAmount)) then begin
              testf = false;
            end;
            if (testf) then begin
              if (ReminderAlreadySent(IVr.SerNr,SMSReminder.SerNr)==false) then begin
                queued.Cust_SendReminder2(SMSReminder,IVr);
              end;
            end;
          end;
        end;
      end;
  end;

  qupdating.UpdateReminderLastSentDate(SMSReminder);
  return;
end;

procedure CheckSMSRemindersCompany()
begin
  Boolean TrHs;
  record SMSReminderVc SMSReminder;
  
  TrHs = true;
  SMSReminder.ActiveFlag = 1;
  while (LoopKey("ActiveFlag",SMSReminder,1,TrHs)) begin
    if (SMSReminder.ActiveFlag!=1) then begin
      TrHs = false;
    end else begin
      if (ShouldTrigerSMSReminder(SMSReminder)) then begin
        FindAndSendInvoiceReminders(SMSReminder);
      end;
    end;
  end;

  return;
end;

global
procedure CheckSMSRemindersTask(string args)
begin
  Integer i,rwcnt,oldcomp;
  record CompaniesBlock Compb;

  oldcomp = CurrentCompany;
  BlockLoad(Compb);
  rwcnt = MatRowCnt(Compb);
  for (i=0;i<rwcnt;i=i+1) begin
    if (SetCompany(i+1,false)) then begin
      CheckSMSRemindersCompany;
    end;
  end;
  ResetCompany(oldcomp);

  return;
end;

global
procedure InitSMSReminderTask()
begin
  
  NewPeriodicTask2("CheckSMSRemindersTask","CheckSMSRemindersTask","CheckSMSRemindersTask","",60,"");

  return;
end;

global
updating procedure UpdateSMSReminderQueue(record IVVc IVr,record IVVc IV2r)
begin
  record SMSReminderQueueVc SRQr;
/*
  if (IVr.OKFlag==1 and IV2r.OKFlag==0) then begin
    SRQr.InvoiceNr = IVr.SerNr;
    if (ReadFirstKey("InvoiceNr",SRQr,1,true)==false) then begin
      RecordNew(SRQr);
      SRQr.SerNr = NextSerNr("SMSReminderQueueVc",CurrentDate,-1,false,"");
      SRQr.InvoiceNr = IVr.SerNr;
      SRQr.InvDate = IVr.PayDate;
      RecordInsert(SRQr,true);
    end;
  end else begin
    if (IVr.OKFlag==0 and IV2r.OKFlag==1) then begin
      SRQr.InvoiceNr = IVr.SerNr;
      if (ReadFirstKey("InvoiceNr",SRQr,1,true)) then begin
        RecordRemove(SRQr);
      end;
    end;
  end;
*/

  return;
end;

