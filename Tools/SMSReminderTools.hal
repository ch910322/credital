external procedure SendMessenteMessage(string,string);

global
function string 255 SMSReminderVcReplaceToken(record SMSReminderVc SMSReminder,record RcVc RepSpec,string token)
begin
  string 255 res;
  record CYBlock CYb;
  Longint pos;
  string 255 recname,field;

  if (InString(token,".")) then begin
    GetNextSubString(token,pos,".",recname);
    GetNextSubString(token,pos,".",field);
    switch (recname) begin
      case "CYb":
        BlockLoad(CYb);
        switch (field) begin
          case "CompName":   res = CYb.CompName;
          case "Bank1":      res = CYb.Bank1;
          case "Bank2":      res = CYb.Bank2;
          case "BankName":   res = CYb.BankName;
          case "Phone":      res = CYb.Phone;
          case "emailAddr":  res = CYb.emailAddr;
        end;
    end;    
  end else begin
    switch (token) begin
      case "CustName":
        res = RepSpec.searchstr;
      case "InvAmount":
        res = RepSpec.vals0;
      case "InvDate":
        res = DateToString(RepSpec.d1,"YYYY/MM/DD");;
    end;
  end;

  SMSReminderVcReplaceToken = res;
  return;
end;

global
procedure DoSendSMSReminder(record SMSReminderVc SMSReminder,record IVVc IVr)
begin
  record RcVc RepSpec;
  area a;
  string 255 text,tstr;
  Integer i,lcnt;
  record CUVc CUr;
  
  CUr.Code = IVr.CustCode;
  if (ReadFirstMain(CUr,1,true)) then begin
    if (CUr.NoLetterPosting!=0) then begin
      goto LSendSMSReminder;
    end;
    if (blank(CUr.Mobile)) then begin
      LogText(0,"Skipping SMS reminder for contact " & CUr.Code & " - " & CUr.Name & ". No Mobile Phone specified");
      goto LSendSMSReminder;
    end;
    
    RepSpec.searchstr = CUr.Name;
    RepSpec.vals0 = IVr.Sum4;
    RepSpec.d1 = IVr.InvDate;
    ParseTextField(a,SMSReminder,RepSpec,"SMSReminderVcReplaceToken");

    lcnt = CountLinesInArea(a);
    for (i=0;i<lcnt;i=i+1) begin
      tstr = GetLineFromArea(a,i);
      if (i>0) then begin
        text = text & "\\n";
      end;
      text = text & tstr;
    end;
  
    SendMessenteMessage(CUr.Mobile,text);

  end;

LSendSMSReminder:;
  return;
end;


global
updating procedure DoSendEmailReminder(record SMSReminderVc SMSReminder,record IVVc IVr)
begin
  record RcVc RepSpec;
  area a;
  string 255 text,tstr;
  Integer i;
  Longint l,pos;
  record CUVc CUr;
  record EMailQueVc emqrp;
  row EMailQueVc emarw;
  record CYBlock CYb;
  record MailSettingsBlock MSb;
  
  CUr.Code = IVr.CustCode;
  if (ReadFirstMain(CUr,1,true)) then begin
    if (CUr.NoLetterPosting!=0) then begin
      goto LSendSMSReminder;
    end;
    if (blank(CUr.eMail)) then begin
      LogText(0,"Skipping Email reminder for contact " & CUr.Code & " - " & CUr.Name & ". No Email specified");
      goto LSendSMSReminder;
    end;

    BlockLoad(MSb);
    emarw.RowTyp = 1;
    emarw.AddrCode = MSb.Postmaster;
    MatRowPut(emqrp,MatRowCnt(emqrp),emarw);

    emarw.RowTyp = 0;
    emarw.AddrCode = CUr.eMail;
    MatRowPut(emqrp,MatRowCnt(emqrp),emarw);
    emqrp.Header = SMSReminder.Subject;

    BlockLoad(CYb);
    RepSpec.searchstr = CUr.Name;
    RepSpec.vals0 = IVr.Sum4;
    RepSpec.d1 = IVr.InvDate;
    ParseTextField(a,SMSReminder,RepSpec,"SMSReminderVcReplaceToken");

    l = GetAreaLength(a);
    pos = 0;
    while (pos<l) begin
      tstr = GetStringFromArea(a,pos,255);
      AddToText(tstr,emqrp); 
      pos = pos+255;
    end;
    emqrp.SerNr = NextSerNr("EMailQueVc",CurrentDate,-1,false,"");
    emqrp.OrgSerNr = -1;
    emqrp.FileName = "";
    emqrp.TransDate = CurrentDate;
    emqrp.TransTime = CurrentTime;
    emqrp.HasFileAtt = 0;
    emqrp.HasRecAtt = 0;
    emqrp.Priority = 1;
    emqrp.EMailSent = 0;
    emqrp.Lifespan = 0;
    emqrp.QueDate = CurrentDate;
    emqrp.QueTime = CurrentTime;

    if (RecordStore(emqrp,false)) then begin
      
    end;
  end;

LSendSMSReminder:;
  return;
end;

function Boolean ShouldTrigerSMSReminder(record SMSReminderVc SMSReminder)
begin
  Boolean res;
  Integer day;
  string 255 tstr;
  Time t;
  
  if (SMSReminder.LastSentDate==CurrentDate) then begin
    goto LShouldTrigerSMSReminder;
  end;

  day = GetDateID(CurrentDate);
  tstr = GetFieldValueByName(SMSReminder,"Day" & day,-1);
  if (tstr=="1") then begin
    t = StringToTime(GetFieldValueByName(SMSReminder,"Time" & day,-1));
    if (t<CurrentTime and AddMinutes(t,10)>CurrentTime) then begin
      res = true;
    end;
  end;

LShouldTrigerSMSReminder:;
  ShouldTrigerSMSReminder = res;
  return;
end;

global
updating procedure UpdateReminderLastSentDate(record SMSReminderVc SMSReminder)
begin
  record SMSReminderVc oldSMSReminder;

  if (ReadFirstMain(SMSReminder,1,true)) then begin
    RecordCopy(oldSMSReminder,SMSReminder);
    SMSReminder.LastSentDate = CurrentDate;
    RecordUpdate(oldSMSReminder,SMSReminder,true);
  end;

  return;
end;

global updating
procedure Cust_SetReminderStatus(record SMSReminderQueueVc SRQr,Integer status)
begin
  record SMSReminderQueueVc oldSRQr;
  
  RecordCopy(oldSRQr,SRQr);
  SRQr.SentFlag = status;
  RecordUpdate(oldSRQr,SRQr,true);

  return;
end;

global
updating procedure Cust_SendReminder(record SMSReminderQueueVc SRQr,record SMSReminderVc SMSReminder,record IVVc IVr)
begin

  if (SMSReminder.ReminderType==0) then begin
    threadasync.DoSendSMSReminder(SMSReminder,IVr);
  end else begin    
    DoSendEmailReminder(SMSReminder,IVr);
  end;
  Cust_SetReminderStatus(SRQr,1);

  return;
end;

global
updating procedure Cust_SendReminder2(record SMSReminderVc SMSReminder,record IVVc IVr)
begin
  record SMSReminderQueueVc SRQr;

  threadasync.DoSendSMSReminder(SMSReminder,IVr);

  RecordNew(SRQr);
  SRQr.SerNr = NextSerNr("SMSReminderQueueVc",CurrentDate,-1,false,"");
  SRQr.InvoiceNr = IVr.SerNr;
  SRQr.InvDate = CurrentDate;
  SRQr.SentFlag = 1;
  RecordInsert(SRQr,true);

  return;
end;


procedure FindAndSendInvoiceReminders(record SMSReminderVc SMSReminder)
begin
  record SMSReminderQueueVc SRQr;
  record IVVc IVr;
  Boolean TrHs;
  record ARVc ARr;
  Integer latedays;
  Date td;
  
  td = AddDay(CurrentDate,SMSReminder.Days);
  switch (SMSReminder.Type) begin
    case 0:
      TrHs = true;
      SRQr.InvDate = td;
      SRQr.SentFlag = 0;
      while (LoopBackKey("SentFlag",SRQr,2,TrHs)) begin
        if (SRQr.SentFlag!=0) then begin
          TrHs = false;
        end else begin
          IVr.SerNr = SRQr.InvoiceNr;
          if (ReadFirstMain(IVr,1,true)) then begin
            ARr.InvoiceNr = IVr.SerNr;
            ReadFirstMain(ARr,1,true);
            if (ARr.RVal>0) then begin
              queued.Cust_SendReminder(SRQr,SMSReminder,IVr);
            end else begin
              queued.Cust_SetReminderStatus(SRQr,2);
            end;
          end;
        end;
      end;
    case 1://due date
      TrHs = true;
      ARr.DueDate = td;
      while (LoopKey("DueDate",ARr,2,TrHs)) begin
        if (ARr.DueDate!=td) then begin 
          TrHs = false;
        end else begin
          IVr.SerNr = ARr.InvoiceNr;
          if (ReadFirstMain(IVr,1,true)) then begin
            queued.Cust_SendReminder2(SMSReminder,IVr);
          end;
        end;
      end;
  end;

  qupdating.UpdateReminderLastSentDate(SMSReminder);
  return;
end;

global
procedure CheckSMSRemindersTask(string args)
begin
  Boolean TrHs;
  record SMSReminderVc SMSReminder;
  
  TrHs = true;
  SMSReminder.ActiveFlag = 1;
  while (LoopKey("ActiveFlag",SMSReminder,1,TrHs)) begin
    if (SMSReminder.ActiveFlag!=1) then begin
      TrHs = false;
    end else begin
      if (ShouldTrigerSMSReminder(SMSReminder)) then begin
        FindAndSendInvoiceReminders(SMSReminder);
      end;
    end;
  end;

  return;
end;

global
procedure InitSMSReminderTask()
begin
  
  NewPeriodicTask2("CheckSMSRemindersTask","CheckSMSRemindersTask","CheckSMSRemindersTask","",60,"");

  return;
end;

global
updating procedure UpdateSMSReminderQueue(record IVVc IVr,record IVVc IV2r)
begin
  record SMSReminderQueueVc SRQr;
  
  if (IVr.OKFlag==1 and IV2r.OKFlag==0) then begin
    SRQr.InvoiceNr = IVr.SerNr;
    if (ReadFirstKey("InvoiceNr",SRQr,1,true)==false) then begin
      RecordNew(SRQr);
      SRQr.SerNr = NextSerNr("SMSReminderQueueVc",CurrentDate,-1,false,"");
      SRQr.InvoiceNr = IVr.SerNr;
      SRQr.InvDate = IVr.PayDate;
      RecordInsert(SRQr,true);
    end;
  end else begin
    if (IVr.OKFlag==0 and IV2r.OKFlag==1) then begin
      SRQr.InvoiceNr = IVr.SerNr;
      if (ReadFirstKey("InvoiceNr",SRQr,1,true)) then begin
        RecordRemove(SRQr);
      end;
    end;
  end;


  return;
end;

